---
title: "Using the ESCWCC API"
# subtitle: "v0.5"
execute: 
  enabled: true
title-block-banner: "#491656"
css: styles.css
---

## Outline

This notebook details how to call the ESCWCC API endpoint and use the response data to obtain woodland carbon code (WCC) metrics
such as the claimable carbon sequestration using R and Python.

## Import required packages

::: {.panel-tabset}

## Python

```{python import_packages_py}
import requests
import json
import pandas
pandas.options.mode.chained_assignment = None
```

## R

```{r import_packages_r}
library(httr)
library(jsonlite)
library(dplyr)
```

:::

## Compose API request

Establish API POST request URL

::: {.panel-tabset}

## Python

```{python url_py}
base_url = "http://209.97.132.245:8000/ESCWCC/"
```

## R

```{r url_r}
base_url <- "http://209.97.132.245:8000/ESCWCC/"
```

:::

Set the longitude (lon) and latitude (lat) in EPSG:3857.

::: {.panel-tabset}

## Python

```{python lonlat_py}
lon = -141102.7542
lat = 6830259.9735
```

## R

```{r lonlat_r}
lon <- -141102.7542
lat <- 6830259.9735
```

:::

Establish the site modifier options.

* awcAdj:bool
    * True
    * False
* drainage:int
    * 0 = None.
    * 1 = Drainage installed.
* brash:int
    * 0 = None (new planting).
    * 1 = Fresh brash (<18 months).
    * 2 = Brash (>18 months).
* fertiliser:int
    * 0 = None.
    * 1 = Fertiliser applied.
* exposure:int
    * 0 = None.
    * 1 = Exposed ridge/Coastal zone.
    * 2 = Local shelter/Less exposed/Underplanting.

::: {.panel-tabset}

## Python

```{python siteMod_py}
awcAdj = True
drainage = 0
brash = 0
fertiliser = 0
exposure = 0
```

## R

```{r siteMod_r}
awcAdj <- TRUE
drainage <- 0
brash <- 0
fertiliser <- 0
exposure <- 0
```

:::

Establish the climate model (climateModel), climate scenario/s (climateScenList), climate years (climateYearList), species group filter (filter), and ESC version (escVersion).

* climateModel:str
    * A string, either "UKCP09" or "UKCP18-1km"
* climateScenList:List
    * For "UKCP09" a list containing any of: ["A1b3q0"]
    * For "UKCP18-1km" a list containing any of: ["RCP2.6", "RCP4.5", "RCP6.0", "RCP8.5"]
* climateYearList:List
    * For "UKCP09" a list containing any of the following timeslices: ["1961_1990", "2000_2020", "2010_2030", "2020_2040", "2030_2050", "2040_2060", "2050_2070", "2060_2080", "2070_2090"]
    * For "UKCP18-1km" a list containing any of the following timeslices: ["1980_2000", "1990_2010", "2000_2020", "2010_2030", "2020_2040", "2030_2050", "2040_2060", "2050_2070", "2060_2080"]

::: {.panel-tabset}

## Python

```{python clim_py}
climateModel = "UKCP18-1km"
climateScenList = ["RCP2.6", "RCP8.5"]
climateYearList = ["1980_2000", "2060_2080"]
filter = 0
escVersion = "4.33"
```

## R

```{r clim_r}
climateModel <- "UKCP18-1km"
climateScenList <- list("RCP2.6", "RCP8.5")
climateYearList <- list("1980_2000", "2060_2080")
filter <- 0
escVersion <- "4.33"
```

:::

Establish the Woodland Carbon Code (WCC) version (wccVersion), the planting spacing (wccSpacing), management regime (thinning or no thinning) (wccManagement), period (wccPeriod), area of the site to be established (wccEstArea) in hectares (ha), the length of roads to be constructed (wccRoadLength) in km, and the area, if any, of arable land with mineral soil to be planted (wccSoilArea) in ha.

* wccVersion:str
    * "2.4" = "2.4", (March 2021)
* wccSpacing:list
    * 0 = 'all', equivalent to {0: [1.2, 2.5, 3.0, 1.4, 1.7, 1.8, 1.5, 2.0]}
* wccManagement:list
    * 0 = 'all', equivalent to {0: ["NO_thin", "Thinned"]}
* wccPeriod:list
    * 0 = 'all', equivalent to {0: ["0", "0-5", "5-10", "10-15", "15-20", "20-25", "25-30", "30-35", "35-40", "40-45", "45-50", "50-55", "55-60", "60-65", "65-70", "70-75", "75-80", "80-85", "85-90", "90-95", "95-100", "100-105", "105-110", "110-115", "115-120", "120-125", "125-130", "130-135", "135-140", "140-145", "145-150", "150-155", "155-160", "160-165", "165-170", "170-175", "175-180", "180-185", "185-190", "190-195", "195-200"]}
* wccEstArea:float
    * 0 by default, any positive number.
* wccSeedlingArea:float
    * 0 by default, any positive number.
* wccGroundPrepFuelArea:float
    * 0 by default, any positive number.
* wccTreeSheltersArea:float
    * 0 by default, any positive number.
* wccFencingArea:float
    * 0 by default, any positive number.
* wccHerbicideArea:float
    * 0 by default, any positive number.
* wccRoadLength:float
    * 0 by default, any positive number.
* wccSoilArea:float
    * 0 by default, any positive number.

::: {.panel-tabset}

## Python

```{python wccOpts_py}
wccVersion = "2.4"
wccSpacing = 0
wccManagement = 0
wccPeriod = 0
wccSeedlingArea = 12
wccGroundPrepFuelArea = 24
wccTreeSheltersArea = 12
wccFencingArea = 6
wccHerbicideArea = 6
wccRoadLength = 1
wccSoilArea = 2
```

## R

```{r wccOpts_r}
wccVersion <- "2.4"
wccSpacing <- 0
wccManagement <- 0
wccPeriod <- 0
wccSeedlingArea <- 12
wccGroundPrepFuelArea <- 24
wccTreeSheltersArea <- 12
wccFencingArea <- 6
wccHerbicideArea <- 6
wccRoadLength <- 1
wccSoilArea <- 2
```

:::

Establish the manual Soil Moisture Regime (SMR) and Soil Nutrient Regime (SNR) modifier values.
Enter None, or omit from the request body (`req_body`) below if you do not wish to manually alter the values.

* smr:float, any number between 0 and 8. Indicative categorical values are as follows:
    * 1 = Very Wet
    * 2 = Wet 
    * 3 = Moist
    * 4 = Moist
    * 5 = Fresh
    * 6 = Slightly Dry
    * 7 = Moderately Dry
    * 8 = Very Dry
* snr:float, any number between 0 and 6. Indicative categorical values are as follows:
    * 0 = Very Poor (VP1)
    * 0.5 = Very Poor (VP2)
    * 1 = Very Poor (VP3)
    * 1.5 = Very Poor - Poor
    * 2 = Poor
    * 3 = Medium
    * 4 = Rich
    * 5 = Very Rich
    * 6 = Carbonate

::: {.panel-tabset}

## Python

```{python soilOpts_py}
smr = None
snr = None
```

## R

```{r soilOpts_r}
smr <- NA
snr <- NA
```

:::

Compose the request body. Optionally, you can accept the default values for all parameters apart from lon and lat by emitting the parameters from the request body (as shown in the commented out code below).

::: {.panel-tabset}

## Python

```{python reqBody_py}
# req_body = {"lon": lon, "lat": lat}

req_body = {"lon": lon, "lat": lat,
            "awcAdj": awcAdj,
            "drainage": drainage, "brash": brash, "fertiliser": fertiliser, "exposure": exposure, 
            "climateModel": climateModel,
            "climateScenList": climateScenList, "climateYearList": climateYearList,
            "filter": filter, "escVersion": escVersion, "wccVersion": wccVersion, 
            "smr": smr, "snr": snr,
            "wccSpacing": wccSpacing, "wccManagement": wccManagement, "wccPeriod": wccPeriod,
            "wccSeedlingArea": wccSeedlingArea,
            "wccGroundPrepFuelArea": wccGroundPrepFuelArea,
            "wccTreeSheltersArea": wccTreeSheltersArea,
            "wccFencingArea": wccFencingArea,
            "wccHerbicideArea": wccHerbicideArea,
            "wccRoadLength": wccRoadLength, "wccSoilArea": wccSoilArea}
```

## R

```{r reqBody_r}
# req_list = list("smr" = smr, "snr" = snr)

req_list <- list("lon" = lon, "lat" = lat, 
                 "awcAdj" = awcAdj,
                 "drainage" = drainage, "brash" = brash, "fertiliser" =  fertiliser, "exposure" = exposure,
                 "climateModel" = climateModel,
                 "climateScenList" = climateScenList, "climateYearList" = climateYearList,
                 "filter" = filter, "escVersion" = escVersion, "wccVersion" = wccVersion, 
                 "smr" = smr, "snr" = snr,
                 "wccSpacing" = wccSpacing, "wccManagement" = wccManagement, "wccPeriod" = wccPeriod,
                 "wccSeedlingArea" = wccSeedlingArea,
                 "wccGroundPrepFuelArea" = wccGroundPrepFuelArea,
                 "wccTreeSheltersArea" = wccTreeSheltersArea,
                 "wccFencingArea" = wccFencingArea,
                 "wccHerbicideArea" = wccHerbicideArea,
                 "wccRoadLength" = wccRoadLength, "wccSoilArea" = wccSoilArea)

req_body <- jsonlite::toJSON(req_list, auto_unbox = TRUE)
```

:::


## Make the API call

Call the ESCWCC API.

::: {.panel-tabset}

## Python

```{python apiCall_py}
ESCWCCresponse = requests.post(url = base_url, json = req_body)
ESCWCCresponse.status_code == 200
```

## R

```{r apiCall_r}
ESCWCCresponse <- httr::POST(url = base_url, body = req_body)
ESCWCCresponse$status_code == 200
```

:::

Establish a function to deserialize the json response into a nested dictionary or nested list.

::: {.panel-tabset}

## Python

```{python deserializeFunc_py}
def deserialize(responseJson:str) -> dict:
    
    loadedJson = json.loads(responseJson)

    for k,v in loadedJson.items():
        for w,s in loadedJson[k].items():
            for t,c in loadedJson[k][w].items():
                loadedJson[k][w][t] = pandas.DataFrame.from_dict(data = json.loads(c))
            
    return loadedJson
```

## R

```{r deserializeFunc_r}
deserialize <- function(responseJson){

    responseContent <- httr::content(responseJson)
    responseContent <- jsonlite::fromJSON(responseContent)

    for(i in names(responseContent)){
        for(j in names(responseContent[[i]])){
            for(k in names(responseContent[[i]][[j]])){
                responseContent[[i]][[j]][[k]] = jsonlite::fromJSON(responseContent[[i]][[j]][[k]])
            }
        }
    }
    return(responseContent)
}
```

:::

Call the `deserializeResults` function on the ESC API output.

::: {.panel-tabset}

## Python

```{python deserialize_py}
ESCWCCresponse_dict = deserialize(responseJson = ESCWCCresponse.json())
```

## R

```{r deserialize_r}
ESCWCCresponse_list <- deserialize(responseJson = ESCWCCresponse)
```

:::


## Explore results

The object produced (`ESCWCCresponse_dict` or `ESCWCCResponse_list`) is a nested dictionary with the following structure:

```
ESCresponse_dict (dict or list)
├── Metadata (dict or list)
│   ├── ESCMetadata (dict or list)
│   │   ├── ESCTreeMetadata (DataFrame)
│   ├── WCCMetadata (dict or list)
│   │   ├── WCCMetadata (DataFrame)
│   ├── APIMetadata (dict or list)
│   │   ├── DateTime (DataFrame)
└───RCP2.6 (dict)
│   ├── 1980_2000 (dict)
│   │   ├── ESCDoseVals (DataFrame)
│   │   ├── ESCResponseVals (DataFrame)
│   │   ├── ESCSuitMetrics (DataFrame)
│   │   ├── WCCTreeValues (DataFrame)
│   │   ├── WCCSoilLoss (DataFrame)
│   │   ├── WCCSoilSeq (DataFrame)
│   │   ├── WCCEstablishment (DataFrame)
│   ├── 2060_2080 (dict)
│   │   ├── ESCDoseVals (DataFrame)
│   │   ├── ESCResponseVals (DataFrame)
│   │   ├── ESCSuitMetrics (DataFrame)
│   │   ├── WCCTreeValues (DataFrame)
│   │   ├── WCCSoilLoss (DataFrame)
│   │   ├── WCCSoilSeq (DataFrame)
│   │   ├── WCCEstablishment (DataFrame)
└───RCP8.5 (dict)
    ├── 1980_2000 (dict)
    │   ├── ESCDoseVals (DataFrame)
    │   ├── ESCResponseVals (DataFrame)
    │   ├── ESCSuitMetrics (DataFrame)
    │   ├── WCCTreeValues (DataFrame)
    │   ├── WCCSoilLoss (DataFrame)
    │   ├── WCCSoilSeq (DataFrame)
    │   ├── WCCEstablishment (DataFrame)
    ├── 2060_2080 (dict)
    │   ├── ESCDoseVals (DataFrame)
    │   ├── ESCResponseVals (DataFrame)
    │   ├── ESCSuitMetrics (DataFrame)
    │   ├── WCCTreeValues (DataFrame)
    │   ├── WCCSoilLoss (DataFrame)
    │   ├── WCCSoilSeq (DataFrame)
    │   ├── WCCEstablishment (DataFrame)
```

Access the ESC & WCC data frames from the API response for a given climate scenario using the following code.

The `ESCDoseVals` data frame contains the environmental dose variables obtained from the modelled data and/or manually entered, which are then modified by the aforementioned API query parameters `drainage`, `brash`, `fertiliser`, and `exposure`.
For more information on the underlying method see the [Forest Research Bulletin 124](https://www.forestresearch.gov.uk/publications/archive-an-ecological-site-classification-for-forestry-in-great-britain/) and the [Forest Research Technical Paper 20](https://www.forestresearch.gov.uk/publications/archive-an-ecological-site-classification-for-forestry-in-great-britain-with-special-reference-to-grampian-scotland/).
Column definitions:

* SMR - soil moisture regime
* SNR - soil nutrient regime
* AT - accumulated temperature
* CT - continentality
* DAMS - direct aspect method of scoring
* MD - moisture deficit
* Item - The stage of modification of the environmental dose variable values.

::: {.panel-tabset}

## Python

```{python ESCDoseVals_py}
ESCDoseVals = ESCWCCresponse_dict.get("RCP2.6").get("1980_2000").get("ESCDoseVals")
ESCDoseVals
```

## R

```{r ESCDoseVals_r}
ESCDoseVals = ESCWCCresponse_list$`RCP2.6`$`1980_2000`$ESCDoseVals
ESCDoseVals
```

:::

The `ESCResponseVals` data frame contains data on the response of each tree species to each environmental dose metric.
Column definitions:

* speciesCode - The Forest Research species code for the species.
* metric - The environmental dose variable (see above).
* response - The response of the tree species to the environmental dose variable. A unitless value between 0 and 1.

::: {.panel-tabset}

## Python

```{python ESCResponseVals_py}
ESCResponseVals = ESCWCCresponse_dict.get("RCP2.6").get("1980_2000").get("ESCResponseVals")
ESCResponseVals.head()
```

## R

```{r ESCResponseVals_r}
ESCResponseVals = ESCWCCresponse_list$`RCP2.6`$`1980_2000`$ESCResponseVals
ESCResponseVals |> head()
```

:::

The `ESCSuitMetrics` data frame contains a range of summary data relating to the suitability of each tree species based on the `ESCResponseVals` data.
Column definitions:

* speciesCode - The Forest Research species code for the species.
* speciesScientific - The scientific name of the species.
* speciesName - The common name of the species.
* maxYC - The maximum yield class of that species
* threat - Any major threats to that tree species which should be taken into account when considering planting that species.
* limFactorInclAT - The limiting factor (metric with the lowest response) including AT.
* limFactorInclATResponse - The response value for limiting factor (metric with the lowest response) including AT.
* limFactorExclAT - The limiting factor (metric with the lowest response) excluding AT.
* limFactorExclATResponse - The response value for limiting factor (metric with the lowest response) excluding AT.
* TimberSuitability - The suitability of that tree species for planting as a timber crop.
* EcologicalSuitability - The suitability of that tree species for planting.
* estimatedYC - The estimated yield class.

::: {.panel-tabset}

## Python

```{python ESCSuitMetrics_py}
ESCSuitMetrics = ESCWCCresponse_dict.get("RCP2.6").get("1980_2000").get("ESCSuitMetrics")
ESCSuitMetrics.head()
```

## R

```{r ESCSuitMetrics_r}
ESCSuitMetrics = ESCWCCresponse_list$`RCP2.6`$`1980_2000`$ESCSuitMetrics
ESCSuitMetrics |> head()
```

:::

The `WCCTreeValues` data frame contains data from the woodland carbon code biomass carbon lookup tables (BCLT) and clearfell max sequence values for the yield class nearest to the ESC estimated yield class.
Column definitions:

* speciesCode - The Forest Research species code for the species.
* wccCode - The WCC species code mapped to the ESC species, from which the WCC data is retrieved.
* speciesScientific - The scientific name of the species.
* speciesName - The common name of the species.
* estimatedYC - The estimated yield class.
* roundedYC - The nearest even yield class
* minWCCYC - The lowest yield class with corresponding values for the wccCode biomass carbon lookup tables (BCLT) data
* maxWCCYC - The highest yield class with corresponding values for the wccCode biomass carbon lookup tables (BCLT) data
* finalYC - The yield class used to retrieve the BCLT data. If the roundedYC is less than the minWCCYC this is set to the minWCCYC. If the roundedYC is greater than the maxWCCYC this is set to the maxWCCYC, else the roundedYC value is used.
* spacing - The planting spacing. Retrieved from column C in the BCLT tables.
* management - The management regime for the planted area, thinned or un-thinned. Retrieved from column E in the BCLT tables.
* period - The period of years associated with the wcc data. Retrieved from column F in the BCLT tables.
* standingCarbonYr - The carbon contained within the above-ground biomass of the trees planted on site. Retrieved from column G in the BCLT tables. Units of tCO2e/ha/yr.
* debrisCarbonYr - The carbon contained within the debris on site. Retrieved from column H in the BCLT tables. Units of tCO2e/ha/yr.
* totalCarbonYr - The total carbon contained on site, equal to the sum of standingCarbonYr and debrisCarbonYr. Retrieved from column I in the BCLT tables. Units of tCO2e/ha/yr.
* cumCarbon5Yr - The cumulative carbon sequestered on site over the period stipulated in the period column. Retrieved from column J in the BCLT tables. Units of tCO2e/ha/period.
* cumBiomassCarbon - The cumulative carbon sequestered on site over up until the period stipulated in the period column. Retrieved from column K in the BCLT tables. Units of tCO2e/ha.
* cumEmissionsMgmt - The cumulative emissions from ongiong management on site. Retrieved from column L in the BCLT tables. Units of tCO2e/ha.
* cumTotalCarbon - The total cumulative emissions on site. Retrieved from column M in the BCLT tables. Units of tCO2e/ha.
* remCarbonYr - The quantity of carbon removed from the site yearly. Retrieved from column N in the BCLT tables. Units of tCO2e/ha/yr.
* periodEnd - The rotation length stipulated in columns F to AK of the "Clearfell_Max_Seq_Values" sheet of the excel tool. Mapped to the last year of the period present in the period column.
* clearfellCapCarbon - The Clearfell Cap Value associated with the periodEnd, wccCode, spacing, YC, and management. Units of tCO2e.

::: {.callout-warning}
## Warning

The finalYC may differ considerably from the ESC estimatedYC due to the limited number of species - YC combinations for which data is available from the WCC BCLT tables.
It is left to the API user to determine whether the use of the BCLT values returned for a given finalYC are appropriate.

:::

::: {.panel-tabset}

## Python

```{python WCCTreeValues_py}
WCCTreeValues = ESCWCCresponse_dict.get("RCP2.6").get("1980_2000").get("WCCTreeValues")
WCCTreeValues.head()
```

## R

```{r WCCTreeValues_r}
WCCTreeValues = ESCWCCresponse_list$`RCP2.6`$`1980_2000`$WCCTreeValues
WCCTreeValues |> head()
```

:::

The `WCCEstablishment` data frame contains the establishment emission values calculated using the same methodology as in the "StandardProjectCarbonCalculator" sheet of the excel tool.
Column definitions:

* seedlingSpacing - The spacing between each sapling in meters.
* size - The size metric (length or area) associated with the variable
* sizeUnit - The units (km or ha) associated with the size metric.
* emissionsPerSize - The emissions in tCO2e per size unit.
* totalEmissions - The carbon emissions associated with that seedlingSpacing and variable. Units of tCO2e.
* variable - The establishment emission source, one of:
    * seedling
    * groundPrepFuel
    * treeShelters
    * fencing
    * herbicide

::: {.panel-tabset}

## Python

```{python WCCEstablishment_py}
WCCEstablishment = ESCWCCresponse_dict.get("RCP2.6").get("1980_2000").get("WCCEstablishment")
WCCEstablishment.head()
```

## R

```{r WCCEstablishment_r}
WCCEstablishment = ESCWCCresponse_list$`RCP2.6`$`1980_2000`$WCCEstablishment
WCCEstablishment |> head()
```

:::

The `WCCSoilLoss` data frame contains data on the soil carbon emissions during the year of establishment (Year 1) for each country, percentage topsoil carbon to be subtracted and previous land use.
Column definitions:

* Country - The country in which the site is located.
* topsoilCarbonSubtract - the percentage of topsoil carbon to subtract .
* Seminatural - the soil carbon emissions associated with the previous land-use "Semi-natural", units in tCO2e/ha.
* Pasture - the soil carbon emissions associated with the previous land-use "Pasture, units in tCO2e/ha.
* Arable - the soil carbon emissions associated with the previous land-use "Arable", units in tCO2e/ha.

::: {.panel-tabset}

## Python

```{python WCCSoilLoss_py}
WCCSoilLoss = ESCWCCresponse_dict.get("RCP2.6").get("1980_2000").get("WCCSoilLoss")
WCCSoilLoss.head()
```

## R

```{r WCCSoilLoss_r}
WCCSoilLoss = ESCWCCresponse_list$`RCP2.6`$`1980_2000`$WCCSoilLoss
WCCSoilLoss |> head()
```

:::

The `WCCSoilSeq` data frame contains data on the cumulative soil carbon sequestration for mineral soils which where the former land use was arable agriculture. 
Column definitions:

* period - The period of years associated with the wcc data. Retrieved from column Y in the "StandardProjectCarbonCalculator" sheet of the excel tool.
* cumSoilSeq - Calculated by multiplying column AY in the "StandardProjectCarbonCalculator" by the site area. Units in tCO2e.

::: {.panel-tabset}

## Python

```{python WCCSoilSeq_py}
WCCSoilSeq = ESCWCCresponse_dict.get("RCP2.6").get("1980_2000").get("WCCSoilSeq")
WCCSoilSeq.head()
```

## R

```{r WCCSoilSeq_r}
WCCSoilSeq = ESCWCCresponse_list$`RCP2.6`$`1980_2000`$WCCSoilSeq
WCCSoilSeq |> head()
```

:::

## Calculate Claimable Carbon Sequestration 

To calculate the average total claimable sequestration by year in tCO2e/ha perform the following calculations using the API outputs.

Columns suffixed with (<[A-Z]>) correspond to the columns CB to CM of Version 2.4 (March 2021) of the WCC excel tool.

First, retrieve the WCC Biomass Carbon Lookup Table (BCLT) and Clearfell Max Seq Values (CMSV) values for selected species, e.g. the major tree species present in the National Vegetation Classification (NVC) W14 "Beech-oak woodland with bramble": Beech (BE), Holly (HOL), and Pedunculate oak (POK).

::: {.panel-tabset}

## Python

```{python selSpp_py}
WCCTreeValues_selSpp = WCCTreeValues[WCCTreeValues["speciesCode"].isin(["BE", "HOL", "POK"])]
WCCTreeValues_selSpp.head()
```

## R

```{r selSpp_r}
WCCTreeValues_selSpp <- WCCTreeValues |>
    dplyr::filter(speciesCode %in% c("BE", "HOL", "POK"))
WCCTreeValues_selSpp |> head()
```

:::

::: {.callout-warning}
## Warning

Data in WCCTreeValues varies by spacing and management for each wccCode and therefore speciesCode. It is advised that the user checks what spacing and management values are available for the selected species.

:::

::: {.panel-tabset}

## Python

```{python checkMeta_py}
WCCTreeValues_selSpp[["speciesCode", "spacing", "management"]].drop_duplicates().reset_index()
```

## R

```{r checkMeta_r}
WCCTreeValues_selSpp |>
    dplyr::select(speciesCode, spacing, management) |>
    unique()
```

:::

Select the BCLT and CMSV values for a particular spacing and management regime, e.g. 3m and Thinned, checking that data is available for each as above.

::: {.panel-tabset}

## Python

```{python spman_py}
WCCTreeValues_selSpp_3_Thinned = WCCTreeValues_selSpp[(WCCTreeValues_selSpp.spacing == 3) & (WCCTreeValues_selSpp.management == "Thinned")]
WCCTreeValues_selSpp_3_Thinned.head()
```

## R

```{r spman_r}
WCCTreeValues_selSpp_3_Thinned <- WCCTreeValues_selSpp |>
    dplyr::filter(spacing == 3,
                  management == "Thinned")
WCCTreeValues_selSpp_3_Thinned |> head()
```

:::

Define a species composition for the site and join to a trimmed WCCTreeValues dataframe.

::: {.panel-tabset}

## Python

```{python sppComp_py}
species_composition = pandas.DataFrame.from_dict(data = {"speciesCode": ["BE", "HOL", "POK"], "proportion": [0.4, 0.2, 0.4]})
species_composition
```

## R

```{r sppComp_r}
species_composition <- data.frame("speciesCode" = c("BE", "HOL", "POK"), "proportion" = c(0.4, 0.2, 0.4))
species_composition
```

:::

Form a new data frame, select the relevant columns, and merge the species composition data frame.

::: {.panel-tabset}

## Python

```{python setDF_py}
df = WCCTreeValues_selSpp_3_Thinned
df = df[["speciesCode", "period", "cumTotalCarbon"]]
df = df.merge(species_composition, on = ["speciesCode"])
df.head()
```

## R

```{r setDF_r}
df <- WCCTreeValues_selSpp_3_Thinned
df <- df |>
    dplyr::select(speciesCode, period, cumTotalCarbon) |>
    dplyr::left_join(species_composition, by = "speciesCode")
df |> head()
```

:::

Multiply the 'Cumulative total sequestration" data (cumTotalCarbon) by the species proportion (proportion) and area planting with seedlings/saplings (wccSeedlingArea).

::: {.panel-tabset}

## Python

```{python cumTotalCarbonSite_py}
df["cumTotalCarbonSite (A)"] = df["cumTotalCarbon"] * df["proportion"] * wccSeedlingArea
df.head()
```

## R

```{r cumTotalCarbonSite_r}
df <- df |>
    dplyr::mutate("cumTotalCarbonSite (A)" = cumTotalCarbon * proportion * wccSeedlingArea)
df |> head()
```

:::

Sum across all species.

::: {.panel-tabset}

## Python

```{python sumSpp_py}
df = df.drop(columns = ["speciesCode", "cumTotalCarbon", "proportion"])
df = df.groupby("period").sum().reset_index()
df.head()
```

## R

```{r sumSpp_r}
df <- df |>
    dplyr::select(-speciesCode, -cumTotalCarbon, -proportion) |>
    dplyr::group_by(period) |>
    dplyr::summarise(`cumTotalCarbonSite (A)` = sum(`cumTotalCarbonSite (A)`))
df |> head()
```

:::

Add a 20% buffer by multiplying the Cumulative total sequestration for the site by 0.8

::: {.panel-tabset}

## Python

```{python buff_py}
df["cumTotalCarbonSiteReduced (B)"] = df["cumTotalCarbonSite (A)"] * 0.8
df.head()
```

## R

```{r buff_r}
df <- df |>
    dplyr::mutate("cumTotalCarbonSiteReduced (B)" = `cumTotalCarbonSite (A)` * 0.8)
df |> head()
```

:::

Retrieve the total establishment emissions for the selected spacing and add to the dataframe.

::: {.panel-tabset}

## Python

```{python establishmentCarbonLoss_py}
totalEstablishmentC = WCCEstablishment[(WCCEstablishment.seedlingSpacing == 1.5)]
totalEstablishmentC = totalEstablishmentC["totalEmissions"].sum()
df["establishmentCarbonLoss (C)"] = totalEstablishmentC
df.head()
```

## R

```{r establishmentCarbonLoss_r}
totalEstablishmentC <- WCCEstablishment |>
    dplyr::filter(seedlingSpacing == 1.5) |>
    dplyr::summarise(sum(totalEmissions)) |>
    as.double()

df <- df |>
    dplyr::mutate("establishmentCarbonLoss (C)" = totalEstablishmentC)

df |> head()
```

:::

Calculate soil carbon flux by summing soil loss and soil sequestration data .
To do this first identify the % topsoil carbon (0-30cm) loss associated with the method of site preparation and soil type.

::: {.panel-tabset}

## Python

```{python percSoilLoss_py}
establishmentMethods = pandas.DataFrame.from_dict(data = {"MethodSitePrep": ["Negligible Disturbance", "Low Disturbance", "Medium Disturbance", "High Disturbance", "Very High Disturbance"],
                                                          "Organomineral": [0, 5, 10, 20, 40],
                                                          "Mineral": [0, 0, 2, 5, 10]})

establishmentMethods = establishmentMethods.set_index("MethodSitePrep")
percSoilLoss = establishmentMethods._get_value("Medium Disturbance", "Mineral")

percSoilLoss
```

## R

```{r percSoilLoss_r}
establishmentMethods <- data.frame("MethodSitePrep" = c("Negligible Disturbance", "Low Disturbance", "Medium Disturbance", "High Disturbance", "Very High Disturbance"),
                                   "Organomineral" = c(0, 5, 10, 20, 40),
                                   "Mineral" = c(0, 0, 2, 5, 10))

percSoilLoss <- establishmentMethods |>
    dplyr::filter(MethodSitePrep == "Medium Disturbance") |>
    dplyr::pull(Mineral)

percSoilLoss
```

:::

Retrieve the soil carbon lost for the selected country, previous land use, and % topsoil carbon (0-30cm) loss identified above.

::: {.panel-tabset}

## Python

```{python soilCLoss_py}
soilCLoss = WCCSoilLoss[WCCSoilLoss["topsoilCarbonSubtract"] == percSoilLoss]
soilCLoss = soilCLoss.set_index("Country")
soilCLoss = soilCLoss._get_value("England", "Arable")

soilCLoss
```

## R

```{r soilCLoss_r}
soilCLoss <- WCCSoilLoss |>
    dplyr::filter(topsoilCarbonSubtract == percSoilLoss,
                  Country == "England") |>
    dplyr::pull(Arable)

soilCLoss
```

:::

Calculate the total net soil carbon flux.

::: {.panel-tabset}

## Python

```{python soilCFlux_py}
soilCFlux = WCCSoilSeq
soilCFlux["cumSoilLoss"] = soilCLoss
soilCFlux["cumSoilCarbonFlux (D)"] = soilCFlux["cumSoilLoss"] + soilCFlux["cumSoilSeq"]
soilCFlux = soilCFlux.drop(columns = ["cumSoilSeq", "cumSoilLoss"])

soilCFlux.head()
```

## R

```{r soilCFlux_r}
soilCFlux <- WCCSoilSeq |>
    dplyr::mutate("cumSoilLoss" = soilCLoss,
                  "cumSoilCarbonFlux (D)" = cumSoilLoss + cumSoilSeq) |>
    dplyr::select(-cumSoilSeq, -cumSoilLoss)

soilCFlux |> head()
```

:::

Merge soil carbon flux.

::: {.panel-tabset}

## Python

```{python mergeSoil_py}
df = df.merge(soilCFlux, on = ["period"])

df.head()
```

## R

```{r mergeSoil_r}
df <- df |>
    dplyr::left_join(soilCFlux, by = "period")

df |> head()
```

:::

Calculate the total cumulative carbon sequestration.

::: {.panel-tabset}

## Python

```{python totalProjectCarbonSeq_py}
df["totalProjectCarbonSeq (E)"] = df["cumTotalCarbonSiteReduced (B)"] + df["establishmentCarbonLoss (C)"] + df["cumSoilCarbonFlux (D)"]

df.head()
```

## R

```{r totalProjectCarbonSeq_r}
df <- df |>
    dplyr::mutate("totalProjectCarbonSeq (E)" = `cumTotalCarbonSiteReduced (B)` + `establishmentCarbonLoss (C)` + `cumSoilCarbonFlux (D)`)

df |> head()
```

:::

Optionally, add Baseline and Leakage data then calculate the adjusted, net total project carbon sequestration.

::: {.panel-tabset}

## Python

```{python baseLeak_py}
df["Baseline (F)"] = 0
df["Leakage (G)"] = 0
df["netTotalProjectCarbonSeq (H)"] = df["totalProjectCarbonSeq (E)"]+ df["Baseline (F)"] + df["Leakage (G)"]

df.head()
```

## R

```{r baseLeak_r}
df <- df |>
    dplyr::mutate("Baseline (F)" = 0, "Leakage (G)" = 0) |>
    dplyr::mutate("netTotalProjectCarbonSeq (H)" = `totalProjectCarbonSeq (E)` + `Baseline (F)` + `Leakage (G)`)

df |> head()
```

:::

Calculate the claimable carbon sequestration by adding a final 20% buffer.

::: {.panel-tabset}

## Python

```{python claimableCarbonSeq_py}
df["claimableCarbonSeq (J)"] = df["netTotalProjectCarbonSeq (H)"] * 0.8
df.head()
```

## R

```{r claimableCarbonSeq_r}
df <- df |>
    dplyr::mutate("claimableCarbonSeq (J)" = `netTotalProjectCarbonSeq (H)` * 0.8)

df |> head()
```

:::

Calculate the mean claimable carbon sequestration per hectare, in tCO2e per ha per year

::: {.panel-tabset}

## Python

```{python meanClaimableCarbonSeqPerHa_py}
df["meanClaimableCarbonSeqPerHa (K)"] = df["claimableCarbonSeq (J)"] / wccSeedlingArea
df.head()
```

## R

```{r meanClaimableCarbonSeqPerHa_r}
df <- df |>
    dplyr::mutate("meanClaimableCarbonSeqPerHa (K)" = `claimableCarbonSeq (J)` / wccSeedlingArea)

df |> head()
```

:::