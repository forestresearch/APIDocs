[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "FR DSS API Documentation",
    "section": "",
    "text": "Here the use of various Forest Research (FR) Decision Support System (DSS) tool API endpoints are documented for R and Python."
  },
  {
    "objectID": "index.html#esc",
    "href": "index.html#esc",
    "title": "FR DSS API Documentation",
    "section": "ESC",
    "text": "ESC\n repo status: Activerepo statusrepo statusActiveActive  \nThe Ecological Site Classification (ESC) API endpoints are constructed using FastAPI, the OpenAPI documentation can be found here.\nPlease note that the API is in active development and the licence conditions are under consideration."
  },
  {
    "objectID": "UsingESCSiteData.html",
    "href": "UsingESCSiteData.html",
    "title": "Using the ESCSiteData API",
    "section": "",
    "text": "This notebook details how to call the ESCSiteData API endpoint to retrieve modelled environmental dose values for a given location and climate scenario.",
    "crumbs": [
      "ESC",
      "Using the ESCSiteData API"
    ]
  },
  {
    "objectID": "UsingESCSiteData.html#import-required-packages",
    "href": "UsingESCSiteData.html#import-required-packages",
    "title": "Using the ESCSiteData API",
    "section": "Import required packages",
    "text": "Import required packages\n\nPythonR\n\n\n\nimport requests\nimport json\nimport pandas\npandas.options.mode.chained_assignment = None\n\n\n\nlibrary(httr)\nlibrary(jsonlite)\nlibrary(dplyr)",
    "crumbs": [
      "ESC",
      "Using the ESCSiteData API"
    ]
  },
  {
    "objectID": "UsingESCSiteData.html#compose-api-request",
    "href": "UsingESCSiteData.html#compose-api-request",
    "title": "Using the ESCSiteData API",
    "section": "Compose API request",
    "text": "Compose API request\nEstablish API POST request URL\n\nPythonR\n\n\n\nbase_url = \"https://escapi.frdss.org.uk/ESCSiteData/\"\n\n\n\nbase_url &lt;- \"https://escapi.frdss.org.uk/ESCSiteData/\"\n\n\n\nSet the longitude (lon) and latitude (lat) in EPSG:3857.\n\nPythonR\n\n\n\nlon = -141102.7542\nlat = 6830259.9735\n\n\n\nlon &lt;- -141102.7542\nlat &lt;- 6830259.9735\n\n\n\nEstablish the climate model (climateModel), climate scenario/s (climateScenList) and climate years (climateYearList).\n\nclimateModel:str\n\nA string, either “UKCP09” or “UKCP18-1km”\n\nclimateScenList:List\n\nFor “UKCP09” a list containing any of: [“A1b3q0”]\nFor “UKCP18-1km” a list containing any of: [“RCP2.6”, “RCP4.5”, “RCP6.0”, “RCP8.5”]\n\nclimateYearList:List\n\nFor “UKCP09” a list containing any of the following timeslices: [“1961_1990”, “2000_2020”, “2010_2030”, “2020_2040”, “2030_2050”, “2040_2060”, “2050_2070”, “2060_2080”, “2070_2090”]\nFor “UKCP18-1km” a list containing any of the following timeslices: [“1980_2000”, “1990_2010”, “2000_2020”, “2010_2030”, “2020_2040”, “2030_2050”, “2040_2060”, “2050_2070”, “2060_2080”]\n\n\n\nPythonR\n\n\n\nclimateModel = \"UKCP18-1km\"\nclimateScenList = [\"RCP2.6\", \"RCP8.5\"]\nclimateYearList = [\"1980_2000\", \"2060_2080\"]\n\n\n\nclimateModel &lt;- \"UKCP18-1km\"\nclimateScenList &lt;- list(\"RCP2.6\", \"RCP8.5\")\nclimateYearList &lt;- list(\"1980_2000\", \"2060_2080\")\n\n\n\nCompose the request body.\n\nPythonR\n\n\n\nreq_body = {\"lon\": lon, \"lat\": lat, \n            \"climateModel\": climateModel,\n            \"climateScenList\": climateScenList, \n            \"climateYearList\": climateYearList}\n\n\n\nreq_list &lt;- list(\"lon\" = lon, \"lat\" = lat, \n                 \"climateModel\" = climateModel,\n                 \"climateScenList\" = climateScenList, \n                 \"climateYearList\" = climateYearList)\n\nreq_body &lt;- jsonlite::toJSON(req_list, auto_unbox = TRUE)",
    "crumbs": [
      "ESC",
      "Using the ESCSiteData API"
    ]
  },
  {
    "objectID": "UsingESCSiteData.html#make-the-api-call",
    "href": "UsingESCSiteData.html#make-the-api-call",
    "title": "Using the ESCSiteData API",
    "section": "Make the API call",
    "text": "Make the API call\nCall the ESCSiteData API.\n\nPythonR\n\n\n\nESCSiteDataresponse = requests.post(url = base_url, json = req_body)\nESCSiteDataresponse.status_code == 200\n\nTrue\n\n\n\n\nESCSiteDataresponse &lt;- httr::POST(url = base_url, body = req_body)\nESCSiteDataresponse$status_code == 200\n\n\n\nEstablish a function to deserialize the json response into a nested dictionary or nested list.\n\nPythonR\n\n\n\ndef deserialize(responseJson:str) -&gt; dict:\n\n    responseDataFrame = pandas.DataFrame.from_dict(data = json.loads(responseJson))\n            \n    return responseDataFrame\n\n\n\ndeserialize &lt;- function(responseJson){\n\n    responseContent &lt;- httr::content(responseJson)\n    responsedf &lt;- jsonlite::fromJSON(responseContent)\n\n    return(responsedf)\n}\n\n\n\nCall the deserializeResults function on the ESC API output.\n\nPythonR\n\n\n\nESCSiteDataresponse_df = deserialize(responseJson = ESCSiteDataresponse.json())\n\n\n\nESCSiteDataresponse_df &lt;- deserialize(responseJson = ESCSiteDataresponse)",
    "crumbs": [
      "ESC",
      "Using the ESCSiteData API"
    ]
  },
  {
    "objectID": "UsingESCSiteData.html#explore-results",
    "href": "UsingESCSiteData.html#explore-results",
    "title": "Using the ESCSiteData API",
    "section": "Explore results",
    "text": "Explore results\nThe object produced (ESCSiteDataresponse_df) contains the environmental dose variables obtained from the modelled data for a given set of climate parameters. For more information on the underlying method see the Forest Research Bulletin 124 and the Forest Research Technical Paper 20. Column definitions:\n\nclimateScen - climate scenario.\nclimateYear - climate year.\nSMR - soil moisture regime.\nSNR - soil nutrient regime.\nAT - accumulated temperature.\nCT - continentality.\nDAMS - detailed aspect method of scoring.\nMD - moisture deficit.\n\n\nPythonR\n\n\n\nESCSiteDataresponse_df\n\n\n\n\n\n\n\n\nclimateScen\nclimateYear\nSMR\nSNR\nAT\nCT\nDAMS\nMD\n\n\n\n\n0\nRCP2.6\n1980_2000\n3\n5\n1694.748779\n10.868632\n12.258021\n178.133179\n\n\n1\nRCP2.6\n2060_2080\n3\n5\n2292.860352\n10.868632\n12.258021\n261.113190\n\n\n2\nRCP8.5\n1980_2000\n3\n5\n1694.748779\n10.868632\n12.258021\n178.133179\n\n\n3\nRCP8.5\n2060_2080\n3\n5\n2941.911377\n10.868632\n12.258021\n320.000000\n\n\n\n\n\n\n\n\n\nESCSiteDataresponse_df",
    "crumbs": [
      "ESC",
      "Using the ESCSiteData API"
    ]
  },
  {
    "objectID": "UsingESCTreeModel.html",
    "href": "UsingESCTreeModel.html",
    "title": "Using the ESCTreeModel API",
    "section": "",
    "text": "This notebook details how to call the ESCTreeModel API endpoint to retrieve tree species suitability metrics for a given location.",
    "crumbs": [
      "ESC",
      "Using the ESCTreeModel API"
    ]
  },
  {
    "objectID": "UsingESCTreeModel.html#import-required-packages",
    "href": "UsingESCTreeModel.html#import-required-packages",
    "title": "Using the ESCTreeModel API",
    "section": "Import required packages",
    "text": "Import required packages\n\nPythonR\n\n\n\nimport requests\nimport json\nimport pandas\nimport pprint\npandas.options.mode.chained_assignment = None\n\n\n\nlibrary(httr)\nlibrary(jsonlite)\nlibrary(dplyr)",
    "crumbs": [
      "ESC",
      "Using the ESCTreeModel API"
    ]
  },
  {
    "objectID": "UsingESCTreeModel.html#compose-api-request",
    "href": "UsingESCTreeModel.html#compose-api-request",
    "title": "Using the ESCTreeModel API",
    "section": "Compose API request",
    "text": "Compose API request\nEstablish API POST request URL\n\nPythonR\n\n\n\nbase_url = \"https://escapi.frdss.org.uk/ESCTreeModel/\"\n\n\n\nbase_url &lt;- \"https://escapi.frdss.org.uk/ESCTreeModel/\"\n\n\n\nSet the longitude (lon) and latitude (lat) in EPSG:3857.\n\nPythonR\n\n\n\nlon = -141102.7542\nlat = 6830259.9735\n\n\n\nlon &lt;- -141102.7542\nlat &lt;- 6830259.9735\n\n\n\nEstablish the site modifier options.\n\nawcAdj:bool\n\nTrue\nFalse\n\ndrainage:int\n\n0 = None.\n1 = Drainage installed.\n\nbrash:int\n\n0 = None (new planting).\n1 = Fresh brash (&lt;18 months).\n2 = Brash (&gt;18 months).\n\nfertiliser:int\n\n0 = None.\n1 = Fertiliser applied.\n\nexposure:int\n\n0 = None.\n1 = Exposed ridge/Coastal zone.\n2 = Local shelter/Less exposed/Underplanting.\n\n\n\nPythonR\n\n\n\nawcAdj = True\ndrainage = 0\nbrash = 0\nfertiliser = 0\nexposure = 0\n\n\n\nawcAdj &lt;- TRUE\ndrainage &lt;- 0\nbrash &lt;- 0\nfertiliser &lt;- 0\nexposure &lt;- 0\n\n\n\nEstablish the climate model (climateModel), climate scenario/s (climateScenList), climate years (climateYearList), and ESC version (escVersion).\n\nclimateModel:str\n\nA string, either “UKCP09” or “UKCP18-1km”\n\nclimateScenList:List\n\nFor “UKCP09” a list containing any of: [“A1b3q0”]\nFor “UKCP18-1km” a list containing any of: [“RCP2.6”, “RCP4.5”, “RCP6.0”, “RCP8.5”]\n\nclimateYearList:List\n\nFor “UKCP09” a list containing any of the following timeslices: [“1961_1990”, “2000_2020”, “2010_2030”, “2020_2040”, “2030_2050”, “2040_2060”, “2050_2070”, “2060_2080”, “2070_2090”]\nFor “UKCP18-1km” a list containing any of the following timeslices: [“1980_2000”, “1990_2010”, “2000_2020”, “2010_2030”, “2020_2040”, “2030_2050”, “2040_2060”, “2050_2070”, “2060_2080”]\n\nescVersion:str\n\nA string representing the version of the ESC species suitability function parameters to use. One of: “4.33”, “4.4”.\n\n\n\nPythonR\n\n\n\nclimateModel = \"UKCP18-1km\"\nclimateScenList = [\"RCP2.6\", \"RCP8.5\"]\nclimateYearList = [\"1980_2000\", \"2060_2080\"]\nescVersion = \"4.33\"\n\n\n\nclimateModel &lt;- \"UKCP18-1km\"\nclimateScenList &lt;- list(\"RCP2.6\", \"RCP8.5\")\nclimateYearList &lt;- list(\"1980_2000\", \"2060_2080\")\nescVersion &lt;- \"4.33\"\n\n\n\nEstablish the species filter parameters.\n\nfilter:int\n\nAn integer, one of: 0 (broadleaves and conifers), 1 (conifers only), or 2 (broadleaves only). 0 by default.\n\nfilterNative:str\n\nA string, one of: “Yes” (native species) or “No” (non-native species). None by default.\n\nfilterMainSpp:str\n\nA string, one of: “Yes” (main forestry species in the UK) or “No” (other forestry species in the UK). None by default.\n\nfilterWaneStatus:str\n\nA string, one of: “Exempt” (approved species for planting in Scotland), “Exempt mainland only” (approved species for planting in the mainland of Scotland only), or “Not exempt” (species not approved for planting in Scotland). None by default.\n\nfilterAF:str\n\nA string, one of: “Yes” (species used in agroforestry systems) or “No” (species not used in agroforestry systems). None by default.\n\n\n\nPythonR\n\n\n\nfilter = 0\nfilterNative = None\nfilterMainSpp = None\nfilterWaneStatus = \"Exempt\"\nfilterAF = None\n\n\n\nfilter &lt;- 0\nfilterNative &lt;- NA\nfilterMainSpp &lt;- NA\nfilterWaneStatus &lt;- \"Exempt\"\nfilterAF &lt;- NA\n\n\n\nEstablish the manual Soil Moisture Regime (SMR) and Soil Nutrient Regime (SNR) modifier values. Enter None, or omit from the request body (req_body) below if you do not wish to manually alter the values.\n\nsmr:float, any number between 0 and 8. Indicative categorical values are as follows:\n\n1 = Very Wet\n2 = Wet\n3 = Moist\n4 = Moist\n5 = Fresh\n6 = Slightly Dry\n7 = Moderately Dry\n8 = Very Dry\n\nsnr:float, any number between 0 and 6. Indicative categorical values are as follows:\n\n0 = Very Poor (VP1)\n0.5 = Very Poor (VP2)\n1 = Very Poor (VP3)\n1.5 = Very Poor - Poor\n2 = Poor\n3 = Medium\n4 = Rich\n5 = Very Rich\n6 = Carbonate\n\n\n\nPythonR\n\n\n\nsmr = None\nsnr = None\n\n\n\nsmr &lt;- NA\nsnr &lt;- NA\n\n\n\nCompose the request body. Optionally, you can accept the default values for all parameters apart from lon and lat by emitting the parameters from the request body (as shown in the commented out code below).\n\nPythonR\n\n\n\n# req_body = {\"lon\": lon, \"lat\": lat}\n\nreq_body = {\"lon\": lon, \"lat\": lat,\n            \"awcAdj\": awcAdj,\n            \"drainage\": drainage, \"brash\": brash, \"fertiliser\": fertiliser, \"exposure\": exposure, \n            \"climateModel\": climateModel,\n            \"climateScenList\": climateScenList, \"climateYearList\": climateYearList,\n            \"filter\": filter, \"filterNative\": filterNative,\n            \"filterMainSpp\": filterMainSpp, \"filterWaneStatus\": filterWaneStatus, \"filterAF\": filterAF,\n            \"escVersion\": escVersion,\n            \"smr\": smr, \"snr\": snr}\n\n\n\n# req_list = list(\"smr\" = smr, \"snr\" = snr)\n\nreq_list &lt;- list(\"lon\" = lon, \"lat\" = lat,\n                 \"awcAdj\" = awcAdj,\n                 \"drainage\" = drainage, \"brash\" = brash, \"fertiliser\" =  fertiliser, \"exposure\" = exposure, \n                 \"climateModel\" = climateModel,\n                 \"climateScenList\" = climateScenList, \"climateYearList\" = climateYearList,\n                 \"filter\" = filter, \"filterNative\" = filterNative,\n                 \"filterMainSpp\" = filterMainSpp, \"filterWaneStatus\" = filterWaneStatus, \"filterAF\" = filterAF,\n                 \"escVersion\" = escVersion,\n                 \"smr\" = smr, \"snr\" = snr)\n\nreq_body &lt;- jsonlite::toJSON(req_list, auto_unbox = TRUE)",
    "crumbs": [
      "ESC",
      "Using the ESCTreeModel API"
    ]
  },
  {
    "objectID": "UsingESCTreeModel.html#make-the-api-call",
    "href": "UsingESCTreeModel.html#make-the-api-call",
    "title": "Using the ESCTreeModel API",
    "section": "Make the API call",
    "text": "Make the API call\nCall the ESCTreeModel API\n\nPythonR\n\n\n\nESCTreeModelresponse = requests.post(url = base_url, json = req_body)\nESCTreeModelresponse.status_code == 200\n\nTrue\n\n\n\n\nESCTreeModelresponse &lt;- httr::POST(url = base_url, body = req_body)\nESCTreeModelresponse$status_code == 200\n\n\n\nEstablish a function to deserialize the json response into a nested dictionary or nested list.\n\nPythonR\n\n\n\ndef deserialize(responseJson:str) -&gt; dict:\n    \n    loadedJson = json.loads(responseJson)\n\n    for k,v in loadedJson.items():\n        for w,s in loadedJson[k].items():\n            for t,c in loadedJson[k][w].items():\n                loadedJson[k][w][t] = pandas.DataFrame.from_dict(data = json.loads(c))\n            \n    return loadedJson\n\n\n\ndeserialize &lt;- function(responseJson){\n\n    responseContent &lt;- httr::content(responseJson)\n    responseContent &lt;- jsonlite::fromJSON(responseContent)\n\n    for(i in names(responseContent)){\n        for(j in names(responseContent[[i]])){\n            for(k in names(responseContent[[i]][[j]])){\n                responseContent[[i]][[j]][[k]] = jsonlite::fromJSON(responseContent[[i]][[j]][[k]])\n            }\n        }\n    }\n    return(responseContent)\n}\n\n\n\nCall the deserializeResults function on the ESC API output.\n\nPythonR\n\n\n\nESCTreeModelresponse_dict = deserialize(responseJson = ESCTreeModelresponse.json())\n\n\n\nESCTreeModelresponse_list &lt;- deserialize(responseJson = ESCTreeModelresponse)",
    "crumbs": [
      "ESC",
      "Using the ESCTreeModel API"
    ]
  },
  {
    "objectID": "UsingESCTreeModel.html#explore-results",
    "href": "UsingESCTreeModel.html#explore-results",
    "title": "Using the ESCTreeModel API",
    "section": "Explore results",
    "text": "Explore results\nThe object produced (ESCTreeModelresponse_dict) is a nested dictionary with the following structure:\nESCresponse_dict (dict)\n├── Metadata (dict)\n│   ├── ESCMetadata (dict)\n│   │   ├── ESCTreeMetadata (DataFrame)\n│   ├── APIMetadata (dict)\n│   │   ├── DateTime (DataFrame)\n└───RCP2.6 (dict)\n│   ├── 1980_2000 (dict)\n│   │   ├── ESCDoseVals (DataFrame)\n│   │   ├── ESCResponseVals (DataFrame)\n│   │   ├── ESCSuitMetrics (DataFrame)\n│   ├── 2060_2080 (dict)\n│   │   ├── ESCDoseVals (DataFrame)\n│   │   ├── ESCResponseVals (DataFrame)\n│   │   ├── ESCSuitMetrics (DataFrame)\n└───RCP8.5 (dict)\n    ├── 1980_2000 (dict)\n    │   ├── ESCDoseVals (DataFrame)\n    │   ├── ESCResponseVals (DataFrame)\n    │   ├── ESCSuitMetrics (DataFrame)\n    ├── 2060_2080 (dict)\n    │   ├── ESCDoseVals (DataFrame)\n    │   ├── ESCResponseVals (DataFrame)\n    │   ├── ESCSuitMetrics (DataFrame)\n\n\nPythonR\n\n\n\npprint.pprint(ESCTreeModelresponse_dict, depth = 2)\n\n{'Metadata': {'APIMetadata': {...}, 'ESCMetadata': {...}},\n 'RCP2.6': {'1980_2000': {...}, '2060_2080': {...}},\n 'RCP8.5': {'1980_2000': {...}, '2060_2080': {...}}}\n\n\n\n\nstr(ESCTreeModelresponse_list, max.level = 3)\n\n\n\nAccess the ESC data frames from the API response for a given climate scenario using the following code.\nThe ESCDoseVals data frame contains the environmental dose variables obtained from the modelled data and/or manually entered, which are then modified by the aforementioned API query parameters drainage, brash, fertiliser, and exposure. For more information on the underlying method see the Forest Research Bulletin 124 and the Forest Research Technical Paper 20. Column definitions:\n\nSMR - soil moisture regime\nSNR - soil nutrient regime\nAT - accumulated temperature\nCT - continentality\nDAMS - direct aspect method of scoring\nMD - moisture deficit\nItem - The stage of modification of the environmental dose variable values.\n\n\nPythonR\n\n\n\nESCDoseVals = ESCTreeModelresponse_dict.get(\"RCP2.6\").get(\"1980_2000\").get(\"ESCDoseVals\")\nESCDoseVals\n\n\n\n\n\n\n\n\nSMR\nSNR\nAT\nCT\nDAMS\nMD\nItem\n\n\n\n\n0\n3.0\n5.0\n1694.748779\n10.868632\n12.258021\n178.133179\nValues - Base\n\n\n1\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nValues - Manual\n\n\n2\n3.0\n5.0\n1694.748779\n10.868632\n12.258021\n178.133179\nValues - PreMod\n\n\n3\n0.0\n0.0\n0.000000\n0.000000\n0.000000\n0.000000\nModifier - Drainage\n\n\n4\n0.0\n0.0\n0.000000\n0.000000\n0.000000\n0.000000\nModifier - Brash\n\n\n5\n0.0\n0.0\n0.000000\n0.000000\n0.000000\n0.000000\nModifier - Fertiliser\n\n\n6\n0.0\n0.0\n0.000000\n0.000000\n0.000000\n0.000000\nModifier - Exposure\n\n\n7\n3.0\n5.0\n1694.748779\n10.868632\n12.258021\n178.133179\nValues - preAWC\n\n\n8\n0.0\n0.0\n0.000000\n0.000000\n0.000000\n-46.000000\nModifier - AWC\n\n\n9\n3.0\n5.0\n1694.748779\n10.868632\n12.258021\n132.133179\nValues - Final\n\n\n\n\n\n\n\n\n\nESCDoseVals &lt;- ESCTreeModelresponse_list$`RCP2.6`$`1980_2000`$ESCDoseVals\nESCDoseVals\n\n\n\nThe ESCResponseVals data frame contains data on the response of each tree species to each environmental dose metric. Column definitions:\n\nspeciesCode - The Forest Research species code for the species.\nmetric - The environmental dose variable (see above).\nresponse - The response of the tree species to the environmental dose variable. A unitless value between 0 and 1.\n\n\nPythonR\n\n\n\nESCResponseVals = ESCTreeModelresponse_dict.get(\"RCP2.6\").get(\"1980_2000\").get(\"ESCResponseVals\")\nESCResponseVals.head()\n\n\n\n\n\n\n\n\nspeciesCode\nmetric\nresponse\n\n\n\n\n0\nAH\nAT\n1.000000\n\n\n1\nAH\nCT\n1.000000\n\n\n2\nAH\nDAMS\n0.964892\n\n\n3\nAH\nMD\n1.000000\n\n\n4\nAH\nSMR\n0.755714\n\n\n\n\n\n\n\n\n\nESCResponseVals &lt;- ESCTreeModelresponse_list$`RCP2.6`$`1980_2000`$ESCResponseVals\nESCResponseVals |&gt; head()\n\n\n\nThe ESCSuitMetrics data frame contains a range of summary data relating to the suitability of each tree species based on the ESCResponseVals data. Column definitions:\n\nspeciesCode - The Forest Research species code for the species.\nspeciesScientific - The scientific name of the species.\nspeciesName - The common name of the species.\nmaxYC - The maximum yield class of that species\nthreat - Any major threats to that tree species which should be taken into account when considering planting that species.\nlimFactorInclAT - The limiting factor (metric with the lowest response) including AT.\nlimFactorInclATResponse - The response value for limiting factor (metric with the lowest response) including AT.\nlimFactorExclAT - The limiting factor (metric with the lowest response) excluding AT.\nlimFactorExclATResponse - The response value for limiting factor (metric with the lowest response) excluding AT.\nTimberSuitability - The suitability of that tree species for planting as a timber crop.\nEcologicalSuitability - The suitability of that tree species for planting.\nestimatedYC - The estimated yield class.\n\n\nPythonR\n\n\n\nESCSuitMetrics = ESCTreeModelresponse_dict.get(\"RCP2.6\").get(\"1980_2000\").get(\"ESCSuitMetrics\")\nESCSuitMetrics.head()\n\n\n\n\n\n\n\n\nspeciesCode\nspeciesScientific\nspeciesName\nmaxYC\nthreat\nlimFactorInclAT\nlimFactorInclATResponse\nlimFactorExclAT\nlimFactorExclATResponse\nTimberSuitability\nEcologicalSuitability\nestimatedYC\n\n\n\n\n0\nAH\nFraxinus excelsior\nAsh\n12\nChalara\nSMR\n0.755714\nSMR\n0.755714\n0.755714\n0.755714\n9.068572\n\n\n1\nASP\nPopulus tremula\nAspen\n10\nNone\nSNR\n0.962698\nSNR\n0.962698\n0.962698\n0.962698\n9.626985\n\n\n2\nBE\nFagus sylvatica\nBeech\n10\nNone\nSMR\n0.305714\nSMR\n0.305714\n0.305714\n0.305714\n3.057143\n\n\n3\nBPO\nPopulus nigra\nBlack poplar\n16\nNone\nDAMS\n0.978258\nDAMS\n0.978258\n0.978258\n0.978258\n15.652131\n\n\n4\nCAR\nAlnus glutinosa\nCommon alder\n12\nNone\nDAMS\n0.854217\nDAMS\n0.854217\n0.854217\n0.854217\n10.250599\n\n\n\n\n\n\n\n\n\nESCSuitMetrics &lt;- ESCTreeModelresponse_list$`RCP2.6`$`1980_2000`$ESCSuitMetrics\nESCSuitMetrics |&gt; head()",
    "crumbs": [
      "ESC",
      "Using the ESCTreeModel API"
    ]
  },
  {
    "objectID": "UsingESCTreeResults.html",
    "href": "UsingESCTreeResults.html",
    "title": "Using the ESCTreeResults API",
    "section": "",
    "text": "This notebook details how to call the ESCTreeResults API endpoint to retrieve tree species suitability metrics for a given set of environmental dose variables.",
    "crumbs": [
      "ESC",
      "Using the ESCTreeResults API"
    ]
  },
  {
    "objectID": "UsingESCTreeResults.html#import-required-packages",
    "href": "UsingESCTreeResults.html#import-required-packages",
    "title": "Using the ESCTreeResults API",
    "section": "Import required packages",
    "text": "Import required packages\n\nPythonR\n\n\n\nimport requests\nimport json\nimport pandas\nimport pprint\npandas.options.mode.chained_assignment = None\n\n\n\nlibrary(httr)\nlibrary(jsonlite)\nlibrary(dplyr)",
    "crumbs": [
      "ESC",
      "Using the ESCTreeResults API"
    ]
  },
  {
    "objectID": "UsingESCTreeResults.html#compose-api-request",
    "href": "UsingESCTreeResults.html#compose-api-request",
    "title": "Using the ESCTreeResults API",
    "section": "Compose API request",
    "text": "Compose API request\nEstablish API POST request URL\n\nPythonR\n\n\n\nbase_url = \"https://escapi.frdss.org.uk/ESCTreeResults/\"\n\n\n\nbase_url &lt;- \"https://escapi.frdss.org.uk/ESCTreeResults/\"\n\n\n\nEstablish the Soil Moisture Regime (SMR) and Soil Nutrient Regime (SNR) manual modifier values, if required. Otherwise set to NA (R) or None (Python).\n\nsmr:float, any number between 0 and 8. Indicative categorical values are as follows:\n\n1 = Very Wet\n2 = Wet\n3 = Moist\n4 = Moist\n5 = Fresh\n6 = Slightly Dry\n7 = Moderately Dry\n8 = Very Dry\n\nsnr:float, any number between 0 and 6. Indicative categorical values are as follows:\n\n0 = Very Poor (VP1)\n0.5 = Very Poor (VP2)\n1 = Very Poor (VP3)\n1.5 = Very Poor - Poor\n2 = Poor\n3 = Medium\n4 = Rich\n5 = Very Rich\n6 = Carbonate\n\n\n\nPythonR\n\n\n\nsmr_modVal = None\nsnr_modVal = None\n\n\n\nsmr_modVal &lt;- NA\nsnr_modVal &lt;- NA\n\n\n\nEstablish the escSiteData dictionary. To do this, a dictionary containing the values can be composed manually be first establishing lists of values.\n\nPythonR\n\n\n\nclimateScen_vals = [\"RCP2.6\", \"RCP2.6\", \"RCP8.5\", \"RCP8.5\"]\nclimateYear_vals = [\"1980_2000\", \"2040_2060\", \"1980_2000\", \"2040_2060\"]\nsmr_vals = [5, 5, 5, 5]\nsnr_vals = [1, 1, 1, 1]\nat_vals = [1102.599, 1614.481, 1102.599, 1846.440]\nct_vals = [8.454323, 8.454323, 8.454323, 8.454323]\ndams_vals = [18.60297, 18.60297, 18.60297, 18.60297]\nmd_vals = [63.12716, 115.40047, 63.12716, 123.29279]\n\n\n\nclimateScen_vals &lt;- list(\"RCP2.6\", \"RCP2.6\", \"RCP8.5\", \"RCP8.5\")\nclimateYear_vals &lt;- list(\"1980_2000\", \"2040_2060\", \"1980_2000\", \"2040_2060\")\nsmr_vals &lt;- list(5, 5, 5, 5)\nsnr_vals &lt;- list(1, 1, 1, 1)\nat_vals &lt;- list(1102.599, 1614.481, 1102.599, 1846.440)\nct_vals &lt;- list(8.454323, 8.454323, 8.454323, 8.454323)\ndams_vals &lt;- list(18.60297, 18.60297, 18.60297, 18.60297)\nmd_vals &lt;- list(63.12716, 115.40047, 63.12716, 123.29279)\n\n\n\nThen form the escSiteData dictionary:\n\nPythonR\n\n\n\nescSiteData = {'climateScen': climateScen_vals, 'climateYear': climateYear_vals, \n               'SMR': smr_vals, 'SNR': snr_vals, 'AT': at_vals, \n               'CT': ct_vals, 'DAMS': dams_vals, 'MD': md_vals}\n\n\n\nescSiteData = list('climateScen' = climateScen_vals, 'climateYear' = climateYear_vals, \n                   'SMR' = smr_vals, 'SNR' = snr_vals, 'AT' = at_vals, \n                   'CT' = ct_vals, 'DAMS' = dams_vals, 'MD' = md_vals)\n\n\n\nAlternatively, the response from the ESCSiteData API can be passed to escSiteData.\nEstablish the site modifier options.\n\nawcAdj:bool\n\nTrue\nFalse\n\ndrainage:int\n\n0 = None.\n1 = Drainage installed.\n\nbrash:int\n\n0 = None (new planting).\n1 = Fresh brash (&lt;18 months).\n2 = Brash (&gt;18 months).\n\nfertiliser:int\n\n0 = None.\n1 = Fertiliser applied.\n\nexposure:int\n\n0 = None.\n1 = Exposed ridge/Coastal zone.\n2 = Local shelter/Less exposed/Underplanting.\n\n\n\nPythonR\n\n\n\nawcAdj = True\ndrainage = 0\nbrash = 0\nfertiliser = 0\nexposure = 0\n\n\n\nawcAdj &lt;- TRUE\ndrainage &lt;- 0\nbrash &lt;- 0\nfertiliser &lt;- 0\nexposure &lt;- 0\n\n\n\nEstablish the species filter parameters.\n\nfilter:int\n\nAn integer, one of: 0 (broadleaves and conifers), 1 (conifers only), or 2 (broadleaves only). 0 by default.\n\nfilterNative:str\n\nA string, one of: “Yes” (native species) or “No” (non-native species). None by default.\n\nfilterMainSpp:str\n\nA string, one of: “Yes” (main forestry species in the UK) or “No” (other forestry species in the UK). None by default.\n\nfilterWaneStatus:str\n\nA string, one of: “Exempt” (approved species for planting in Scotland), “Exempt mainland only” (approved species for planting in the mainland of Scotland only), or “Not exempt” (species not approved for planting in Scotland). None by default.\n\nfilterAF:str\n\nA string, one of: “Yes” (species used in agroforestry systems) or “No” (species not used in agroforestry systems). None by default.\n\n\n\nPythonR\n\n\n\nfilter = 0\nfilterNative = None\nfilterMainSpp = None\nfilterWaneStatus = \"Exempt\"\nfilterAF = None\n\n\n\nfilter &lt;- 0\nfilterNative &lt;- NA\nfilterMainSpp &lt;- NA\nfilterWaneStatus &lt;- \"Exempt\"\nfilterAF &lt;- NA\n\n\n\nEstablish the ESC version.\n\nescVersion:str\n\nA string representing the version of the ESC species suitability function parameters to use. One of: “4.33”, “4.4”.\n\n\n\nPythonR\n\n\n\nescVersion = \"4.33\"\n\n\n\nescVersion &lt;- \"4.33\"\n\n\n\nCompose the request body.\n\nPythonR\n\n\n\nreq_body = {\"smr\": smr_modVal, \"snr\": snr_modVal,\n            \"escSiteData\": escSiteData,\n            \"awcAdj\": awcAdj,\n            \"drainage\": drainage, \"brash\": brash, \n            \"fertiliser\": fertiliser, \"exposure\": exposure,\n            \"filter\": filter, \"filterNative\": filterNative,\n            \"filterMainSpp\": filterMainSpp, \"filterWaneStatus\": filterWaneStatus, \"filterAF\": filterAF,\n            \"escVersion\": escVersion}\n\n\n\nreq_list &lt;- list(\"smr\" = smr_modVal, \"snr\" = snr_modVal,\n                 \"escSiteData\" = escSiteData,\n                 \"awcAdj\" = awcAdj,\n                 \"drainage\" = drainage, \"brash\" = brash, \n                 \"fertiliser\" =  fertiliser, \"exposure\" = exposure, \n                 \"filter\" = filter, \"filterNative\" = filterNative,\n                 \"filterMainSpp\" = filterMainSpp, \"filterWaneStatus\" = filterWaneStatus, \"filterAF\" = filterAF,\n                 \"escVersion\" = escVersion)\n\nreq_body &lt;- jsonlite::toJSON(req_list, auto_unbox = TRUE)",
    "crumbs": [
      "ESC",
      "Using the ESCTreeResults API"
    ]
  },
  {
    "objectID": "UsingESCTreeResults.html#make-the-api-call",
    "href": "UsingESCTreeResults.html#make-the-api-call",
    "title": "Using the ESCTreeResults API",
    "section": "Make the API call",
    "text": "Make the API call\nCall the ESCTreeResults API\n\nPythonR\n\n\n\nESCTreeResultsresponse = requests.post(url = base_url, json = req_body)\nESCTreeResultsresponse.status_code == 200\n\nTrue\n\n\n\n\nESCTreeResultsresponse &lt;- httr::POST(url = base_url, body = req_body)\nESCTreeResultsresponse$status_code == 200\n\n\n\nEstablish a function to deserialize the json response into a nested dictionary or nested list.\n\nPythonR\n\n\n\ndef deserialize(responseJson:str) -&gt; dict:\n    \n    loadedJson = json.loads(responseJson)\n\n    for k,v in loadedJson.items():\n        for w,s in loadedJson[k].items():\n            for t,c in loadedJson[k][w].items():\n                loadedJson[k][w][t] = pandas.DataFrame.from_dict(data = json.loads(c))\n            \n    return loadedJson\n\n\n\ndeserialize &lt;- function(responseJson){\n\n    responseContent &lt;- httr::content(responseJson)\n    responseContent &lt;- jsonlite::fromJSON(responseContent)\n\n    for(i in names(responseContent)){\n        for(j in names(responseContent[[i]])){\n            for(k in names(responseContent[[i]][[j]])){\n                responseContent[[i]][[j]][[k]] = jsonlite::fromJSON(responseContent[[i]][[j]][[k]])\n            }\n        }\n    }\n    return(responseContent)\n}\n\n\n\nCall the deserializeResults function on the ESC API output.\n\nPythonR\n\n\n\nESCTreeResultsresponse_dict = deserialize(responseJson = ESCTreeResultsresponse.json())\n\n\n\nESCTreeResultsresponse_list &lt;- deserialize(responseJson = ESCTreeResultsresponse)",
    "crumbs": [
      "ESC",
      "Using the ESCTreeResults API"
    ]
  },
  {
    "objectID": "UsingESCTreeResults.html#explore-results",
    "href": "UsingESCTreeResults.html#explore-results",
    "title": "Using the ESCTreeResults API",
    "section": "Explore results",
    "text": "Explore results\nThe object produced (ESCTreeResultsresponse_dict or ESCTreeResultsresponse_list) is a nested dictionary with the following structure:\nESCresponse_dict (dict)\n├── Metadata (dict)\n│   ├── ESCMetadata (dict)\n│   │   ├── ESCTreeMetadata (DataFrame)\n│   ├── APIMetadata (dict)\n│   │   ├── DateTime (DataFrame)\n└───RCP2.6 (dict)\n│   ├── 1980_2000 (dict)\n│   │   ├── ESCDoseVals (DataFrame)\n│   │   ├── ESCResponseVals (DataFrame)\n│   │   ├── ESCSuitMetrics (DataFrame)\n│   ├── 2060_2080 (dict)\n│   │   ├── ESCDoseVals (DataFrame)\n│   │   ├── ESCResponseVals (DataFrame)\n│   │   ├── ESCSuitMetrics (DataFrame)\n└───RCP8.5 (dict)\n    ├── 1980_2000 (dict)\n    │   ├── ESCDoseVals (DataFrame)\n    │   ├── ESCResponseVals (DataFrame)\n    │   ├── ESCSuitMetrics (DataFrame)\n    ├── 2060_2080 (dict)\n    │   ├── ESCDoseVals (DataFrame)\n    │   ├── ESCResponseVals (DataFrame)\n    │   ├── ESCSuitMetrics (DataFrame)\n\nPythonR\n\n\n\npprint.pprint(ESCTreeResultsresponse_dict, depth = 2)\n\n{'Metadata': {'APIMetadata': {...}, 'ESCMetadata': {...}},\n 'RCP2.6': {'1980_2000': {...}, '2040_2060': {...}},\n 'RCP8.5': {'1980_2000': {...}, '2040_2060': {...}}}\n\n\n\n\nstr(ESCTreeResultsresponse_list, max.level = 3)\n\n\n\nAccess the ESC data frames from the API response using the following code.\nThe ESCDoseVals data frame contains the environmental dose variables obtained from the modelled data and/or manually entered, which are then modified by the aforementioned API query parameters drainage, brash, fertiliser, and exposure. For more information on the underlying method see the Forest Research Bulletin 124 and the Forest Research Technical Paper 20. Column definitions:\n\nSMR - soil moisture regime\nSNR - soil nutrient regime\nAT - accumulated temperature\nCT - continentality\nDAMS - direct aspect method of scoring\nMD - moisture deficit\nItem - The stage of modification of the environmental dose variable values.\n\n\nPythonR\n\n\n\nESCDoseVals = ESCTreeResultsresponse_dict.get(\"RCP2.6\").get(\"1980_2000\").get(\"ESCDoseVals\")\nESCDoseVals\n\n\n\n\n\n\n\n\nSMR\nSNR\nAT\nCT\nDAMS\nMD\nItem\n\n\n\n\n0\n5.0\n1.0\n1102.599\n8.454323\n18.60297\n63.12716\nValues - Base\n\n\n1\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nValues - Manual\n\n\n2\n5.0\n1.0\n1102.599\n8.454323\n18.60297\n63.12716\nValues - PreMod\n\n\n3\n0.0\n0.0\n0.000\n0.000000\n0.00000\n0.00000\nModifier - Drainage\n\n\n4\n0.0\n0.0\n0.000\n0.000000\n0.00000\n0.00000\nModifier - Brash\n\n\n5\n0.0\n0.0\n0.000\n0.000000\n0.00000\n0.00000\nModifier - Fertiliser\n\n\n6\n0.0\n0.0\n0.000\n0.000000\n0.00000\n0.00000\nModifier - Exposure\n\n\n7\n5.0\n1.0\n1102.599\n8.454323\n18.60297\n63.12716\nValues - preAWC\n\n\n8\n0.0\n0.0\n0.000\n0.000000\n0.00000\n0.00000\nModifier - AWC\n\n\n9\n5.0\n1.0\n1102.599\n8.454323\n18.60297\n63.12716\nValues - Final\n\n\n\n\n\n\n\n\n\nESCDoseVals &lt;- ESCTreeResultsresponse_list$`RCP2.6`$`1980_2000`$ESCDoseVals\nESCDoseVals\n\n\n\nThe ESCResponseVals data frame contains data on the response of each tree species to each environmental dose metric. Column definitions:\n\nspeciesCode - The Forest Research species code for the species.\nmetric - The environmental dose variable (see above).\nresponse - The response of the tree species to the environmental dose variable. A unitless value between 0 and 1.\n\n\nPythonR\n\n\n\nESCResponseVals = ESCTreeResultsresponse_dict.get(\"RCP2.6\").get(\"1980_2000\").get(\"ESCResponseVals\")\nESCResponseVals.head()\n\n\n\n\n\n\n\n\nspeciesCode\nmetric\nresponse\n\n\n\n\n0\nAH\nAT\n0.849505\n\n\n1\nAH\nCT\n1.000000\n\n\n2\nAH\nDAMS\n0.000000\n\n\n3\nAH\nMD\n0.995068\n\n\n4\nAH\nSMR\n1.000000\n\n\n\n\n\n\n\n\n\nESCResponseVals &lt;- ESCTreeResultsresponse_list$`RCP2.6`$`1980_2000`$ESCResponseVals\nESCResponseVals |&gt; head()\n\n\n\nThe ESCSuitMetrics data frame contains a range of summary data relating to the suitability of each tree species based on the ESCResponseVals data. Column definitions:\n\nspeciesCode - The Forest Research species code for the species.\nspeciesScientific - The scientific name of the species.\nspeciesName - The common name of the species.\nmaxYC - The maximum yield class of that species\nthreat - Any major threats to that tree species which should be taken into account when considering planting that species.\nlimFactorInclAT - The limiting factor (metric with the lowest response) including AT.\nlimFactorInclATResponse - The response value for limiting factor (metric with the lowest response) including AT.\nlimFactorExclAT - The limiting factor (metric with the lowest response) excluding AT.\nlimFactorExclATResponse - The response value for limiting factor (metric with the lowest response) excluding AT.\nTimberSuitability - The suitability of that tree species for planting as a timber crop.\nEcologicalSuitability - The suitability of that tree species for planting.\nestimatedYC - The estimated yield class.\n\n\nPythonR\n\n\n\nESCSuitMetrics = ESCTreeResultsresponse_dict.get(\"RCP2.6\").get(\"1980_2000\").get(\"ESCSuitMetrics\")\nESCSuitMetrics.head()\n\n\n\n\n\n\n\n\nspeciesCode\nspeciesScientific\nspeciesName\nmaxYC\nthreat\nlimFactorInclAT\nlimFactorInclATResponse\nlimFactorExclAT\nlimFactorExclATResponse\nTimberSuitability\nEcologicalSuitability\nestimatedYC\n\n\n\n\n0\nAH\nFraxinus excelsior\nAsh\n12\nChalara\nDAMS\n0.000000\nDAMS\n0.000000\n0.000000\n0.000000\n0.000000\n\n\n1\nASP\nPopulus tremula\nAspen\n10\nNone\nSNR\n0.032540\nSNR\n0.032540\n0.031791\n0.032540\n0.317909\n\n\n2\nBE\nFagus sylvatica\nBeech\n10\nNone\nDAMS\n0.180795\nDAMS\n0.180795\n0.161895\n0.180795\n1.618949\n\n\n3\nBPO\nPopulus nigra\nBlack poplar\n16\nNone\nSNR\n0.000000\nSNR\n0.000000\n0.000000\n0.000000\n0.000000\n\n\n4\nCAR\nAlnus glutinosa\nCommon alder\n12\nNone\nSNR\n0.276190\nSNR\n0.276190\n0.222304\n0.276190\n2.667647\n\n\n\n\n\n\n\n\n\nESCSuitMetrics &lt;- ESCTreeResultsresponse_list$`RCP2.6`$`1980_2000`$ESCSuitMetrics\nESCSuitMetrics |&gt; head()",
    "crumbs": [
      "ESC",
      "Using the ESCTreeResults API"
    ]
  },
  {
    "objectID": "UsingESCWCC.html",
    "href": "UsingESCWCC.html",
    "title": "Using the ESCWCC API",
    "section": "",
    "text": "This notebook details how to call the ESCWCC API endpoint to obtain a set of Woodland Carbon Code (WCC) lookup tables for ESC-predicted yield classes using R and Python."
  },
  {
    "objectID": "UsingESCWCC.html#import-required-packages",
    "href": "UsingESCWCC.html#import-required-packages",
    "title": "Using the ESCWCC API",
    "section": "Import required packages",
    "text": "Import required packages\n\nPythonR\n\n\n\nimport requests\nimport json\nimport pandas\nimport pprint\npandas.options.mode.chained_assignment = None\n\n\n\nlibrary(httr)\nlibrary(jsonlite)\nlibrary(dplyr)"
  },
  {
    "objectID": "UsingESCWCC.html#compose-api-request",
    "href": "UsingESCWCC.html#compose-api-request",
    "title": "Using the ESCWCC API",
    "section": "Compose API request",
    "text": "Compose API request\nEstablish API POST request URL\n\nPythonR\n\n\n\nbase_url = \"https://escapi.frdss.org.uk/ESCWCC/\"\n\n\n\nbase_url &lt;- \"https://escapi.frdss.org.uk/ESCWCC/\"\n\n\n\nSet the longitude (lon) and latitude (lat) in EPSG:3857.\n\nPythonR\n\n\n\nlon = -141102.7542\nlat = 6830259.9735\n\n\n\nlon &lt;- -141102.7542\nlat &lt;- 6830259.9735\n\n\n\nEstablish the site modifier options.\n\nawcAdj:bool\n\nTrue\nFalse\n\ndrainage:int\n\n0 = None.\n1 = Drainage installed.\n\nbrash:int\n\n0 = None (new planting).\n1 = Fresh brash (&lt;18 months).\n2 = Brash (&gt;18 months).\n\nfertiliser:int\n\n0 = None.\n1 = Fertiliser applied.\n\nexposure:int\n\n0 = None.\n1 = Exposed ridge/Coastal zone.\n2 = Local shelter/Less exposed/Underplanting.\n\n\n\nPythonR\n\n\n\nawcAdj = True\ndrainage = 0\nbrash = 0\nfertiliser = 0\nexposure = 0\n\n\n\nawcAdj &lt;- TRUE\ndrainage &lt;- 0\nbrash &lt;- 0\nfertiliser &lt;- 0\nexposure &lt;- 0\n\n\n\nEstablish the climate model (climateModel), climate scenario/s (climateScenList), climate years (climateYearList), species group filter (filter), and ESC version (escVersion).\n\nclimateModel:str\n\nA string, either “UKCP09” or “UKCP18-1km”\n\nclimateScenList:List\n\nFor “UKCP09” a list containing any of: [“A1b3q0”]\nFor “UKCP18-1km” a list containing any of: [“RCP2.6”, “RCP4.5”, “RCP6.0”, “RCP8.5”]\n\nclimateYearList:List\n\nFor “UKCP09” a list containing any of the following timeslices: [“1961_1990”, “2000_2020”, “2010_2030”, “2020_2040”, “2030_2050”, “2040_2060”, “2050_2070”, “2060_2080”, “2070_2090”]\nFor “UKCP18-1km” a list containing any of the following timeslices: [“1980_2000”, “1990_2010”, “2000_2020”, “2010_2030”, “2020_2040”, “2030_2050”, “2040_2060”, “2050_2070”, “2060_2080”]\n\nescVersion:str\n\nA string representing the version of the ESC species suitability function parameters to use. One of: “4.33”, “4.4”.\n\n\n\nPythonR\n\n\n\nclimateModel = \"UKCP18-1km\"\nclimateScenList = [\"RCP2.6\", \"RCP8.5\"]\nclimateYearList = [\"1980_2000\", \"2060_2080\"]\nescVersion = \"4.33\"\n\n\n\nclimateModel &lt;- \"UKCP18-1km\"\nclimateScenList &lt;- list(\"RCP2.6\", \"RCP8.5\")\nclimateYearList &lt;- list(\"1980_2000\", \"2060_2080\")\nescVersion &lt;- \"4.33\"\n\n\n\nEstablish the species filter parameters.\n\nfilter:int\n\nAn integer, one of: 0 (broadleaves and conifers), 1 (conifers only), or 2 (broadleaves only). 0 by default.\n\nfilterNative:str\n\nA string, one of: “Yes” (native species) or “No” (non-native species). None by default.\n\nfilterMainSpp:str\n\nA string, one of: “Yes” (main forestry species in the UK) or “No” (other forestry species in the UK). None by default.\n\nfilterWaneStatus:str\n\nA string, one of: “Exempt” (approved species for planting in Scotland), “Exempt mainland only” (approved species for planting in the mainland of Scotland only), or “Not exempt” (species not approved for planting in Scotland). None by default.\n\nfilterAF:str\n\nA string, one of: “Yes” (species used in agroforestry systems) or “No” (species not used in agroforestry systems). None by default.\n\n\n\nPythonR\n\n\n\nfilter = 0\nfilterNative = None\nfilterMainSpp = None\nfilterWaneStatus = \"Exempt\"\nfilterAF = None\n\n\n\nfilter &lt;- 0\nfilterNative &lt;- NA\nfilterMainSpp &lt;- NA\nfilterWaneStatus &lt;- \"Exempt\"\nfilterAF &lt;- NA\n\n\n\nEstablish the Woodland Carbon Code (WCC) version (wccVersion), area of the site to be established/planted with seedlings (wccSeedlingArea) in hectares (ha), the area to which ground preparation (requiring fuel) is applied (wccGroundPrepFuelArea), the area for which tree shelters will be required (wccTreeSheltersArea), the area to be fenced (wccFencingArea), the area that herbicide will be applied (wccHerbicideArea), the length of roads to be constructed (wccRoadLength) in km, and the area, if any, of arable land with mineral soil to be planted (wccSoilArea) in ha.\n\nwccVersion:str\n\n“2.4” = “2.4”, (March 2021)\n\nwccSeedlingArea:float\n\n0 by default, any positive number.\n\nwccGroundPrepFuelArea:float\n\n0 by default, any positive number.\n\nwccTreeSheltersArea:float\n\n0 by default, any positive number.\n\nwccFencingArea:float\n\n0 by default, any positive number.\n\nwccHerbicideArea:float\n\n0 by default, any positive number.\n\nwccRoadLength:float\n\n0 by default, any positive number.\n\nwccSoilArea:float\n\n0 by default, any positive number.\n\n\n\nPythonR\n\n\n\nwccVersion = \"2.4\"\nwccSeedlingArea = 12\nwccGroundPrepFuelArea = 24\nwccTreeSheltersArea = 12\nwccFencingArea = 6\nwccHerbicideArea = 6\nwccRoadLength = 1\nwccSoilArea = 2\n\n\n\nwccVersion &lt;- \"2.4\"\nwccSeedlingArea &lt;- 12\nwccGroundPrepFuelArea &lt;- 24\nwccTreeSheltersArea &lt;- 12\nwccFencingArea &lt;- 6\nwccHerbicideArea &lt;- 6\nwccRoadLength &lt;- 1\nwccSoilArea &lt;- 2\n\n\n\nEstablish the manual Soil Moisture Regime (SMR) and Soil Nutrient Regime (SNR) modifier values. Enter None, or omit from the request body (req_body) below if you do not wish to manually alter the values.\n\nsmr:float, any number between 0 and 8. Indicative categorical values are as follows:\n\n1 = Very Wet\n2 = Wet\n3 = Moist\n4 = Moist\n5 = Fresh\n6 = Slightly Dry\n7 = Moderately Dry\n8 = Very Dry\n\nsnr:float, any number between 0 and 6. Indicative categorical values are as follows:\n\n0 = Very Poor (VP1)\n0.5 = Very Poor (VP2)\n1 = Very Poor (VP3)\n1.5 = Very Poor - Poor\n2 = Poor\n3 = Medium\n4 = Rich\n5 = Very Rich\n6 = Carbonate\n\n\n\nPythonR\n\n\n\nsmr = None\nsnr = None\n\n\n\nsmr &lt;- NA\nsnr &lt;- NA\n\n\n\nCompose the request body. Optionally, you can accept the default values for all parameters apart from lon and lat by emitting the parameters from the request body (as shown in the commented out code below).\n\nPythonR\n\n\n\n# req_body = {\"lon\": lon, \"lat\": lat}\n\nreq_body = {\"lon\": lon, \"lat\": lat,\n            \"awcAdj\": awcAdj,\n            \"drainage\": drainage, \"brash\": brash, \"fertiliser\": fertiliser, \"exposure\": exposure, \n            \"climateModel\": climateModel,\n            \"climateScenList\": climateScenList, \"climateYearList\": climateYearList,\n            \"filter\": filter, \"filterNative\": filterNative,\n            \"filterMainSpp\": filterMainSpp, \"filterWaneStatus\": filterWaneStatus, \"filterAF\": filterAF,\n            \"escVersion\": escVersion, \"wccVersion\": wccVersion, \n            \"smr\": smr, \"snr\": snr,\n            \"wccSeedlingArea\": wccSeedlingArea,\n            \"wccGroundPrepFuelArea\": wccGroundPrepFuelArea,\n            \"wccTreeSheltersArea\": wccTreeSheltersArea,\n            \"wccFencingArea\": wccFencingArea,\n            \"wccHerbicideArea\": wccHerbicideArea,\n            \"wccRoadLength\": wccRoadLength, \"wccSoilArea\": wccSoilArea}\n\n\n\n# req_list = list(\"smr\" = smr, \"snr\" = snr)\n\nreq_list &lt;- list(\"lon\" = lon, \"lat\" = lat, \n                 \"awcAdj\" = awcAdj,\n                 \"drainage\" = drainage, \"brash\" = brash, \"fertiliser\" =  fertiliser, \"exposure\" = exposure,\n                 \"climateModel\" = climateModel,\n                 \"climateScenList\" = climateScenList, \"climateYearList\" = climateYearList,\n                 \"filter\" = filter, \"filterNative\" = filterNative,\n                 \"filterMainSpp\" = filterMainSpp, \"filterWaneStatus\" = filterWaneStatus, \"filterAF\" = filterAF,\n                 \"escVersion\" = escVersion, \"wccVersion\" = wccVersion, \n                 \"smr\" = smr, \"snr\" = snr,\n                 \"wccSeedlingArea\" = wccSeedlingArea,\n                 \"wccGroundPrepFuelArea\" = wccGroundPrepFuelArea,\n                 \"wccTreeSheltersArea\" = wccTreeSheltersArea,\n                 \"wccFencingArea\" = wccFencingArea,\n                 \"wccHerbicideArea\" = wccHerbicideArea,\n                 \"wccRoadLength\" = wccRoadLength, \"wccSoilArea\" = wccSoilArea)\n\nreq_body &lt;- jsonlite::toJSON(req_list, auto_unbox = TRUE)"
  },
  {
    "objectID": "UsingESCWCC.html#make-the-api-call",
    "href": "UsingESCWCC.html#make-the-api-call",
    "title": "Using the ESCWCC API",
    "section": "Make the API call",
    "text": "Make the API call\nCall the ESCWCC API.\n\nPythonR\n\n\n\nESCWCCresponse = requests.post(url = base_url, json = req_body)\nESCWCCresponse.status_code == 200\n\nTrue\n\n\n\n\nESCWCCresponse &lt;- httr::POST(url = base_url, body = req_body)\nESCWCCresponse$status_code == 200\n\n\n\nEstablish a function to deserialize the json response into a nested dictionary or nested list.\n\nPythonR\n\n\n\ndef deserialize(responseJson:str) -&gt; dict:\n    \n    loadedJson = json.loads(responseJson)\n\n    for k,v in loadedJson.items():\n        for w,s in loadedJson[k].items():\n            for t,c in loadedJson[k][w].items():\n                loadedJson[k][w][t] = pandas.DataFrame.from_dict(data = json.loads(c))\n            \n    return loadedJson\n\n\n\ndeserialize &lt;- function(responseJson){\n\n    responseContent &lt;- httr::content(responseJson)\n    responseContent &lt;- jsonlite::fromJSON(responseContent)\n\n    for(i in names(responseContent)){\n        for(j in names(responseContent[[i]])){\n            for(k in names(responseContent[[i]][[j]])){\n                responseContent[[i]][[j]][[k]] = jsonlite::fromJSON(responseContent[[i]][[j]][[k]])\n            }\n        }\n    }\n    return(responseContent)\n}\n\n\n\nCall the deserializeResults function on the ESC API output.\n\nPythonR\n\n\n\nESCWCCresponse_dict = deserialize(responseJson = ESCWCCresponse.json())\n\n\n\nESCWCCresponse_list &lt;- deserialize(responseJson = ESCWCCresponse)"
  },
  {
    "objectID": "UsingESCWCC.html#explore-results",
    "href": "UsingESCWCC.html#explore-results",
    "title": "Using the ESCWCC API",
    "section": "Explore results",
    "text": "Explore results\nThe object produced (ESCWCCresponse_dict or ESCWCCResponse_list) is a nested dictionary with the following structure:\nESCresponse_dict (dict or list)\n├── Metadata (dict or list)\n│   ├── ESCMetadata (dict or list)\n│   │   ├── ESCTreeMetadata (DataFrame)\n│   ├── WCCMetadata (dict or list)\n│   │   ├── WCCMetadata (DataFrame)\n│   ├── APIMetadata (dict or list)\n│   │   ├── DateTime (DataFrame)\n└───RCP2.6 (dict)\n│   ├── 1980_2000 (dict)\n│   │   ├── ESCDoseVals (DataFrame)\n│   │   ├── ESCResponseVals (DataFrame)\n│   │   ├── ESCSuitMetrics (DataFrame)\n│   │   ├── WCCTreeValues (DataFrame)\n│   │   ├── WCCSoilLoss (DataFrame)\n│   │   ├── WCCSoilSeq (DataFrame)\n│   │   ├── WCCEstablishment (DataFrame)\n│   ├── 2060_2080 (dict)\n│   │   ├── ESCDoseVals (DataFrame)\n│   │   ├── ESCResponseVals (DataFrame)\n│   │   ├── ESCSuitMetrics (DataFrame)\n│   │   ├── WCCTreeValues (DataFrame)\n│   │   ├── WCCSoilLoss (DataFrame)\n│   │   ├── WCCSoilSeq (DataFrame)\n│   │   ├── WCCEstablishment (DataFrame)\n└───RCP8.5 (dict)\n    ├── 1980_2000 (dict)\n    │   ├── ESCDoseVals (DataFrame)\n    │   ├── ESCResponseVals (DataFrame)\n    │   ├── ESCSuitMetrics (DataFrame)\n    │   ├── WCCTreeValues (DataFrame)\n    │   ├── WCCSoilLoss (DataFrame)\n    │   ├── WCCSoilSeq (DataFrame)\n    │   ├── WCCEstablishment (DataFrame)\n    ├── 2060_2080 (dict)\n    │   ├── ESCDoseVals (DataFrame)\n    │   ├── ESCResponseVals (DataFrame)\n    │   ├── ESCSuitMetrics (DataFrame)\n    │   ├── WCCTreeValues (DataFrame)\n    │   ├── WCCSoilLoss (DataFrame)\n    │   ├── WCCSoilSeq (DataFrame)\n    │   ├── WCCEstablishment (DataFrame)\n\nPythonR\n\n\n\npprint.pprint(ESCWCCresponse_dict, depth = 2)\n\n{'Metadata': {'APIMetadata': {...}, 'ESCMetadata': {...}, 'WCCMetadata': {...}},\n 'RCP2.6': {'1980_2000': {...}, '2060_2080': {...}},\n 'RCP8.5': {'1980_2000': {...}, '2060_2080': {...}}}\n\n\n\n\nstr(ESCWCCresponse_list, max.level = 3)\n\n\n\nAccess the ESC & WCC data frames from the API response for a given climate scenario using the following code.\nThe ESCDoseVals data frame contains the environmental dose variables obtained from the modelled data and/or manually entered, which are then modified by the aforementioned API query parameters drainage, brash, fertiliser, and exposure. For more information on the underlying method see the Forest Research Bulletin 124 and the Forest Research Technical Paper 20. Column definitions:\n\nSMR - soil moisture regime\nSNR - soil nutrient regime\nAT - accumulated temperature\nCT - continentality\nDAMS - direct aspect method of scoring\nMD - moisture deficit\nItem - The stage of modification of the environmental dose variable values.\n\n\nPythonR\n\n\n\nESCDoseVals = ESCWCCresponse_dict.get(\"RCP2.6\").get(\"1980_2000\").get(\"ESCDoseVals\")\nESCDoseVals\n\n\n\n\n\n\n\n\nSMR\nSNR\nAT\nCT\nDAMS\nMD\nItem\n\n\n\n\n0\n3.0\n5.0\n1694.748779\n10.868632\n12.258021\n178.133179\nValues - Base\n\n\n1\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nValues - Manual\n\n\n2\n3.0\n5.0\n1694.748779\n10.868632\n12.258021\n178.133179\nValues - PreMod\n\n\n3\n0.0\n0.0\n0.000000\n0.000000\n0.000000\n0.000000\nModifier - Drainage\n\n\n4\n0.0\n0.0\n0.000000\n0.000000\n0.000000\n0.000000\nModifier - Brash\n\n\n5\n0.0\n0.0\n0.000000\n0.000000\n0.000000\n0.000000\nModifier - Fertiliser\n\n\n6\n0.0\n0.0\n0.000000\n0.000000\n0.000000\n0.000000\nModifier - Exposure\n\n\n7\n3.0\n5.0\n1694.748779\n10.868632\n12.258021\n178.133179\nValues - preAWC\n\n\n8\n0.0\n0.0\n0.000000\n0.000000\n0.000000\n-46.000000\nModifier - AWC\n\n\n9\n3.0\n5.0\n1694.748779\n10.868632\n12.258021\n132.133179\nValues - Final\n\n\n\n\n\n\n\n\n\nESCDoseVals = ESCWCCresponse_list$`RCP2.6`$`1980_2000`$ESCDoseVals\nESCDoseVals\n\n\n\nThe ESCResponseVals data frame contains data on the response of each tree species to each environmental dose metric. Column definitions:\n\nspeciesCode - The Forest Research species code for the species.\nmetric - The environmental dose variable (see above).\nresponse - The response of the tree species to the environmental dose variable. A unitless value between 0 and 1.\n\n\nPythonR\n\n\n\nESCResponseVals = ESCWCCresponse_dict.get(\"RCP2.6\").get(\"1980_2000\").get(\"ESCResponseVals\")\nESCResponseVals.head()\n\n\n\n\n\n\n\n\nspeciesCode\nmetric\nresponse\n\n\n\n\n0\nAH\nAT\n1.000000\n\n\n1\nAH\nCT\n1.000000\n\n\n2\nAH\nDAMS\n0.964892\n\n\n3\nAH\nMD\n1.000000\n\n\n4\nAH\nSMR\n0.755714\n\n\n\n\n\n\n\n\n\nESCResponseVals = ESCWCCresponse_list$`RCP2.6`$`1980_2000`$ESCResponseVals\nESCResponseVals |&gt; head()\n\n\n\nThe ESCSuitMetrics data frame contains a range of summary data relating to the suitability of each tree species based on the ESCResponseVals data. Column definitions:\n\nspeciesCode - The Forest Research species code for the species.\nspeciesScientific - The scientific name of the species.\nspeciesName - The common name of the species.\nmaxYC - The maximum yield class of that species\nthreat - Any major threats to that tree species which should be taken into account when considering planting that species.\nlimFactorInclAT - The limiting factor (metric with the lowest response) including AT.\nlimFactorInclATResponse - The response value for limiting factor (metric with the lowest response) including AT.\nlimFactorExclAT - The limiting factor (metric with the lowest response) excluding AT.\nlimFactorExclATResponse - The response value for limiting factor (metric with the lowest response) excluding AT.\nTimberSuitability - The suitability of that tree species for planting as a timber crop.\nEcologicalSuitability - The suitability of that tree species for planting.\nestimatedYC - The estimated yield class.\n\n\nPythonR\n\n\n\nESCSuitMetrics = ESCWCCresponse_dict.get(\"RCP2.6\").get(\"1980_2000\").get(\"ESCSuitMetrics\")\nESCSuitMetrics.head()\n\n\n\n\n\n\n\n\nspeciesCode\nspeciesScientific\nspeciesName\nmaxYC\nthreat\nlimFactorInclAT\nlimFactorInclATResponse\nlimFactorExclAT\nlimFactorExclATResponse\nTimberSuitability\nEcologicalSuitability\nestimatedYC\n\n\n\n\n0\nAH\nFraxinus excelsior\nAsh\n12\nChalara\nSMR\n0.755714\nSMR\n0.755714\n0.755714\n0.755714\n9.068572\n\n\n1\nASP\nPopulus tremula\nAspen\n10\nNone\nSNR\n0.962698\nSNR\n0.962698\n0.962698\n0.962698\n9.626985\n\n\n2\nBE\nFagus sylvatica\nBeech\n10\nNone\nSMR\n0.305714\nSMR\n0.305714\n0.305714\n0.305714\n3.057143\n\n\n3\nBPO\nPopulus nigra\nBlack poplar\n16\nNone\nDAMS\n0.978258\nDAMS\n0.978258\n0.978258\n0.978258\n15.652131\n\n\n4\nCAR\nAlnus glutinosa\nCommon alder\n12\nNone\nDAMS\n0.854217\nDAMS\n0.854217\n0.854217\n0.854217\n10.250599\n\n\n\n\n\n\n\n\n\nESCSuitMetrics = ESCWCCresponse_list$`RCP2.6`$`1980_2000`$ESCSuitMetrics\nESCSuitMetrics |&gt; head()\n\n\n\nThe WCCTreeValues data frame contains data from the woodland carbon code biomass carbon lookup tables (BCLT) and clearfell max sequence values for the yield class nearest to the ESC estimated yield class. Column definitions:\n\nspeciesCode - The Forest Research species code for the species.\nwccCode - The WCC species code mapped to the ESC species, from which the WCC data is retrieved.\nspeciesScientific - The scientific name of the species.\nspeciesName - The common name of the species.\nestimatedYC - The estimated yield class.\nroundedYC - The nearest even yield class\nminWCCYC - The lowest yield class with corresponding values for the wccCode biomass carbon lookup tables (BCLT) data\nmaxWCCYC - The highest yield class with corresponding values for the wccCode biomass carbon lookup tables (BCLT) data\nfinalYC - The yield class used to retrieve the BCLT data. If the roundedYC is less than the minWCCYC this is set to the minWCCYC. If the roundedYC is greater than the maxWCCYC this is set to the maxWCCYC, else the roundedYC value is used.\nspacing - The planting spacing. Retrieved from column C in the BCLT tables.\nmanagement - The management regime for the planted area, thinned or un-thinned. Retrieved from column E in the BCLT tables.\nperiod - The period of years associated with the wcc data. Retrieved from column F in the BCLT tables.\nstandingCarbonYr - The carbon contained within the above-ground biomass of the trees planted on site. Retrieved from column G in the BCLT tables. Units of tCO2e/ha/yr.\ndebrisCarbonYr - The carbon contained within the debris on site. Retrieved from column H in the BCLT tables. Units of tCO2e/ha/yr.\ntotalCarbonYr - The total carbon contained on site, equal to the sum of standingCarbonYr and debrisCarbonYr. Retrieved from column I in the BCLT tables. Units of tCO2e/ha/yr.\ncumCarbon5Yr - The cumulative carbon sequestered on site over the period stipulated in the period column. Retrieved from column J in the BCLT tables. Units of tCO2e/ha/period.\ncumBiomassCarbon - The cumulative carbon sequestered on site over up until the period stipulated in the period column. Retrieved from column K in the BCLT tables. Units of tCO2e/ha.\ncumEmissionsMgmt - The cumulative emissions from ongiong management on site. Retrieved from column L in the BCLT tables. Units of tCO2e/ha.\ncumTotalCarbon - The total cumulative emissions on site. Retrieved from column M in the BCLT tables. Units of tCO2e/ha.\nremCarbonYr - The quantity of carbon removed from the site yearly. Retrieved from column N in the BCLT tables. Units of tCO2e/ha/yr.\nperiodEnd - The rotation length stipulated in columns F to AK of the “Clearfell_Max_Seq_Values” sheet of the excel tool. Mapped to the last year of the period present in the period column.\nclearfellCapCarbon - The Clearfell Cap Value associated with the periodEnd, wccCode, spacing, YC, and management. Units of tCO2e.\n\n\n\n\n\n\n\nWarning\n\n\n\nThe finalYC may differ considerably from the ESC estimatedYC due to the limited number of species - YC combinations for which data is available from the WCC BCLT tables. It is left to the API user to determine whether the use of the BCLT values returned for a given finalYC are appropriate.\n\n\n\nPythonR\n\n\n\nWCCTreeValues = ESCWCCresponse_dict.get(\"RCP2.6\").get(\"1980_2000\").get(\"WCCTreeValues\")\nWCCTreeValues.head()\n\n\n\n\n\n\n\n\nspeciesCode\nwccCode\nspeciesScientific\nspeciesName\nestimatedYC\nroundedYC\nminWCCYC\nmaxWCCYC\nfinalYC\nspacing\n...\nstandingCarbonYr\ndebrisCarbonYr\ntotalCarbonYr\ncumCarbon5Yr\ncumBiomassCarbon\ncumEmissionsMgmt\ncumTotalCarbon\nremCarbonYr\nperiodEnd\nclearfellCapCarbon\n\n\n\n\n0\nAH\nSAB\nFraxinus excelsior\nAsh\n9.068572\n10.0\n2.0\n12.0\n10.0\n1.5\n...\n4.07\n0.52\n4.59\n23.0\n23.0\n0.0\n23.0\n0.0\n5.0\n6.5\n\n\n1\nAH\nSAB\nFraxinus excelsior\nAsh\n9.068572\n10.0\n2.0\n12.0\n10.0\n1.5\n...\n12.42\n0.65\n13.06\n65.3\n88.3\n0.0\n88.3\n0.0\n10.0\n13.0\n\n\n2\nAH\nSAB\nFraxinus excelsior\nAsh\n9.068572\n10.0\n2.0\n12.0\n10.0\n1.5\n...\n29.50\n1.34\n30.84\n154.2\n242.5\n0.0\n242.5\n0.0\n15.0\n64.0\n\n\n3\nAH\nSAB\nFraxinus excelsior\nAsh\n9.068572\n10.0\n2.0\n12.0\n10.0\n1.5\n...\n26.84\n0.82\n27.66\n138.3\n380.8\n0.0\n380.8\n0.0\n20.0\n115.0\n\n\n4\nAH\nSAB\nFraxinus excelsior\nAsh\n9.068572\n10.0\n2.0\n12.0\n10.0\n1.5\n...\n19.91\n3.53\n23.44\n117.2\n498.0\n0.0\n498.0\n0.0\n25.0\n175.0\n\n\n\n\n5 rows × 22 columns\n\n\n\n\n\nWCCTreeValues = ESCWCCresponse_list$`RCP2.6`$`1980_2000`$WCCTreeValues\nWCCTreeValues |&gt; head()\n\n\n\nThe WCCEstablishment data frame contains the establishment emission values calculated using the same methodology as in the “StandardProjectCarbonCalculator” sheet of the excel tool. Column definitions:\n\nseedlingSpacing - The spacing between each sapling in meters.\nsize - The size metric (length or area) associated with the variable\nsizeUnit - The units (km or ha) associated with the size metric.\nemissionsPerSize - The emissions in tCO2e per size unit.\ntotalEmissions - The carbon emissions associated with that seedlingSpacing and variable. Units of tCO2e.\nvariable - The establishment emission source, one of:\n\nseedling\ngroundPrepFuel\ntreeShelters\nfencing\nherbicide\n\n\n\nPythonR\n\n\n\nWCCEstablishment = ESCWCCresponse_dict.get(\"RCP2.6\").get(\"1980_2000\").get(\"WCCEstablishment\")\nWCCEstablishment.head()\n\n\n\n\n\n\n\n\nseedlingSpacing\nsize\nsizeUnit\nemissionsPerSize\ntotalEmissions\nvariable\n\n\n\n\n0\n1.2\n1.0\nkm\n-43.12\n-43.12\nroad\n\n\n1\n1.4\n1.0\nkm\n-43.12\n-43.12\nroad\n\n\n2\n1.5\n1.0\nkm\n-43.12\n-43.12\nroad\n\n\n3\n1.7\n1.0\nkm\n-43.12\n-43.12\nroad\n\n\n4\n2.0\n1.0\nkm\n-43.12\n-43.12\nroad\n\n\n\n\n\n\n\n\n\nWCCEstablishment = ESCWCCresponse_list$`RCP2.6`$`1980_2000`$WCCEstablishment\nWCCEstablishment |&gt; head()\n\n\n\nThe WCCSoilLoss data frame contains data on the soil carbon emissions during the year of establishment (Year 1) for each country, percentage topsoil carbon to be subtracted and previous land use. Column definitions:\n\nCountry - The country in which the site is located.\ntopsoilCarbonSubtract - the percentage of topsoil carbon to subtract .\nSeminatural - the soil carbon emissions associated with the previous land-use “Semi-natural”, units in tCO2e/ha.\nPasture - the soil carbon emissions associated with the previous land-use “Pasture, units in tCO2e/ha.\nArable - the soil carbon emissions associated with the previous land-use “Arable”, units in tCO2e/ha.\n\n\nPythonR\n\n\n\nWCCSoilLoss = ESCWCCresponse_dict.get(\"RCP2.6\").get(\"1980_2000\").get(\"WCCSoilLoss\")\nWCCSoilLoss.head()\n\n\n\n\n\n\n\n\nCountry\ntopsoilCarbonSubtract\nSeminatural\nPasture\nArable\n\n\n\n\n0\nEngland\n0\n0.0\n0.000000\n0.000000\n\n\n1\nScotland\n0\n0.0\n0.000000\n0.000000\n\n\n2\nWales\n0\n0.0\n0.000000\n0.000000\n\n\n3\nNorthern Ireland\n0\n0.0\n0.000000\n0.000000\n\n\n4\nEngland\n2\n-8.8\n-5.866667\n-5.133333\n\n\n\n\n\n\n\n\n\nWCCSoilLoss = ESCWCCresponse_list$`RCP2.6`$`1980_2000`$WCCSoilLoss\nWCCSoilLoss |&gt; head()\n\n\n\nThe WCCSoilSeq data frame contains data on the cumulative soil carbon sequestration for mineral soils which where the former land use was arable agriculture. Column definitions:\n\nperiod - The period of years associated with the wcc data. Retrieved from column Y in the “StandardProjectCarbonCalculator” sheet of the excel tool.\ncumSoilSeq - Calculated by multiplying column AY in the “StandardProjectCarbonCalculator” by the site area. Units in tCO2e.\n\n\nPythonR\n\n\n\nWCCSoilSeq = ESCWCCresponse_dict.get(\"RCP2.6\").get(\"1980_2000\").get(\"WCCSoilSeq\")\nWCCSoilSeq.head()\n\n\n\n\n\n\n\n\nperiod\ncumSoilSeq\n\n\n\n\n0\n0-5\n5.5\n\n\n1\n5-10\n11.0\n\n\n2\n10-15\n16.5\n\n\n3\n15-20\n22.0\n\n\n4\n20-25\n27.5\n\n\n\n\n\n\n\n\n\nWCCSoilSeq = ESCWCCresponse_list$`RCP2.6`$`1980_2000`$WCCSoilSeq\nWCCSoilSeq |&gt; head()"
  },
  {
    "objectID": "UsingESCWCC.html#calculate-claimable-carbon-sequestration",
    "href": "UsingESCWCC.html#calculate-claimable-carbon-sequestration",
    "title": "Using the ESCWCC API",
    "section": "Calculate Claimable Carbon Sequestration",
    "text": "Calculate Claimable Carbon Sequestration\nTo calculate the average total claimable sequestration by year in tCO2e/ha perform the following calculations using the API outputs.\nColumns suffixed with (&lt;[A-Z]&gt;) correspond to the columns CB to CM of Version 2.4 (March 2021) of the WCC excel tool.\nFirst, retrieve the WCC Biomass Carbon Lookup Table (BCLT) and Clearfell Max Seq Values (CMSV) values for selected species, e.g. the major tree species present in the National Vegetation Classification (NVC) W14 “Beech-oak woodland with bramble”: Beech (BE), Holly (HOL), and Pedunculate oak (POK).\n\nPythonR\n\n\n\nWCCTreeValues_selSpp = WCCTreeValues[WCCTreeValues[\"speciesCode\"].isin([\"BE\", \"HOL\", \"POK\"])]\nWCCTreeValues_selSpp.head()\n\n\n\n\n\n\n\n\nspeciesCode\nwccCode\nspeciesScientific\nspeciesName\nestimatedYC\nroundedYC\nminWCCYC\nmaxWCCYC\nfinalYC\nspacing\n...\nstandingCarbonYr\ndebrisCarbonYr\ntotalCarbonYr\ncumCarbon5Yr\ncumBiomassCarbon\ncumEmissionsMgmt\ncumTotalCarbon\nremCarbonYr\nperiodEnd\nclearfellCapCarbon\n\n\n\n\n1200\nHOL\nSAB\nIlex aquifolium\nHolly\n1.981833\n2.0\n2.0\n12.0\n2.0\n1.5\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n2.7\nNaN\nNaN\nNaN\n\n\n1201\nHOL\nSAB\nIlex aquifolium\nHolly\n1.981833\n2.0\n2.0\n12.0\n2.0\n1.5\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n9.6\nNaN\nNaN\nNaN\n\n\n1202\nHOL\nSAB\nIlex aquifolium\nHolly\n1.981833\n2.0\n2.0\n12.0\n2.0\n1.5\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n28.9\nNaN\nNaN\nNaN\n\n\n1203\nHOL\nSAB\nIlex aquifolium\nHolly\n1.981833\n2.0\n2.0\n12.0\n2.0\n1.5\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n76.4\nNaN\nNaN\nNaN\n\n\n1204\nHOL\nSAB\nIlex aquifolium\nHolly\n1.981833\n2.0\n2.0\n12.0\n2.0\n1.5\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n120.6\nNaN\nNaN\nNaN\n\n\n\n\n5 rows × 22 columns\n\n\n\n\n\nWCCTreeValues_selSpp &lt;- WCCTreeValues |&gt;\n    dplyr::filter(speciesCode %in% c(\"BE\", \"HOL\", \"POK\"))\nWCCTreeValues_selSpp |&gt; head()\n\n\n\n\n\n\n\n\n\nWarning\n\n\n\nData in WCCTreeValues varies by spacing and management for each wccCode and therefore speciesCode. It is advised that the user checks what spacing and management values are available for the selected species.\n\n\n\nPythonR\n\n\n\nWCCTreeValues_selSpp[[\"speciesCode\", \"spacing\", \"management\"]].drop_duplicates().reset_index()\n\n\n\n\n\n\n\n\nindex\nspeciesCode\nspacing\nmanagement\n\n\n\n\n0\n1200\nHOL\n1.5\nNO_thin\n\n\n1\n1240\nHOL\n1.5\nThinned\n\n\n2\n1280\nHOL\n2.5\nNO_thin\n\n\n3\n1320\nHOL\n2.5\nThinned\n\n\n4\n1360\nHOL\n3.0\nNO_thin\n\n\n5\n1400\nHOL\n3.0\nThinned\n\n\n6\n4080\nBE\n1.2\nNO_thin\n\n\n7\n4120\nBE\n1.2\nThinned\n\n\n8\n4160\nBE\n2.5\nNO_thin\n\n\n9\n4200\nBE\n2.5\nThinned\n\n\n10\n4240\nBE\n3.0\nNO_thin\n\n\n11\n4280\nBE\n3.0\nThinned\n\n\n12\n6880\nPOK\n1.2\nNO_thin\n\n\n13\n6920\nPOK\n1.2\nThinned\n\n\n14\n6960\nPOK\n2.5\nNO_thin\n\n\n15\n7000\nPOK\n2.5\nThinned\n\n\n16\n7040\nPOK\n3.0\nNO_thin\n\n\n17\n7080\nPOK\n3.0\nThinned\n\n\n\n\n\n\n\n\n\nWCCTreeValues_selSpp |&gt;\n    dplyr::select(speciesCode, spacing, management) |&gt;\n    unique()\n\n\n\nSelect the BCLT and CMSV values for a particular spacing and management regime, e.g. 3m and Thinned, checking that data is available for each as above.\n\nPythonR\n\n\n\nWCCTreeValues_selSpp_3_Thinned = WCCTreeValues_selSpp[(WCCTreeValues_selSpp.spacing == 3) & (WCCTreeValues_selSpp.management == \"Thinned\")]\nWCCTreeValues_selSpp_3_Thinned.head()\n\n\n\n\n\n\n\n\nspeciesCode\nwccCode\nspeciesScientific\nspeciesName\nestimatedYC\nroundedYC\nminWCCYC\nmaxWCCYC\nfinalYC\nspacing\n...\nstandingCarbonYr\ndebrisCarbonYr\ntotalCarbonYr\ncumCarbon5Yr\ncumBiomassCarbon\ncumEmissionsMgmt\ncumTotalCarbon\nremCarbonYr\nperiodEnd\nclearfellCapCarbon\n\n\n\n\n1400\nHOL\nSAB\nIlex aquifolium\nHolly\n1.981833\n2.0\n2.0\n12.0\n2.0\n3.0\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n1.1\nNaN\nNaN\nNaN\n\n\n1401\nHOL\nSAB\nIlex aquifolium\nHolly\n1.981833\n2.0\n2.0\n12.0\n2.0\n3.0\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n5.3\nNaN\nNaN\nNaN\n\n\n1402\nHOL\nSAB\nIlex aquifolium\nHolly\n1.981833\n2.0\n2.0\n12.0\n2.0\n3.0\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n20.2\nNaN\nNaN\nNaN\n\n\n1403\nHOL\nSAB\nIlex aquifolium\nHolly\n1.981833\n2.0\n2.0\n12.0\n2.0\n3.0\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n60.0\nNaN\nNaN\nNaN\n\n\n1404\nHOL\nSAB\nIlex aquifolium\nHolly\n1.981833\n2.0\n2.0\n12.0\n2.0\n3.0\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n91.1\nNaN\nNaN\nNaN\n\n\n\n\n5 rows × 22 columns\n\n\n\n\n\nWCCTreeValues_selSpp_3_Thinned &lt;- WCCTreeValues_selSpp |&gt;\n    dplyr::filter(spacing == 3,\n                  management == \"Thinned\")\nWCCTreeValues_selSpp_3_Thinned |&gt; head()\n\n\n\nDefine a species composition for the site.\n\nPythonR\n\n\n\nspecies_composition = pandas.DataFrame.from_dict(data = {\"speciesCode\": [\"BE\", \"HOL\", \"POK\"], \"proportion\": [0.4, 0.2, 0.4]})\nspecies_composition\n\n\n\n\n\n\n\n\nspeciesCode\nproportion\n\n\n\n\n0\nBE\n0.4\n\n\n1\nHOL\n0.2\n\n\n2\nPOK\n0.4\n\n\n\n\n\n\n\n\n\nspecies_composition &lt;- data.frame(\"speciesCode\" = c(\"BE\", \"HOL\", \"POK\"), \"proportion\" = c(0.4, 0.2, 0.4))\nspecies_composition\n\n\n\nForm a new data frame, select the relevant columns, and merge the species composition data frame.\n\nPythonR\n\n\n\ndf = WCCTreeValues_selSpp_3_Thinned\ndf = df[[\"speciesCode\", \"period\", \"cumTotalCarbon\"]]\ndf = df.merge(species_composition, on = [\"speciesCode\"])\ndf.head()\n\n\n\n\n\n\n\n\nspeciesCode\nperiod\ncumTotalCarbon\nproportion\n\n\n\n\n0\nHOL\n0-5\n1.1\n0.2\n\n\n1\nHOL\n5-10\n5.3\n0.2\n\n\n2\nHOL\n10-15\n20.2\n0.2\n\n\n3\nHOL\n15-20\n60.0\n0.2\n\n\n4\nHOL\n20-25\n91.1\n0.2\n\n\n\n\n\n\n\n\n\ndf &lt;- WCCTreeValues_selSpp_3_Thinned\ndf &lt;- df |&gt;\n    dplyr::select(speciesCode, period, cumTotalCarbon) |&gt;\n    dplyr::left_join(species_composition, by = \"speciesCode\")\ndf |&gt; head()\n\n\n\nMultiply the ’Cumulative total sequestration” data (cumTotalCarbon) by the species proportion (proportion) and area planting with seedlings/saplings (wccSeedlingArea).\n\nPythonR\n\n\n\ndf[\"cumTotalCarbonSite (A)\"] = df[\"cumTotalCarbon\"] * df[\"proportion\"] * wccSeedlingArea\ndf.head()\n\n\n\n\n\n\n\n\nspeciesCode\nperiod\ncumTotalCarbon\nproportion\ncumTotalCarbonSite (A)\n\n\n\n\n0\nHOL\n0-5\n1.1\n0.2\n2.64\n\n\n1\nHOL\n5-10\n5.3\n0.2\n12.72\n\n\n2\nHOL\n10-15\n20.2\n0.2\n48.48\n\n\n3\nHOL\n15-20\n60.0\n0.2\n144.00\n\n\n4\nHOL\n20-25\n91.1\n0.2\n218.64\n\n\n\n\n\n\n\n\n\ndf &lt;- df |&gt;\n    dplyr::mutate(\"cumTotalCarbonSite (A)\" = cumTotalCarbon * proportion * wccSeedlingArea)\ndf |&gt; head()\n\n\n\nSum across all species.\n\nPythonR\n\n\n\ndf = df.drop(columns = [\"speciesCode\", \"cumTotalCarbon\", \"proportion\"])\ndf = df.groupby(\"period\").sum().reset_index()\ndf.head()\n\n\n\n\n\n\n\n\nperiod\ncumTotalCarbonSite (A)\n\n\n\n\n0\n0-5\n24.72\n\n\n1\n5-10\n130.80\n\n\n2\n10-15\n522.24\n\n\n3\n15-20\n1452.00\n\n\n4\n20-25\n2017.68\n\n\n\n\n\n\n\n\n\ndf &lt;- df |&gt;\n    dplyr::select(-speciesCode, -cumTotalCarbon, -proportion) |&gt;\n    dplyr::group_by(period) |&gt;\n    dplyr::summarise(`cumTotalCarbonSite (A)` = sum(`cumTotalCarbonSite (A)`))\ndf |&gt; head()\n\n\n\nAdd a 20% buffer by multiplying the Cumulative total sequestration for the site by 0.8\n\nPythonR\n\n\n\ndf[\"cumTotalCarbonSiteReduced (B)\"] = df[\"cumTotalCarbonSite (A)\"] * 0.8\ndf.head()\n\n\n\n\n\n\n\n\nperiod\ncumTotalCarbonSite (A)\ncumTotalCarbonSiteReduced (B)\n\n\n\n\n0\n0-5\n24.72\n19.776\n\n\n1\n5-10\n130.80\n104.640\n\n\n2\n10-15\n522.24\n417.792\n\n\n3\n15-20\n1452.00\n1161.600\n\n\n4\n20-25\n2017.68\n1614.144\n\n\n\n\n\n\n\n\n\ndf &lt;- df |&gt;\n    dplyr::mutate(\"cumTotalCarbonSiteReduced (B)\" = `cumTotalCarbonSite (A)` * 0.8)\ndf |&gt; head()\n\n\n\nRetrieve the total establishment emissions for the selected spacing and add to the dataframe.\n\nPythonR\n\n\n\ntotalEstablishmentC = WCCEstablishment[(WCCEstablishment.seedlingSpacing == 1.5)]\ntotalEstablishmentC = totalEstablishmentC[\"totalEmissions\"].sum()\ndf[\"establishmentCarbonLoss (C)\"] = totalEstablishmentC\ndf.head()\n\n\n\n\n\n\n\n\nperiod\ncumTotalCarbonSite (A)\ncumTotalCarbonSiteReduced (B)\nestablishmentCarbonLoss (C)\n\n\n\n\n0\n0-5\n24.72\n19.776\n-72.286\n\n\n1\n5-10\n130.80\n104.640\n-72.286\n\n\n2\n10-15\n522.24\n417.792\n-72.286\n\n\n3\n15-20\n1452.00\n1161.600\n-72.286\n\n\n4\n20-25\n2017.68\n1614.144\n-72.286\n\n\n\n\n\n\n\n\n\ntotalEstablishmentC &lt;- WCCEstablishment |&gt;\n    dplyr::filter(seedlingSpacing == 1.5) |&gt;\n    dplyr::summarise(sum(totalEmissions)) |&gt;\n    as.double()\n\ndf &lt;- df |&gt;\n    dplyr::mutate(\"establishmentCarbonLoss (C)\" = totalEstablishmentC)\n\ndf |&gt; head()\n\n\n\nCalculate soil carbon flux by summing soil loss and soil sequestration data . To do this first identify the % topsoil carbon (0-30cm) loss associated with the method of site preparation and soil type.\n\nPythonR\n\n\n\nestablishmentMethods = pandas.DataFrame.from_dict(data = {\"MethodSitePrep\": [\"Negligible Disturbance\", \"Low Disturbance\", \"Medium Disturbance\", \"High Disturbance\", \"Very High Disturbance\"],\n                                                          \"Organomineral\": [0, 5, 10, 20, 40],\n                                                          \"Mineral\": [0, 0, 2, 5, 10]})\n\nestablishmentMethods = establishmentMethods.set_index(\"MethodSitePrep\")\npercSoilLoss = establishmentMethods._get_value(\"Medium Disturbance\", \"Mineral\")\n\npercSoilLoss\n\n2\n\n\n\n\nestablishmentMethods &lt;- data.frame(\"MethodSitePrep\" = c(\"Negligible Disturbance\", \"Low Disturbance\", \"Medium Disturbance\", \"High Disturbance\", \"Very High Disturbance\"),\n                                   \"Organomineral\" = c(0, 5, 10, 20, 40),\n                                   \"Mineral\" = c(0, 0, 2, 5, 10))\n\npercSoilLoss &lt;- establishmentMethods |&gt;\n    dplyr::filter(MethodSitePrep == \"Medium Disturbance\") |&gt;\n    dplyr::pull(Mineral)\n\npercSoilLoss\n\n\n\nRetrieve the soil carbon lost for the selected country, previous land use, and % topsoil carbon (0-30cm) loss identified above.\n\nPythonR\n\n\n\nsoilCLoss = WCCSoilLoss[WCCSoilLoss[\"topsoilCarbonSubtract\"] == percSoilLoss]\nsoilCLoss = soilCLoss.set_index(\"Country\")\nsoilCLoss = soilCLoss._get_value(\"England\", \"Arable\")\n\nsoilCLoss\n\n-5.133333333\n\n\n\n\nsoilCLoss &lt;- WCCSoilLoss |&gt;\n    dplyr::filter(topsoilCarbonSubtract == percSoilLoss,\n                  Country == \"England\") |&gt;\n    dplyr::pull(Arable)\n\nsoilCLoss\n\n\n\nCalculate the total net soil carbon flux.\n\nPythonR\n\n\n\nsoilCFlux = WCCSoilSeq\nsoilCFlux[\"cumSoilLoss\"] = soilCLoss\nsoilCFlux[\"cumSoilCarbonFlux (D)\"] = soilCFlux[\"cumSoilLoss\"] + soilCFlux[\"cumSoilSeq\"]\nsoilCFlux = soilCFlux.drop(columns = [\"cumSoilSeq\", \"cumSoilLoss\"])\n\nsoilCFlux.head()\n\n\n\n\n\n\n\n\nperiod\ncumSoilCarbonFlux (D)\n\n\n\n\n0\n0-5\n0.366667\n\n\n1\n5-10\n5.866667\n\n\n2\n10-15\n11.366667\n\n\n3\n15-20\n16.866667\n\n\n4\n20-25\n22.366667\n\n\n\n\n\n\n\n\n\nsoilCFlux &lt;- WCCSoilSeq |&gt;\n    dplyr::mutate(\"cumSoilLoss\" = soilCLoss,\n                  \"cumSoilCarbonFlux (D)\" = cumSoilLoss + cumSoilSeq) |&gt;\n    dplyr::select(-cumSoilSeq, -cumSoilLoss)\n\nsoilCFlux |&gt; head()\n\n\n\nMerge soil carbon flux.\n\nPythonR\n\n\n\ndf = df.merge(soilCFlux, on = [\"period\"])\n\ndf.head()\n\n\n\n\n\n\n\n\nperiod\ncumTotalCarbonSite (A)\ncumTotalCarbonSiteReduced (B)\nestablishmentCarbonLoss (C)\ncumSoilCarbonFlux (D)\n\n\n\n\n0\n0-5\n24.72\n19.776\n-72.286\n0.366667\n\n\n1\n5-10\n130.80\n104.640\n-72.286\n5.866667\n\n\n2\n10-15\n522.24\n417.792\n-72.286\n11.366667\n\n\n3\n15-20\n1452.00\n1161.600\n-72.286\n16.866667\n\n\n4\n20-25\n2017.68\n1614.144\n-72.286\n22.366667\n\n\n\n\n\n\n\n\n\ndf &lt;- df |&gt;\n    dplyr::left_join(soilCFlux, by = \"period\")\n\ndf |&gt; head()\n\n\n\nCalculate the total cumulative carbon sequestration.\n\nPythonR\n\n\n\ndf[\"totalProjectCarbonSeq (E)\"] = df[\"cumTotalCarbonSiteReduced (B)\"] + df[\"establishmentCarbonLoss (C)\"] + df[\"cumSoilCarbonFlux (D)\"]\n\ndf.head()\n\n\n\n\n\n\n\n\nperiod\ncumTotalCarbonSite (A)\ncumTotalCarbonSiteReduced (B)\nestablishmentCarbonLoss (C)\ncumSoilCarbonFlux (D)\ntotalProjectCarbonSeq (E)\n\n\n\n\n0\n0-5\n24.72\n19.776\n-72.286\n0.366667\n-52.143333\n\n\n1\n5-10\n130.80\n104.640\n-72.286\n5.866667\n38.220667\n\n\n2\n10-15\n522.24\n417.792\n-72.286\n11.366667\n356.872667\n\n\n3\n15-20\n1452.00\n1161.600\n-72.286\n16.866667\n1106.180667\n\n\n4\n20-25\n2017.68\n1614.144\n-72.286\n22.366667\n1564.224667\n\n\n\n\n\n\n\n\n\ndf &lt;- df |&gt;\n    dplyr::mutate(\"totalProjectCarbonSeq (E)\" = `cumTotalCarbonSiteReduced (B)` + `establishmentCarbonLoss (C)` + `cumSoilCarbonFlux (D)`)\n\ndf |&gt; head()\n\n\n\nOptionally, add Baseline and Leakage data then calculate the adjusted, net total project carbon sequestration.\n\nPythonR\n\n\n\ndf[\"Baseline (F)\"] = 0\ndf[\"Leakage (G)\"] = 0\ndf[\"netTotalProjectCarbonSeq (H)\"] = df[\"totalProjectCarbonSeq (E)\"]+ df[\"Baseline (F)\"] + df[\"Leakage (G)\"]\n\ndf.head()\n\n\n\n\n\n\n\n\nperiod\ncumTotalCarbonSite (A)\ncumTotalCarbonSiteReduced (B)\nestablishmentCarbonLoss (C)\ncumSoilCarbonFlux (D)\ntotalProjectCarbonSeq (E)\nBaseline (F)\nLeakage (G)\nnetTotalProjectCarbonSeq (H)\n\n\n\n\n0\n0-5\n24.72\n19.776\n-72.286\n0.366667\n-52.143333\n0\n0\n-52.143333\n\n\n1\n5-10\n130.80\n104.640\n-72.286\n5.866667\n38.220667\n0\n0\n38.220667\n\n\n2\n10-15\n522.24\n417.792\n-72.286\n11.366667\n356.872667\n0\n0\n356.872667\n\n\n3\n15-20\n1452.00\n1161.600\n-72.286\n16.866667\n1106.180667\n0\n0\n1106.180667\n\n\n4\n20-25\n2017.68\n1614.144\n-72.286\n22.366667\n1564.224667\n0\n0\n1564.224667\n\n\n\n\n\n\n\n\n\ndf &lt;- df |&gt;\n    dplyr::mutate(\"Baseline (F)\" = 0, \"Leakage (G)\" = 0) |&gt;\n    dplyr::mutate(\"netTotalProjectCarbonSeq (H)\" = `totalProjectCarbonSeq (E)` + `Baseline (F)` + `Leakage (G)`)\n\ndf |&gt; head()\n\n\n\nCalculate the claimable carbon sequestration by adding a final 20% buffer.\n\nPythonR\n\n\n\ndf[\"claimableCarbonSeq (J)\"] = df[\"netTotalProjectCarbonSeq (H)\"] * 0.8\ndf.head()\n\n\n\n\n\n\n\n\nperiod\ncumTotalCarbonSite (A)\ncumTotalCarbonSiteReduced (B)\nestablishmentCarbonLoss (C)\ncumSoilCarbonFlux (D)\ntotalProjectCarbonSeq (E)\nBaseline (F)\nLeakage (G)\nnetTotalProjectCarbonSeq (H)\nclaimableCarbonSeq (J)\n\n\n\n\n0\n0-5\n24.72\n19.776\n-72.286\n0.366667\n-52.143333\n0\n0\n-52.143333\n-41.714667\n\n\n1\n5-10\n130.80\n104.640\n-72.286\n5.866667\n38.220667\n0\n0\n38.220667\n30.576533\n\n\n2\n10-15\n522.24\n417.792\n-72.286\n11.366667\n356.872667\n0\n0\n356.872667\n285.498133\n\n\n3\n15-20\n1452.00\n1161.600\n-72.286\n16.866667\n1106.180667\n0\n0\n1106.180667\n884.944533\n\n\n4\n20-25\n2017.68\n1614.144\n-72.286\n22.366667\n1564.224667\n0\n0\n1564.224667\n1251.379733\n\n\n\n\n\n\n\n\n\ndf &lt;- df |&gt;\n    dplyr::mutate(\"claimableCarbonSeq (J)\" = `netTotalProjectCarbonSeq (H)` * 0.8)\n\ndf |&gt; head()\n\n\n\nCalculate the mean claimable carbon sequestration per hectare, in tCO2e per ha per year\n\nPythonR\n\n\n\ndf[\"meanClaimableCarbonSeqPerHa (K)\"] = df[\"claimableCarbonSeq (J)\"] / wccSeedlingArea\ndf.head()\n\n\n\n\n\n\n\n\nperiod\ncumTotalCarbonSite (A)\ncumTotalCarbonSiteReduced (B)\nestablishmentCarbonLoss (C)\ncumSoilCarbonFlux (D)\ntotalProjectCarbonSeq (E)\nBaseline (F)\nLeakage (G)\nnetTotalProjectCarbonSeq (H)\nclaimableCarbonSeq (J)\nmeanClaimableCarbonSeqPerHa (K)\n\n\n\n\n0\n0-5\n24.72\n19.776\n-72.286\n0.366667\n-52.143333\n0\n0\n-52.143333\n-41.714667\n-3.476222\n\n\n1\n5-10\n130.80\n104.640\n-72.286\n5.866667\n38.220667\n0\n0\n38.220667\n30.576533\n2.548044\n\n\n2\n10-15\n522.24\n417.792\n-72.286\n11.366667\n356.872667\n0\n0\n356.872667\n285.498133\n23.791511\n\n\n3\n15-20\n1452.00\n1161.600\n-72.286\n16.866667\n1106.180667\n0\n0\n1106.180667\n884.944533\n73.745378\n\n\n4\n20-25\n2017.68\n1614.144\n-72.286\n22.366667\n1564.224667\n0\n0\n1564.224667\n1251.379733\n104.281644\n\n\n\n\n\n\n\n\n\ndf &lt;- df |&gt;\n    dplyr::mutate(\"meanClaimableCarbonSeqPerHa (K)\" = `claimableCarbonSeq (J)` / wccSeedlingArea)\n\ndf |&gt; head()"
  },
  {
    "objectID": "UsingWCCCCS.html",
    "href": "UsingWCCCCS.html",
    "title": "Using the WCCCCS API",
    "section": "",
    "text": "This notebook details how to call the WCCCCS API endpoint using R and Python to obtain the Woodland Carbon Code (WCC) “Summary Carbon Sequestration over time” table."
  },
  {
    "objectID": "UsingWCCCCS.html#import-required-packages",
    "href": "UsingWCCCCS.html#import-required-packages",
    "title": "Using the WCCCCS API",
    "section": "Import required packages",
    "text": "Import required packages\n\nPythonR\n\n\n\nimport requests\nimport json\nimport pandas\npandas.options.mode.chained_assignment = None\n\n\n\nlibrary(httr)\nlibrary(jsonlite)\nlibrary(dplyr)"
  },
  {
    "objectID": "UsingWCCCCS.html#compose-api-request",
    "href": "UsingWCCCCS.html#compose-api-request",
    "title": "Using the WCCCCS API",
    "section": "Compose API request",
    "text": "Compose API request\nEstablish API POST request URL\n\nPythonR\n\n\n\nbase_url = \"https://escapi.frdss.org.uk/WCCCCS/\"\n\n\n\nbase_url &lt;- \"https://escapi.frdss.org.uk/WCCCCS/\"\n\n\n\nEstablish a dictionary or list containing the following data:\n\nspeciesCode:list\n\nA list of species codes.\n\nestimatedYC:list\n\nA list of yield class estimates for the associated species, usually obtained through ESC.\n\nspacing:list\n\nA list of spacings for the associated species.\n\nmanagement:list\n\nA list of management options (“Thinned” or “NO_thin”) for the associated species.\n\nproportion:list\n\nA list of values between 0 and 1, which must sum to 1, representing the proportions of each of the associated species.\n\n\n\n\n\n\n\n\nPlease Note\n\n\n\nAt present the estimatedYC value is rounded to the nearest yield class available in the WCC biomass carbon lookup table values (BCLT). However, at present and in contrast the correctness of available spacing and management options must be checked by the user. Solutions to this are being explored.\n\n\n\nPythonR\n\n\n\nspeciesData = {\"speciesCode\": [\"BE\", \"HOL\", \"POK\"], \n               \"estimatedYC\": [3.06, 1.98, 7.08],\n               \"spacing\": [2.5, 1.5, 1.2],\n               \"management\": [\"Thinned\", \"Thinned\", \"NO_thin\"],\n               \"proportion\": [0.3, 0.3, 0.4]}\n\n\n\nspeciesData &lt;- list(\"speciesCode\" = list(\"BE\", \"HOL\", \"POK\"), \n                    \"estimatedYC\" = list(3.06, 1.98, 7.08),\n                    \"spacing\" = list(2.5, 1.5, 1.2),\n                    \"management\" = list(\"Thinned\", \"Thinned\", \"NO_thin\"),\n                    \"proportion\" = list(0.3, 0.3, 0.4))\n\n\n\nEstablish the area of the site to be established/planted with seedlings (wccSeedlingArea) in hectares (ha), the area to which ground preparation (requiring fuel) is applied (wccGroundPrepFuelArea), the area for which tree shelters will be required (wccTreeSheltersArea), the area to be fenced (wccFencingArea), the area that herbicide will be applied (wccHerbicideArea), the length of roads to be constructed (wccRoadLength) in km, and the area, if any, of arable land with mineral soil to be planted (wccSoilArea) in ha.\n\nwccSeedlingArea:float\n\n0 by default, any positive number.\n\nwccFormerLandUse:str\n\nOne of “Arable”, “Pasture”, or “Seminatural”.\n\nwccBaselineCarbon:float\n\n0 by default, any positive number.\n\nwccLeakageCarbon:float\n\n0 by default, any positive number.\n\nwccGroundPrepFuelArea:float\n\n0 by default, any positive number.\n\nwccTreeSheltersArea:float\n\n0 by default, any positive number.\n\nwccFencingArea:float\n\n0 by default, any positive number.\n\nwccHerbicideArea:float\n\n0 by default, any positive number.\n\nwccRoadLength:float\n\n0 by default, any positive number.\n\nwccSoilArea:float\n\n0 by default, any positive number.\n\n\n\nPythonR\n\n\n\nwccSeedlingArea = 12\nwccFormerLandUse = \"Arable\"\nwccBaselineCarbon = 0\nwccLeakageCarbon = 0\nwccGroundPrepFuelArea = 24\nwccTreeSheltersArea = 12\nwccFencingArea = 6\nwccHerbicideArea = 6\nwccRoadLength = 1\nwccSoilArea = 2\n\n\n\nwccSeedlingArea &lt;- 12\nwccFormerLandUse &lt;- \"Arable\"\nwccBaselineCarbon &lt;- 0\nwccLeakageCarbon &lt;- 0\nwccGroundPrepFuelArea &lt;- 24\nwccTreeSheltersArea &lt;- 12\nwccFencingArea &lt;- 6\nwccHerbicideArea &lt;- 6\nwccRoadLength &lt;- 1\nwccSoilArea &lt;- 2\n\n\n\n\nPythonR\n\n\n\nreq_body = {\"speciesData\": speciesData,\n            \"wccSeedlingArea\": wccSeedlingArea,\n            \"wccFormerLandUse\": wccFormerLandUse,\n            \"wccBaselineCarbon\": wccBaselineCarbon,\n            \"wccLeakageCarbon\": wccLeakageCarbon,\n            \"wccGroundPrepFuelArea\": wccGroundPrepFuelArea,\n            \"wccTreeSheltersArea\": wccTreeSheltersArea,\n            \"wccFencingArea\": wccFencingArea,\n            \"wccHerbicideArea\": wccHerbicideArea,\n            \"wccRoadLength\": wccRoadLength,\n            \"wccSoilArea\": wccSoilArea}\n\n\n\n\nreq_list &lt;- list(\"speciesData\" = speciesData,\n                 \"wccSeedlingArea\" = wccSeedlingArea,\n                 \"wccFormerLandUse\" = wccFormerLandUse,\n                 \"wccBaselineCarbon\" = wccBaselineCarbon,\n                 \"wccLeakageCarbon\" = wccLeakageCarbon,\n                 \"wccGroundPrepFuelArea\" = wccGroundPrepFuelArea,\n                 \"wccTreeSheltersArea\" = wccTreeSheltersArea,\n                 \"wccFencingArea\" = wccFencingArea,\n                 \"wccHerbicideArea\" = wccHerbicideArea,\n                 \"wccRoadLength\" = wccRoadLength,\n                 \"wccSoilArea\" = wccSoilArea)\n\nreq_body &lt;- jsonlite::toJSON(req_list, auto_unbox = TRUE)"
  },
  {
    "objectID": "UsingWCCCCS.html#r-5",
    "href": "UsingWCCCCS.html#r-5",
    "title": "Using the WCCCCS API",
    "section": "R",
    "text": "R\n{r apiCall_r} WCCCCSresponse <- httr::POST(url = base_url, body = req_body) WCCCCSresponse$status_code == 200\n:::\nEstablish a function to deserialize the json response into a nested dictionary or nested list.\n\nPythonR\n\n\n\ndef deserialize(responseJson:str) -> dict:\n    \n    wcc_response_df = pandas.DataFrame.from_dict(data = json.loads(responseJson.json()))\n            \n    return wcc_response_df\n\n\n\n```{r deserializeFunc_r} deserialize <- function(responseJson){\nresponseContent <- httr::content(responseJson)\nwcc_response_df <- jsonlite::fromJSON(responseContent)\n\nreturn(wcc_response_df)\n}\n\n\n\n:::\n\nCall the `deserializeResults` function on the WCCCCS API output.\n\n::: {.panel-tabset}\n\n## Python\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\nWCCCCSresponse_df = deserialize(responseJson = WCCCCSresponse)"
  },
  {
    "objectID": "UsingWCCCCS.html#r-7",
    "href": "UsingWCCCCS.html#r-7",
    "title": "Using the WCCCCS API",
    "section": "R",
    "text": "R\n{r deserialize_r} WCCCCSresponse_df <- deserialize(responseJson = WCCCCSresponse)\n:::"
  },
  {
    "objectID": "UsingWCCCCS.html#explore-results",
    "href": "UsingWCCCCS.html#explore-results",
    "title": "Using the WCCCCS API",
    "section": "Explore results",
    "text": "Explore results\nThe object produced (WCCCCSresponse_df or WCCCCSResponse_df) is a data frame equivalent to the WCC “Summary Carbon Sequestration over time” table which is found in columns CB-CM in the “StandardProjectCarbonCalculator” sheet in the “WCC_CarbonCalculationSpreadsheet” excel workbook.\n\nPythonR\n\n\n\nWCCCCSresponse_df\n\n\n\n\n\n\n\n\nperiod\ncumTotalCarbonSite (A)\ncumTotalCarbonSiteReduced (B)\nestablishmentCarbonLoss (C)\ncumSoilCarbonFlux (D)\ntotalProjectCarbonSeq (E)\nBaseline (F)\nLeakage (G)\nnetTotalProjectCarbonSeq (H)\nclaimableCarbonSeq (J)\nmeanClaimableCarbonSeqPerHa (K)\n\n\n\n\n0\n0-5\n71.88\n57.504\n-70.486\n0.366667\n-12.615333\n0.0\n0.0\n-12.615333\n-10.092267\n-0.841022\n\n\n1\n5-10\n262.68\n210.144\n-70.486\n5.866667\n145.524667\n0.0\n0.0\n145.524667\n116.419733\n9.701644\n\n\n2\n10-15\n802.92\n642.336\n-70.486\n11.366667\n583.216667\n0.0\n0.0\n583.216667\n466.573333\n38.881111\n\n\n3\n15-20\n1858.44\n1486.752\n-70.486\n16.866667\n1433.132667\n0.0\n0.0\n1433.132667\n1146.506133\n95.542178\n\n\n4\n20-25\n2604.60\n2083.680\n-70.486\n22.366667\n2035.560667\n0.0\n0.0\n2035.560667\n1628.448533\n135.704044\n\n\n5\n25-30\n3325.56\n2660.448\n-70.486\n27.866667\n2617.828667\n0.0\n0.0\n2617.828667\n2094.262933\n174.521911\n\n\n6\n30-35\n4067.88\n3254.304\n-70.486\n33.366667\n3217.184667\n0.0\n0.0\n3217.184667\n2573.747733\n214.478978\n\n\n7\n35-40\n4491.60\n3593.280\n-70.486\n38.866667\n3561.660667\n0.0\n0.0\n3561.660667\n2849.328533\n237.444044\n\n\n8\n40-45\n4831.08\n3864.864\n-70.486\n44.366667\n3838.744667\n0.0\n0.0\n3838.744667\n3070.995733\n255.916311\n\n\n9\n45-50\n5196.48\n4157.184\n-70.486\n49.866667\n4136.564667\n0.0\n0.0\n4136.564667\n3309.251733\n275.770978\n\n\n10\n50-55\n5530.56\n4424.448\n-70.486\n53.533333\n4407.495333\n0.0\n0.0\n4407.495333\n3525.996267\n293.833022\n\n\n11\n55-60\n5831.88\n4665.504\n-70.486\n57.200000\n4652.218000\n0.0\n0.0\n4652.218000\n3721.774400\n310.147867\n\n\n12\n60-65\n6105.60\n4884.480\n-70.486\n60.866667\n4874.860667\n0.0\n0.0\n4874.860667\n3899.888533\n324.990711\n\n\n13\n65-70\n6368.76\n5095.008\n-70.486\n64.533333\n5089.055333\n0.0\n0.0\n5089.055333\n4071.244267\n339.270356\n\n\n14\n70-75\n6623.28\n5298.624\n-70.486\n68.200000\n5296.338000\n0.0\n0.0\n5296.338000\n4237.070400\n353.089200\n\n\n15\n75-80\n6860.76\n5488.608\n-70.486\n71.866667\n5489.988667\n0.0\n0.0\n5489.988667\n4391.990933\n365.999244\n\n\n16\n80-85\n7080.36\n5664.288\n-70.486\n75.533333\n5669.335333\n0.0\n0.0\n5669.335333\n4535.468267\n377.955689\n\n\n17\n85-90\n7294.80\n5835.840\n-70.486\n79.200000\n5844.554000\n0.0\n0.0\n5844.554000\n4675.643200\n389.636933\n\n\n18\n90-95\n7503.12\n6002.496\n-70.486\n82.866667\n6014.876667\n0.0\n0.0\n6014.876667\n4811.901333\n400.991778\n\n\n19\n95-100\n7698.48\n6158.784\n-70.486\n86.533333\n6174.831333\n0.0\n0.0\n6174.831333\n4939.865067\n411.655422\n\n\n\n\n\n\n\n\n\nWCCCCSresponse_df"
  },
  {
    "objectID": "UsingWCCCCS.html#python-6",
    "href": "UsingWCCCCS.html#python-6",
    "title": "Using the WCCCCS API",
    "section": "Python",
    "text": "Python\n\nWCCCCSresponse_df\n\n\n\n\n\n  \n    \n      \n      period\n      cumTotalCarbonSite (A)\n      cumTotalCarbonSiteReduced (B)\n      establishmentCarbonLoss (C)\n      cumSoilCarbonFlux (D)\n      totalProjectCarbonSeq (E)\n      Baseline (F)\n      Leakage (G)\n      netTotalProjectCarbonSeq (H)\n      claimableCarbonSeq (J)\n      meanClaimableCarbonSeqPerHa (K)\n    \n  \n  \n    \n      0\n      0-5\n      71.88\n      57.504\n      -70.486\n      0.366667\n      -12.615333\n      0.0\n      0.0\n      -12.615333\n      -10.092267\n      -0.841022\n    \n    \n      1\n      5-10\n      262.68\n      210.144\n      -70.486\n      5.866667\n      145.524667\n      0.0\n      0.0\n      145.524667\n      116.419733\n      9.701644\n    \n    \n      2\n      10-15\n      802.92\n      642.336\n      -70.486\n      11.366667\n      583.216667\n      0.0\n      0.0\n      583.216667\n      466.573333\n      38.881111\n    \n    \n      3\n      15-20\n      1858.44\n      1486.752\n      -70.486\n      16.866667\n      1433.132667\n      0.0\n      0.0\n      1433.132667\n      1146.506133\n      95.542178\n    \n    \n      4\n      20-25\n      2604.60\n      2083.680\n      -70.486\n      22.366667\n      2035.560667\n      0.0\n      0.0\n      2035.560667\n      1628.448533\n      135.704044\n    \n    \n      5\n      25-30\n      3325.56\n      2660.448\n      -70.486\n      27.866667\n      2617.828667\n      0.0\n      0.0\n      2617.828667\n      2094.262933\n      174.521911\n    \n    \n      6\n      30-35\n      4067.88\n      3254.304\n      -70.486\n      33.366667\n      3217.184667\n      0.0\n      0.0\n      3217.184667\n      2573.747733\n      214.478978\n    \n    \n      7\n      35-40\n      4491.60\n      3593.280\n      -70.486\n      38.866667\n      3561.660667\n      0.0\n      0.0\n      3561.660667\n      2849.328533\n      237.444044\n    \n    \n      8\n      40-45\n      4831.08\n      3864.864\n      -70.486\n      44.366667\n      3838.744667\n      0.0\n      0.0\n      3838.744667\n      3070.995733\n      255.916311\n    \n    \n      9\n      45-50\n      5196.48\n      4157.184\n      -70.486\n      49.866667\n      4136.564667\n      0.0\n      0.0\n      4136.564667\n      3309.251733\n      275.770978\n    \n    \n      10\n      50-55\n      5530.56\n      4424.448\n      -70.486\n      53.533333\n      4407.495333\n      0.0\n      0.0\n      4407.495333\n      3525.996267\n      293.833022\n    \n    \n      11\n      55-60\n      5831.88\n      4665.504\n      -70.486\n      57.200000\n      4652.218000\n      0.0\n      0.0\n      4652.218000\n      3721.774400\n      310.147867\n    \n    \n      12\n      60-65\n      6105.60\n      4884.480\n      -70.486\n      60.866667\n      4874.860667\n      0.0\n      0.0\n      4874.860667\n      3899.888533\n      324.990711\n    \n    \n      13\n      65-70\n      6368.76\n      5095.008\n      -70.486\n      64.533333\n      5089.055333\n      0.0\n      0.0\n      5089.055333\n      4071.244267\n      339.270356\n    \n    \n      14\n      70-75\n      6623.28\n      5298.624\n      -70.486\n      68.200000\n      5296.338000\n      0.0\n      0.0\n      5296.338000\n      4237.070400\n      353.089200\n    \n    \n      15\n      75-80\n      6860.76\n      5488.608\n      -70.486\n      71.866667\n      5489.988667\n      0.0\n      0.0\n      5489.988667\n      4391.990933\n      365.999244\n    \n    \n      16\n      80-85\n      7080.36\n      5664.288\n      -70.486\n      75.533333\n      5669.335333\n      0.0\n      0.0\n      5669.335333\n      4535.468267\n      377.955689\n    \n    \n      17\n      85-90\n      7294.80\n      5835.840\n      -70.486\n      79.200000\n      5844.554000\n      0.0\n      0.0\n      5844.554000\n      4675.643200\n      389.636933\n    \n    \n      18\n      90-95\n      7503.12\n      6002.496\n      -70.486\n      82.866667\n      6014.876667\n      0.0\n      0.0\n      6014.876667\n      4811.901333\n      400.991778\n    \n    \n      19\n      95-100\n      7698.48\n      6158.784\n      -70.486\n      86.533333\n      6174.831333\n      0.0\n      0.0\n      6174.831333\n      4939.865067\n      411.655422"
  },
  {
    "objectID": "UsingWCCCCS.html#r-8",
    "href": "UsingWCCCCS.html#r-8",
    "title": "Using the WCCCCS API",
    "section": "R",
    "text": "R\n\nWCCCCSresponse_df\n\n    period cumTotalCarbonSite (A) cumTotalCarbonSiteReduced (B)\n1      0-5                  71.88                        57.504\n2     5-10                 262.68                       210.144\n3    10-15                 802.92                       642.336\n4    15-20                1858.44                      1486.752\n5    20-25                2604.60                      2083.680\n6    25-30                3325.56                      2660.448\n7    30-35                4067.88                      3254.304\n8    35-40                4491.60                      3593.280\n9    40-45                4831.08                      3864.864\n10   45-50                5196.48                      4157.184\n11   50-55                5530.56                      4424.448\n12   55-60                5831.88                      4665.504\n13   60-65                6105.60                      4884.480\n14   65-70                6368.76                      5095.008\n15   70-75                6623.28                      5298.624\n16   75-80                6860.76                      5488.608\n17   80-85                7080.36                      5664.288\n18   85-90                7294.80                      5835.840\n19   90-95                7503.12                      6002.496\n20  95-100                7698.48                      6158.784\n   establishmentCarbonLoss (C) cumSoilCarbonFlux (D) totalProjectCarbonSeq (E)\n1                      -70.486             0.3666667                 -12.61533\n2                      -70.486             5.8666667                 145.52467\n3                      -70.486            11.3666667                 583.21667\n4                      -70.486            16.8666667                1433.13267\n5                      -70.486            22.3666667                2035.56067\n6                      -70.486            27.8666667                2617.82867\n7                      -70.486            33.3666667                3217.18467\n8                      -70.486            38.8666667                3561.66067\n9                      -70.486            44.3666667                3838.74467\n10                     -70.486            49.8666667                4136.56467\n11                     -70.486            53.5333333                4407.49533\n12                     -70.486            57.2000000                4652.21800\n13                     -70.486            60.8666667                4874.86067\n14                     -70.486            64.5333333                5089.05533\n15                     -70.486            68.2000000                5296.33800\n16                     -70.486            71.8666667                5489.98867\n17                     -70.486            75.5333333                5669.33533\n18                     -70.486            79.2000000                5844.55400\n19                     -70.486            82.8666667                6014.87667\n20                     -70.486            86.5333333                6174.83133\n   Baseline (F) Leakage (G) netTotalProjectCarbonSeq (H) claimableCarbonSeq (J)\n1             0           0                    -12.61533              -10.09227\n2             0           0                    145.52467              116.41973\n3             0           0                    583.21667              466.57333\n4             0           0                   1433.13267             1146.50613\n5             0           0                   2035.56067             1628.44853\n6             0           0                   2617.82867             2094.26293\n7             0           0                   3217.18467             2573.74773\n8             0           0                   3561.66067             2849.32853\n9             0           0                   3838.74467             3070.99573\n10            0           0                   4136.56467             3309.25173\n11            0           0                   4407.49533             3525.99627\n12            0           0                   4652.21800             3721.77440\n13            0           0                   4874.86067             3899.88853\n14            0           0                   5089.05533             4071.24427\n15            0           0                   5296.33800             4237.07040\n16            0           0                   5489.98867             4391.99093\n17            0           0                   5669.33533             4535.46827\n18            0           0                   5844.55400             4675.64320\n19            0           0                   6014.87667             4811.90133\n20            0           0                   6174.83133             4939.86507\n   meanClaimableCarbonSeqPerHa (K)\n1                       -0.8410222\n2                        9.7016444\n3                       38.8811111\n4                       95.5421778\n5                      135.7040444\n6                      174.5219111\n7                      214.4789778\n8                      237.4440444\n9                      255.9163111\n10                     275.7709778\n11                     293.8330222\n12                     310.1478667\n13                     324.9907111\n14                     339.2703556\n15                     353.0892000\n16                     365.9992444\n17                     377.9556889\n18                     389.6369333\n19                     400.9917778\n20                     411.6554222\n\n\n:::"
  },
  {
    "objectID": "UsingWCCCCS.html#make-the-api-call",
    "href": "UsingWCCCCS.html#make-the-api-call",
    "title": "Using the WCCCCS API",
    "section": "Make the API call",
    "text": "Make the API call\nCall the ESCWCC API.\n\nPythonR\n\n\n\nWCCCCSresponse = requests.post(url = base_url, json = req_body)\nWCCCCSresponse.status_code == 200\n\nTrue\n\n\n\n\nWCCCCSresponse &lt;- httr::POST(url = base_url, body = req_body)\nWCCCCSresponse$status_code == 200\n\n\n\nEstablish a function to deserialize the json response into a nested dictionary or nested list.\n\nPythonR\n\n\n\ndef deserialize(responseJson:str) -&gt; dict:\n    \n    wcc_response_df = pandas.DataFrame.from_dict(data = json.loads(responseJson.json()))\n            \n    return wcc_response_df\n\n\n\ndeserialize &lt;- function(responseJson){\n\n    responseContent &lt;- httr::content(responseJson)\n    wcc_response_df &lt;- jsonlite::fromJSON(responseContent)\n\n    return(wcc_response_df)\n}\n\n\n\nCall the deserializeResults function on the WCCCCS API output.\n\nPythonR\n\n\n\nWCCCCSresponse_df = deserialize(responseJson = WCCCCSresponse)\n\n\n\nWCCCCSresponse_df &lt;- deserialize(responseJson = WCCCCSresponse)"
  },
  {
    "objectID": "UsingWCCCCS.html#python-8",
    "href": "UsingWCCCCS.html#python-8",
    "title": "Using the WCCCCS API",
    "section": "Python",
    "text": "Python\n\nWCCCCSresponse_df\n\n     period  ...  meanClaimableCarbonSeqPerHa (K)\n0       0-5  ...                        -0.841022\n1      5-10  ...                         9.701644\n2     10-15  ...                        38.881111\n3     15-20  ...                        95.542178\n4     20-25  ...                       135.704044\n5     25-30  ...                       174.521911\n6     30-35  ...                       214.478978\n7     35-40  ...                       237.444044\n8     40-45  ...                       255.916311\n9     45-50  ...                       275.770978\n10    50-55  ...                       293.833022\n11    55-60  ...                       310.147867\n12    60-65  ...                       324.990711\n13    65-70  ...                       339.270356\n14    70-75  ...                       353.089200\n15    75-80  ...                       365.999244\n16    80-85  ...                       377.955689\n17    85-90  ...                       389.636933\n18    90-95  ...                       400.991778\n19   95-100  ...                       411.655422\n\n[20 rows x 11 columns]"
  },
  {
    "objectID": "index.html#outline",
    "href": "index.html#outline",
    "title": "FR DSS API Documentation",
    "section": "",
    "text": "Here the use of various Forest Research (FR) Decision Support System (DSS) tool API endpoints are documented for R and Python."
  },
  {
    "objectID": "UsingESCWCC.html#outline",
    "href": "UsingESCWCC.html#outline",
    "title": "Using the ESCWCC API",
    "section": "",
    "text": "This notebook details how to call the ESCWCC API endpoint to obtain a set of Woodland Carbon Code (WCC) lookup tables for ESC-predicted yield classes using R and Python."
  },
  {
    "objectID": "UsingWCCCCS.html#outline",
    "href": "UsingWCCCCS.html#outline",
    "title": "Using the WCCCCS API",
    "section": "",
    "text": "This notebook details how to call the WCCCCS API endpoint using R and Python to obtain the Woodland Carbon Code (WCC) “Summary Carbon Sequestration over time” table."
  },
  {
    "objectID": "UsingESCTreeResults.html#outline",
    "href": "UsingESCTreeResults.html#outline",
    "title": "Using the ESCTreeResults API",
    "section": "",
    "text": "This notebook details how to call the ESCTreeResults API endpoint to retrieve tree species suitability metrics for a given set of environmental dose variables.",
    "crumbs": [
      "ESC",
      "Using the ESCTreeResults API"
    ]
  },
  {
    "objectID": "UsingESCTreeModel.html#outline",
    "href": "UsingESCTreeModel.html#outline",
    "title": "Using the ESCTreeModel API",
    "section": "",
    "text": "This notebook details how to call the ESCTreeModel API endpoint to retrieve tree species suitability metrics for a given location.",
    "crumbs": [
      "ESC",
      "Using the ESCTreeModel API"
    ]
  },
  {
    "objectID": "UsingESCSiteData.html#outline",
    "href": "UsingESCSiteData.html#outline",
    "title": "Using the ESCSiteData API",
    "section": "",
    "text": "This notebook details how to call the ESCSiteData API endpoint to retrieve modelled environmental dose values for a given location and climate scenario.",
    "crumbs": [
      "ESC",
      "Using the ESCSiteData API"
    ]
  }
]