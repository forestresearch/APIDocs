[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "FR DSS API Documentation",
    "section": "",
    "text": "Here the use of various Forest Research (FR) Decision Support System (DSS) tool API endpoints are documented for R and Python."
  },
  {
    "objectID": "UsingESCWCCAPI.html",
    "href": "UsingESCWCCAPI.html",
    "title": "Using the ESCWCC API v0.5",
    "section": "",
    "text": "This notebook details how to call the ESCWCC API endpoint and use the response data to obtain woodland carbon code (WCC) metrics such as the claimable carbon sequestration using R and Python."
  },
  {
    "objectID": "UsingESCWCCAPI.html#import-required-packages",
    "href": "UsingESCWCCAPI.html#import-required-packages",
    "title": "Using the ESCWCC API v0.5",
    "section": "Import required packages",
    "text": "Import required packages\n\nPythonR\n\n\n\nimport requests\nimport json\nimport pandas\npandas.options.mode.chained_assignment = None\n\n\n\n\nlibrary(httr)\nlibrary(jsonlite)\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union"
  },
  {
    "objectID": "UsingESCWCCAPI.html#compose-api-request",
    "href": "UsingESCWCCAPI.html#compose-api-request",
    "title": "Using the ESCWCC API v0.5",
    "section": "Compose API request",
    "text": "Compose API request\nEstablish API POST request URL\n\nPythonR\n\n\n\nbase_url = \"http://209.97.132.245:8000/ESCWCC/\"\n\n\n\n\nbase_url <- \"http://209.97.132.245:8000/ESCWCC/\"\n\n\n\n\nSet the longitude (lon) and latitude (lat) in EPSG:3857.\n\nPythonR\n\n\n\nlon = -141102.7542\nlat = 6830259.9735\n\n\n\n\nlon <- -141102.7542\nlat <- 6830259.9735\n\n\n\n\nEstablish the site modifier options.\n\ndrainage:int\n\n0 = None.\n1 = Drainage installed.\n\nbrash:int\n\n0 = None (new planting).\n1 = Fresh brash (<18 months).\n2 = Brash (>18 months).\n\nfertiliser:int\n\n0 = None.\n1 = Fertiliser applied.\n\nexposure:int\n\n0 = None.\n1 = Exposed ridge/Coastal zone.\n2 = Local shelter/Less exposed/Underplanting.\n\n\n\nPythonR\n\n\n\ndrainage = 0\nbrash = 0\nfertiliser = 0\nexposure = 0\n\n\n\n\ndrainage <- 0\nbrash <- 0\nfertiliser <- 0\nexposure <- 0\n\n\n\n\nEstablish the climate scenario/s (climateScenList), climate years (climateYearList) species group filter (filter), and ESC version.\n\nclimateScenList:List\n\nA list containing any of: [‘UKCP09’, ‘RCP2.6’, ‘RCP4.5’, ‘RCP6.0’, ‘RCP8.5’]\n\nclimateYearList:List\n\nA list containing any of: [‘Baseline’, ‘2010’, ‘2020’, ‘2030’, ‘2040’, ‘2050’, ‘2060’, ‘2070’, ‘2080’]\n\nfilter:int\n\n0 = No filter\n1 = Conifers only\n2 = Broadleaves only\n3 = Natives only\n4 = Non-natives only\n\nescVersion:str\n\n“4.33” = “4.33”\n\n\nPlease note that we are currently integrating UKCP18 RCP scenario data, as such RCP2.6, RCP4.5, RCP6.0, and RCP8.5 are currently placeholders.\n\nPythonR\n\n\n\nclimateScenList = ['UKCP09']\nclimateYearList = ['Baseline', '2050', '2080']\nfilter = 0\nescVersion = \"4.33\"\n\n\n\n\nclimateScenList <- list('UKCP09')\nclimateYearList <- list('Baseline', '2050', '2080')\nfilter <- 0\nescVersion <- \"4.33\"\n\n\n\n\nEstablish the Woodland Carbon Code (WCC) version (wccVersion), the planting spacing (wccSpacing), management regime (thinning or no thinning) (wccManagement), period (wccPeriod), area of the site to be established (wccEstArea) in hectares (ha), the length of roads to be constructed (wccRoadLength) in km, and the area, if any, of arable land with mineral soil to be planted (wccSoilArea) in ha.\n\nwccVersion:str\n\n“2.4” = “2.4”, (March 2021)\n\nwccSpacing:list\n\n0 = ‘all’, equivalent to {0: [1.2, 2.5, 3.0, 1.4, 1.7, 1.8, 1.5, 2.0]}\n\nwccManagement:list\n\n0 = ‘all’, equivalent to {0: [“NO_thin”, “Thinned”]}\n\nwccPeriod:list\n\n0 = ‘all’, equivalent to {0: [“0”, “0-5”, “5-10”, “10-15”, “15-20”, “20-25”, “25-30”, “30-35”, “35-40”, “40-45”, “45-50”, “50-55”, “55-60”, “60-65”, “65-70”, “70-75”, “75-80”, “80-85”, “85-90”, “90-95”, “95-100”, “100-105”, “105-110”, “110-115”, “115-120”, “120-125”, “125-130”, “130-135”, “135-140”, “140-145”, “145-150”, “150-155”, “155-160”, “160-165”, “165-170”, “170-175”, “175-180”, “180-185”, “185-190”, “190-195”, “195-200”]}\n\nwccEstArea:float\n\n0 by default, any positive number.\n\nwccRoadLength:float\n\n0 by default, any positive number.\n\nwccSoilArea:float\n\n0 by default, any positive number.\n\n\n\nPythonR\n\n\n\nwccVersion = \"2.4\"\nwccSpacing = 0\nwccManagement = 0\nwccPeriod = 0\nwccEstArea = 12\nwccRoadLength = 1\nwccSoilArea = 2\n\n\n\n\nwccVersion <- \"2.4\"\nwccSpacing <- 0\nwccManagement <- 0\nwccPeriod <- 0\nwccEstArea <- 12\nwccRoadLength <- 1\nwccSoilArea <- 2\n\n\n\n\nEstablish the manual Soil Moisture Regime (SMR) and Soil Nutrient Regime (SNR) modifier values. Enter None, or omit from the request body (req_body) below if you do not wish to manually alter the values.\n\nsmr:float, any number between 0 and 8. Indicative categorical values are as follows:\n\n1 = Very Wet\n2 = Wet\n3 = Moist\n4 = Moist\n5 = Fresh\n6 = Slightly Dry\n7 = Moderately Dry\n8 = Very Dry\n\nsnr:float, any number between 0 and 6. Indicative categorical values are as follows:\n\n0 = Very Poor (VP1)\n0.5 = Very Poor (VP2)\n1 = Very Poor (VP3)\n1.5 = Very Poor - Poor\n2 = Poor\n3 = Medium\n4 = Rich\n5 = Very Rich\n6 = Carbonate\n\n\n\nPythonR\n\n\n\nsmr = None\nsnr = None\n\n\n\n\nsmr <- NA\nsnr <- NA\n\n\n\n\nCompose the request body. Optionally, you can accept the default values for all parameters apart from lon and lat by emitting the parameters from the request body (as shown in the commented out code below).\n\nPythonR\n\n\n\n# req_body = {\"lon\": lon, \"lat\": lat}\n\nreq_body = {\"lon\": lon, \"lat\": lat, \n            \"drainage\": drainage, \"brash\": brash, \"fertiliser\": fertiliser, \"exposure\": exposure, \n            \"climateScenList\": climateScenList, \"climateYearList\": climateYearList,\n            \"filter\": filter, \"escVersion\": escVersion, \"wccVersion\": wccVersion, \n            \"smr\": smr, \"snr\": snr,\n            \"wccSpacing\": wccSpacing, \"wccManagement\": wccManagement, \"wccPeriod\": wccPeriod,\n            \"wccEstArea\": wccEstArea, \"wccRoadLength\": wccRoadLength, \"wccSoilArea\": wccSoilArea}\n\n\n\n\n# req_list = list(\"smr\" = smr, \"snr\" = snr)\n\nreq_list <- list(\"lon\" = lon, \"lat\" = lat, \n                 \"drainage\" = drainage, \"brash\" = brash, \"fertiliser\" =  fertiliser, \"exposure\" = exposure, \n                 \"climateScenList\" = climateScenList, \"climateYearList\" = climateYearList,\n                 \"filter\" = filter, \"escVersion\" = escVersion, \"wccVersion\" = wccVersion, \n                 \"smr\" = smr, \"snr\" = snr,\n                 \"wccSpacing\" = wccSpacing, \"wccManagement\" = wccManagement, \"wccPeriod\" = wccPeriod,\n                 \"wccEstArea\" = wccEstArea, \"wccRoadLength\" = wccRoadLength, \"wccSoilArea\" = wccSoilArea)\n\nreq_body <- jsonlite::toJSON(req_list, auto_unbox = TRUE)"
  },
  {
    "objectID": "UsingESCWCCAPI.html#make-the-api-call",
    "href": "UsingESCWCCAPI.html#make-the-api-call",
    "title": "Using the ESCWCC API v0.5",
    "section": "Make the API call",
    "text": "Make the API call\nCall the ESCWCC API.\n\nPythonR\n\n\n\nESCWCCresponse = requests.post(url = base_url, json = req_body)\nESCWCCresponse.status_code == 200\n\nTrue\n\n\n\n\n\nESCWCCresponse <- httr::POST(url = base_url, body = req_body)\nESCWCCresponse$status_code == 200\n\n[1] TRUE\n\n\n\n\n\nEstablish a function to deserialize the json response into a nested dictionary or nested list.\n\nPythonR\n\n\n\ndef deserialize(responseJson:str) -> dict:\n    \n    loadedJson = json.loads(responseJson)\n\n    for k,v in loadedJson.items():\n        for w,s in loadedJson[k].items():\n            for t,c in loadedJson[k][w].items():\n                loadedJson[k][w][t] = pandas.DataFrame.from_dict(data = json.loads(c))\n            \n    return loadedJson\n\n\n\n\ndeserialize <- function(responseJson){\n\n    responseContent <- httr::content(responseJson)\n    responseContent <- jsonlite::fromJSON(responseContent)\n\n    for(i in names(responseContent)){\n        for(j in names(responseContent[[i]])){\n            for(k in names(responseContent[[i]][[j]])){\n                responseContent[[i]][[j]][[k]] = jsonlite::fromJSON(responseContent[[i]][[j]][[k]])\n            }\n        }\n    }\n    return(responseContent)\n}\n\n\n\n\nCall the deserializeResults function on the ESC API output.\n\nPythonR\n\n\n\nESCWCCresponse_dict = deserialize(responseJson = ESCWCCresponse.json())\n\n\n\n\nESCWCCresponse_list <- deserialize(responseJson = ESCWCCresponse)"
  },
  {
    "objectID": "UsingESCWCCAPI.html#explore-results",
    "href": "UsingESCWCCAPI.html#explore-results",
    "title": "Using the ESCWCC API v0.5",
    "section": "Explore results",
    "text": "Explore results\nThe object produced (ESCWCCresponse_dict or ESCWCCResponse_list) is a nested dictionary with the following structure:\nESCresponse_dict (dict or list)\n├── Metadata (dict or list)\n│   ├── ESCMetadata (dict or list)\n│   │   ├── ESCTreeMetadata (DataFrame)\n│   ├── WCCMetadata (dict or list)\n│   │   ├── WCCMetadata (DataFrame)\n│   ├── APIMetadata (dict or list)\n│   │   ├── DateTime (DataFrame)\n└───UKCP09 (dict or list)\n    ├── Baseline (dict or list)\n    │   ├── ESCDoseVals (DataFrame)\n    │   ├── ESCResponseVals (DataFrame)\n    │   ├── ESCSuitMetrics (DataFrame)\n    │   ├── WCCTreeValues (DataFrame)\n    │   ├── WCCSoilLoss (DataFrame)\n    │   ├── WCCSoilSeq (DataFrame)\n    │   ├── WCCEstablishment (DataFrame)\n    ├── 2050 (dict or list)\n    │   ├── ESCDoseVals (DataFrame)\n    │   ├── ESCResponseVals (DataFrame)\n    │   ├── ESCSuitMetrics (DataFrame)\n    │   ├── WCCTreeValues (DataFrame)\n    │   ├── WCCSoilLoss (DataFrame)\n    │   ├── WCCSoilSeq (DataFrame)\n    │   ├── WCCEstablishment (DataFrame)\n    ├── 2080 (dict or list)\n    │   ├── ESCDoseVals (DataFrame)\n    │   ├── ESCResponseVals (DataFrame)\n    │   ├── ESCSuitMetrics (DataFrame)\n    │   ├── WCCTreeValues (DataFrame)\n    │   ├── WCCSoilLoss (DataFrame)\n    │   ├── WCCSoilSeq (DataFrame)\n    │   ├── WCCEstablishment (DataFrame)\nAccess the ESC & WCC data frames from the API response for a given climate scenario using the following code.\nThe ESCDoseVals data frame contains the environmental dose variables obtained from the modelled data and/or manually entered, which are then modified by the aforementioned API query parameters drainage, brash, fertiliser, and exposure. For more information on the underlying method see the Forest Research Bulletin 124 and the Forest Research Technical Paper 20. Column definitions:\n\nSMR - soil moisture regime\nSNR - soil nutrient regime\nAT - accumulated temperature\nCT - continentality\nDAMS - direct aspect method of scoring\nMD - moisture deficit\nItem - The stage of modification of the environmental dose variable values.\n\n\nPythonR\n\n\n\nbaseline_ESCDoseVals = ESCWCCresponse_dict.get(\"UKCP09\").get(\"Baseline\").get(\"ESCDoseVals\")\nbaseline_ESCDoseVals\n\n   SMR  SNR           AT  ...       DAMS          MD                   Item\n0  3.0  5.0  1614.226929  ...  12.258021  165.391876          Values - Base\n1  NaN  NaN          NaN  ...        NaN         NaN        Values - Manual\n2  3.0  5.0  1614.226929  ...  12.258021  165.391876        Values - PreMod\n3  0.0  0.0     0.000000  ...   0.000000    0.000000    Modifier - Drainage\n4  0.0  0.0     0.000000  ...   0.000000    0.000000       Modifier - Brash\n5  0.0  0.0     0.000000  ...   0.000000    0.000000  Modifier - Fertiliser\n6  0.0  0.0     0.000000  ...   0.000000    0.000000    Modifier - Exposure\n7  3.0  5.0  1614.226929  ...  12.258021  165.391876         Values - Final\n\n[8 rows x 7 columns]\n\n\n\n\n\nbaseline_ESCDoseVals = ESCWCCresponse_list$UKCP09$Baseline$ESCDoseVals\nbaseline_ESCDoseVals\n\n  SMR SNR       AT       CT     DAMS       MD                  Item\n1   3   5 1614.227 10.86863 12.25802 165.3919         Values - Base\n2  NA  NA       NA       NA       NA       NA       Values - Manual\n3   3   5 1614.227 10.86863 12.25802 165.3919       Values - PreMod\n4   0   0    0.000  0.00000  0.00000   0.0000   Modifier - Drainage\n5   0   0    0.000  0.00000  0.00000   0.0000      Modifier - Brash\n6   0   0    0.000  0.00000  0.00000   0.0000 Modifier - Fertiliser\n7   0   0    0.000  0.00000  0.00000   0.0000   Modifier - Exposure\n8   3   5 1614.227 10.86863 12.25802 165.3919        Values - Final\n\n\n\n\n\nThe ESCResponseVals data frame contains data on the response of each tree species to each environmental dose metric. Column definitions:\n\nspeciesCode - The Forest Research species code for the species.\nmetric - The environmental dose variable (see above).\nresponse - The response of the tree species to the environmental dose variable. A unitless value between 0 and 1.\n\n\nPythonR\n\n\n\nbaseline_ESCResponseVals = ESCWCCresponse_dict.get(\"UKCP09\").get(\"Baseline\").get(\"ESCResponseVals\")\nbaseline_ESCResponseVals.head()\n\n  speciesCode metric  response\n0          AH     AT  1.000000\n1          AH     CT  1.000000\n2          AH   DAMS  0.964892\n3          AH     MD  0.909465\n4          AH    SMR  0.755714\n\n\n\n\n\nbaseline_ESCResponseVals = ESCWCCresponse_list$UKCP09$Baseline$ESCResponseVals\nbaseline_ESCResponseVals |> head()\n\n  speciesCode metric  response\n1          AH     AT 1.0000000\n2          AH     CT 1.0000000\n3          AH   DAMS 0.9648923\n4          AH     MD 0.9094654\n5          AH    SMR 0.7557143\n6          AH    SNR 1.0000000\n\n\n\n\n\nThe ESCSuitMetrics data frame contains a range of summary data relating to the suitability of each tree species based on the ESCResponseVals data. Column definitions:\n\nspeciesCode - The Forest Research species code for the species.\nspeciesScientific - The scientific name of the species.\nspeciesName - The common name of the species.\nmaxYC - The maximum yield class of that species\nthreat - Any major threats to that tree species which should be taken into account when considering planting that species.\nlimFactorInclAT - The limiting factor (metric with the lowest response) including AT.\nlimFactorInclATResponse - The response value for limiting factor (metric with the lowest response) including AT.\nlimFactorExclAT - The limiting factor (metric with the lowest response) excluding AT.\nlimFactorExclATResponse - The response value for limiting factor (metric with the lowest response) excluding AT.\nTimberSuitability - The suitability of that tree species for planting as a timber crop.\nEcologicalSuitability - The suitability of that tree species for planting.\nestimatedYC - The estimated yield class.\n\n\nPythonR\n\n\n\nbaseline_ESCSuitMetrics = ESCWCCresponse_dict.get(\"UKCP09\").get(\"Baseline\").get(\"ESCSuitMetrics\")\nbaseline_ESCSuitMetrics.head()\n\n  speciesCode   speciesScientific  ... EcologicalSuitability  estimatedYC\n0          AH  Fraxinus excelsior  ...              0.755714     9.068572\n1         AMA    Acer macrophylum  ...              0.000000     0.000000\n2         ASP     Populus tremula  ...              0.962698    11.552382\n3          BE     Fagus sylvatica  ...              0.305714     3.057143\n4         BPO       Populus nigra  ...              0.978258    15.652131\n\n[5 rows x 12 columns]\n\n\n\n\n\nbaseline_ESCSuitMetrics = ESCWCCresponse_list$UKCP09$Baseline$ESCSuitMetrics\nbaseline_ESCSuitMetrics |> head()\n\n  speciesCode  speciesScientific    speciesName maxYC  threat limFactorInclAT\n1          AH Fraxinus excelsior            Ash    12 Chalara             SMR\n2         AMA   Acer macrophylum Big leaf maple    12    None              CT\n3         ASP    Populus tremula          Aspen    12    None             SNR\n4          BE    Fagus sylvatica          Beech    10    None             SMR\n5         BPO      Populus nigra   Black poplar    16    None            DAMS\n6         CAR    Alnus glutinosa   Common alder    12    None            DAMS\n  limFactorInclATResponse limFactorExclAT limFactorExclATResponse\n1               0.7557143             SMR               0.7557143\n2               0.0000000              CT               0.0000000\n3               0.9626985             SNR               0.9626985\n4               0.3057143             SMR               0.3057143\n5               0.9782582            DAMS               0.9782582\n6               0.8542166            DAMS               0.8542166\n  TimberSuitability EcologicalSuitability estimatedYC\n1         0.7557143             0.7557143    9.068572\n2         0.0000000             0.0000000    0.000000\n3         0.9626985             0.9626985   11.552382\n4         0.3057143             0.3057143    3.057143\n5         0.9782582             0.9782582   15.652131\n6         0.8542166             0.8542166   10.250599\n\n\n\n\n\nThe WCCTreeValues data frame contains data from the woodland carbon code biomass carbon lookup tables (BCLT) and clearfell max sequence values for the yield class nearest to the ESC estimated yield class. Column definitions:\n\nspeciesCode - The Forest Research species code for the species.\nwccCode - The WCC species code mapped to the ESC species, from which the WCC data is retrieved.\nspeciesScientific - The scientific name of the species.\nspeciesName - The common name of the species.\nestimatedYC - The estimated yield class.\nroundedYC - The nearest even yield class\nminWCCYC - The lowest yield class with corresponding values for the wccCode biomass carbon lookup tables (BCLT) data\nmaxWCCYC - The highest yield class with corresponding values for the wccCode biomass carbon lookup tables (BCLT) data\nfinalYC - The yield class used to retrieve the BCLT data. If the roundedYC is less than the minWCCYC this is set to the minWCCYC. If the roundedYC is greater than the maxWCCYC this is set to the maxWCCYC, else the roundedYC value is used.\nspacing - The planting spacing. Retrieved from column C in the BCLT tables.\nmanagement - The management regime for the planted area, thinned or un-thinned. Retrieved from column E in the BCLT tables.\nperiod - The period of years associated with the wcc data. Retrieved from column F in the BCLT tables.\nstandingCarbonYr - The carbon contained within the above-ground biomass of the trees planted on site. Retrieved from column G in the BCLT tables. Units of tCO2e/ha/yr.\ndebrisCarbonYr - The carbon contained within the debris on site. Retrieved from column H in the BCLT tables. Units of tCO2e/ha/yr.\ntotalCarbonYr - The total carbon contained on site, equal to the sum of standingCarbonYr and debrisCarbonYr. Retrieved from column I in the BCLT tables. Units of tCO2e/ha/yr.\ncumCarbon5Yr - The cumulative carbon sequestered on site over the period stipulated in the period column. Retrieved from column J in the BCLT tables. Units of tCO2e/ha/period.\ncumBiomassCarbon - The cumulative carbon sequestered on site over up until the period stipulated in the period column. Retrieved from column K in the BCLT tables. Units of tCO2e/ha.\ncumEmissionsMgmt - The cumulative emissions from ongiong management on site. Retrieved from column L in the BCLT tables. Units of tCO2e/ha.\ncumTotalCarbon - The total cumulative emissions on site. Retrieved from column M in the BCLT tables. Units of tCO2e/ha.\nremCarbonYr - The quantity of carbon removed from the site yearly. Retrieved from column N in the BCLT tables. Units of tCO2e/ha/yr.\nperiodEnd - The rotation length stipulated in columns F to AK of the “Clearfell_Max_Seq_Values” sheet of the excel tool. Mapped to the last year of the period present in the period column.\nclearfellCapCarbon - The Clearfell Cap Value associated with the periodEnd, wccCode, spacing, YC, and management. Units of tCO2e.\n\n\n\n\n\n\n\nWarning\n\n\n\nThe finalYC may differ considerably from the ESC estimatedYC due to the limited number of species - YC combinations for which data is available from the WCC BCLT tables. It is left to the API user to determine whether the use of the BCLT values returned for a given finalYC are appropriate.\n\n\n\nPythonR\n\n\n\nbaseline_WCCTreeValues = ESCWCCresponse_dict.get(\"UKCP09\").get(\"Baseline\").get(\"WCCTreeValues\")\nbaseline_WCCTreeValues.head()\n\n  speciesCode wccCode  ... periodEnd clearfellCapCarbon\n0          AH     SAB  ...       5.0                6.5\n1          AH     SAB  ...      10.0               13.0\n2          AH     SAB  ...      15.0               64.0\n3          AH     SAB  ...      20.0              115.0\n4          AH     SAB  ...      25.0              175.0\n\n[5 rows x 22 columns]\n\n\n\n\n\nbaseline_WCCTreeValues = ESCWCCresponse_list$UKCP09$Baseline$WCCTreeValues\nbaseline_WCCTreeValues |> head()\n\n  speciesCode wccCode  speciesScientific speciesName estimatedYC roundedYC\n1          AH     SAB Fraxinus excelsior         Ash    9.068572        10\n2          AH     SAB Fraxinus excelsior         Ash    9.068572        10\n3          AH     SAB Fraxinus excelsior         Ash    9.068572        10\n4          AH     SAB Fraxinus excelsior         Ash    9.068572        10\n5          AH     SAB Fraxinus excelsior         Ash    9.068572        10\n6          AH     SAB Fraxinus excelsior         Ash    9.068572        10\n  minWCCYC maxWCCYC finalYC spacing management period standingCarbonYr\n1        2       12      10     1.5    NO_thin    0-5             4.07\n2        2       12      10     1.5    NO_thin   5-10            12.42\n3        2       12      10     1.5    NO_thin  10-15            29.50\n4        2       12      10     1.5    NO_thin  15-20            26.84\n5        2       12      10     1.5    NO_thin  20-25            19.91\n6        2       12      10     1.5    NO_thin  25-30            14.58\n  debrisCarbonYr totalCarbonYr cumCarbon5Yr cumBiomassCarbon cumEmissionsMgmt\n1           0.52          4.59         23.0             23.0                0\n2           0.65         13.06         65.3             88.3                0\n3           1.34         30.84        154.2            242.5                0\n4           0.82         27.66        138.3            380.8                0\n5           3.53         23.44        117.2            498.0                0\n6          12.91         27.49        137.5            635.5                0\n  cumTotalCarbon remCarbonYr periodEnd clearfellCapCarbon\n1           23.0           0         5                6.5\n2           88.3           0        10               13.0\n3          242.5           0        15               64.0\n4          380.8           0        20              115.0\n5          498.0           0        25              175.0\n6          635.5           0        30              235.0\n\n\n\n\n\nThe WCCEstablishment data frame contains the establishment emission values calculated using the same methodology as in the “StandardProjectCarbonCalculator” sheet of the excel tool. Column definitions:\n\nseedlingSpacing\nvariable - the establishment emission source, one of:\n\nseedling\ngroundPrepFuel\ntreeShelters\nfencing\nherbicide\ntotalEmissions\n\ntotalEmissions- the carbon emissions associated with that seedlingSpacing and variable. Units of tCO2e.\n\n\nPythonR\n\n\n\nbaseline_WCCEstablishment = ESCWCCresponse_dict.get(\"UKCP09\").get(\"Baseline\").get(\"WCCEstablishment\")\nbaseline_WCCEstablishment.head()\n\n   seedlingSpacing  variable  totalEmissions\n0              1.2  seedling          -12.60\n1              1.4  seedling           -9.24\n2              1.5  seedling           -8.04\n3              1.7  seedling           -6.24\n4              2.0  seedling           -4.56\n\n\n\n\n\nbaseline_WCCEstablishment = ESCWCCresponse_list$UKCP09$Baseline$WCCEstablishment\nbaseline_WCCEstablishment |> head()\n\n  seedlingSpacing variable totalEmissions\n1             1.2 seedling         -12.60\n2             1.4 seedling          -9.24\n3             1.5 seedling          -8.04\n4             1.7 seedling          -6.24\n5             2.0 seedling          -4.56\n6             2.5 seedling          -2.88\n\n\n\n\n\nThe WCCSoilLoss data frame contains data on the soil carbon emissions during the year of establishment (Year 1) for each country, percentage topsoil carbon to be subtracted and previous land use. Column definitions:\n\nCountry - The country in which the site is located.\ntopsoilCarbonSubtract - the percentage of topsoil carbon to subtract .\nSeminatural - the soil carbon emissions associated with the previous land-use “Semi-natural”, units in tCO2e/ha.\nPasture - the soil carbon emissions associated with the previous land-use “Pasture, units in tCO2e/ha.\nArable - the soil carbon emissions associated with the previous land-use “Arable”, units in tCO2e/ha.\n\n\nPythonR\n\n\n\nbaseline_WCCSoilLoss = ESCWCCresponse_dict.get(\"UKCP09\").get(\"Baseline\").get(\"WCCSoilLoss\")\nbaseline_WCCSoilLoss.head()\n\n            Country  topsoilCarbonSubtract  Seminatural   Pasture    Arable\n0           England                      0          0.0  0.000000  0.000000\n1          Scotland                      0          0.0  0.000000  0.000000\n2             Wales                      0          0.0  0.000000  0.000000\n3  Northern Ireland                      0          0.0  0.000000  0.000000\n4           England                      2         -8.8 -5.866667 -5.133333\n\n\n\n\n\nbaseline_WCCSoilLoss = ESCWCCresponse_list$UKCP09$Baseline$WCCSoilLoss\nbaseline_WCCSoilLoss |> head()\n\n           Country topsoilCarbonSubtract Seminatural    Pasture    Arable\n1          England                     0     0.00000   0.000000  0.000000\n2         Scotland                     0     0.00000   0.000000  0.000000\n3            Wales                     0     0.00000   0.000000  0.000000\n4 Northern Ireland                     0     0.00000   0.000000  0.000000\n5          England                     2    -8.80000  -5.866667 -5.133333\n6         Scotland                     2   -11.73333 -11.733333 -8.800000\n\n\n\n\n\nThe WCCSoilSeq data frame contains data on the cumulative soil carbon sequestration for mineral soils which where the former land use was arable agriculture. Column definitions:\n\nperiod - The period of years associated with the wcc data. Retrieved from column Y in the “StandardProjectCarbonCalculator” sheet of the excel tool.\ncumSoilSeq - Calculated by multiplying column AY in the “StandardProjectCarbonCalculator” by the site area. Units in tCO2e.\n\n\nPythonR\n\n\n\nbaseline_WCCSoilSeq = ESCWCCresponse_dict.get(\"UKCP09\").get(\"Baseline\").get(\"WCCSoilSeq\")\nbaseline_WCCSoilSeq.head()\n\n   period  cumSoilSeq\n0     0-5         5.5\n1    5-10        11.0\n2   10-15        16.5\n3   15-20        22.0\n4   20-25        27.5\n\n\n\n\n\nbaseline_WCCSoilSeq = ESCWCCresponse_list$UKCP09$Baseline$WCCSoilSeq\nbaseline_WCCSoilSeq |> head()\n\n  period cumSoilSeq\n1    0-5        5.5\n2   5-10       11.0\n3  10-15       16.5\n4  15-20       22.0\n5  20-25       27.5\n6  25-30       33.0"
  },
  {
    "objectID": "UsingESCWCCAPI.html#calculate-claimable-carbon-sequestration",
    "href": "UsingESCWCCAPI.html#calculate-claimable-carbon-sequestration",
    "title": "Using the ESCWCC API v0.5",
    "section": "Calculate Claimable Carbon Sequestration",
    "text": "Calculate Claimable Carbon Sequestration\nTo calculate the average total claimable sequestration by year in tCO2e/ha perform the following calculations using the API outputs.\nColumns suffixed with (<[A-Z]>) correspond to the columns CB to CM of Version 2.4 (March 2021) of the WCC excel tool.\nFirst, retrieve the WCC Biomass Carbon Lookup Table (BCLT) and Clearfell Max Seq Values (CMSV) values for selected species, e.g. Rowan (ROW).\n\nPythonR\n\n\n\nbaseline_WCCTreeValues_ROW = baseline_WCCTreeValues[baseline_WCCTreeValues[\"speciesCode\"] == \"ROW\"]\nbaseline_WCCTreeValues_ROW.head()\n\n     speciesCode wccCode  ... periodEnd clearfellCapCarbon\n1200         ROW     SAB  ...       NaN                NaN\n1201         ROW     SAB  ...       NaN                NaN\n1202         ROW     SAB  ...       NaN                NaN\n1203         ROW     SAB  ...       NaN                NaN\n1204         ROW     SAB  ...       NaN                NaN\n\n[5 rows x 22 columns]\n\n\n\n\n\nbaseline_WCCTreeValues_ROW <- baseline_WCCTreeValues |>\n    dplyr::filter(speciesCode == \"ROW\")\nbaseline_WCCTreeValues_ROW |> head()\n\n  speciesCode wccCode speciesScientific speciesName estimatedYC roundedYC\n1         ROW     SAB  Sorbus aucuparia       Rowan         2.4         2\n2         ROW     SAB  Sorbus aucuparia       Rowan         2.4         2\n3         ROW     SAB  Sorbus aucuparia       Rowan         2.4         2\n4         ROW     SAB  Sorbus aucuparia       Rowan         2.4         2\n5         ROW     SAB  Sorbus aucuparia       Rowan         2.4         2\n6         ROW     SAB  Sorbus aucuparia       Rowan         2.4         2\n  minWCCYC maxWCCYC finalYC spacing management period standingCarbonYr\n1        2       12       2     1.5    NO_thin    0-5               NA\n2        2       12       2     1.5    NO_thin   5-10               NA\n3        2       12       2     1.5    NO_thin  10-15               NA\n4        2       12       2     1.5    NO_thin  15-20               NA\n5        2       12       2     1.5    NO_thin  20-25               NA\n6        2       12       2     1.5    NO_thin  25-30               NA\n  debrisCarbonYr totalCarbonYr cumCarbon5Yr cumBiomassCarbon cumEmissionsMgmt\n1             NA            NA           NA               NA               NA\n2             NA            NA           NA               NA               NA\n3             NA            NA           NA               NA               NA\n4             NA            NA           NA               NA               NA\n5             NA            NA           NA               NA               NA\n6             NA            NA           NA               NA               NA\n  cumTotalCarbon remCarbonYr periodEnd clearfellCapCarbon\n1            2.7          NA        NA                 NA\n2            9.6          NA        NA                 NA\n3           28.9          NA        NA                 NA\n4           76.4          NA        NA                 NA\n5          120.6          NA        NA                 NA\n6          159.7          NA        NA                 NA\n\n\n\n\n\nSelect the BCLT and CMSV values for a particular spacing and management regime, e.g. 1.5m and Thinned.\n\nPythonR\n\n\n\nbaseline_WCCTreeValues_ROW_1p5_Thinned = baseline_WCCTreeValues_ROW[(baseline_WCCTreeValues_ROW.spacing == 1.5) & (baseline_WCCTreeValues_ROW.management == \"Thinned\")]\nbaseline_WCCTreeValues_ROW_1p5_Thinned.head()\n\n     speciesCode wccCode  ... periodEnd clearfellCapCarbon\n1240         ROW     SAB  ...       NaN                NaN\n1241         ROW     SAB  ...       NaN                NaN\n1242         ROW     SAB  ...       NaN                NaN\n1243         ROW     SAB  ...       NaN                NaN\n1244         ROW     SAB  ...       NaN                NaN\n\n[5 rows x 22 columns]\n\n\n\n\n\nbaseline_WCCTreeValues_ROW_1p5_Thinned <- baseline_WCCTreeValues_ROW |>\n    dplyr::filter(spacing == 1.5,\n                  management == \"Thinned\")\nbaseline_WCCTreeValues_ROW_1p5_Thinned |> head()\n\n  speciesCode wccCode speciesScientific speciesName estimatedYC roundedYC\n1         ROW     SAB  Sorbus aucuparia       Rowan         2.4         2\n2         ROW     SAB  Sorbus aucuparia       Rowan         2.4         2\n3         ROW     SAB  Sorbus aucuparia       Rowan         2.4         2\n4         ROW     SAB  Sorbus aucuparia       Rowan         2.4         2\n5         ROW     SAB  Sorbus aucuparia       Rowan         2.4         2\n6         ROW     SAB  Sorbus aucuparia       Rowan         2.4         2\n  minWCCYC maxWCCYC finalYC spacing management period standingCarbonYr\n1        2       12       2     1.5    Thinned    0-5               NA\n2        2       12       2     1.5    Thinned   5-10               NA\n3        2       12       2     1.5    Thinned  10-15               NA\n4        2       12       2     1.5    Thinned  15-20               NA\n5        2       12       2     1.5    Thinned  20-25               NA\n6        2       12       2     1.5    Thinned  25-30               NA\n  debrisCarbonYr totalCarbonYr cumCarbon5Yr cumBiomassCarbon cumEmissionsMgmt\n1             NA            NA           NA               NA               NA\n2             NA            NA           NA               NA               NA\n3             NA            NA           NA               NA               NA\n4             NA            NA           NA               NA               NA\n5             NA            NA           NA               NA               NA\n6             NA            NA           NA               NA               NA\n  cumTotalCarbon remCarbonYr periodEnd clearfellCapCarbon\n1            2.7          NA        NA                 NA\n2            9.6          NA        NA                 NA\n3           28.9          NA        NA                 NA\n4           70.6          NA        NA                 NA\n5           91.1          NA        NA                 NA\n6          110.5          NA        NA                 NA\n\n\n\n\n\nDefine a species composition for the site and join to a trimmed WCCTreeValues dataframe.\n\nPythonR\n\n\n\nspecies_composition = pandas.DataFrame.from_dict(data = {\"speciesCode\": \"ROW\", \"proportion\": [1]})\nspecies_composition\n\n  speciesCode  proportion\n0         ROW           1\n\n\n\n\n\nspecies_composition <- data.frame(\"speciesCode\" = \"ROW\", \"proportion\" = 1)\nspecies_composition\n\n  speciesCode proportion\n1         ROW          1\n\n\n\n\n\nForm a new data frame, select the relevant columns, and merge the species composition data frame.\n\nPythonR\n\n\n\ndf = baseline_WCCTreeValues_ROW_1p5_Thinned\ndf = df[[\"speciesCode\", \"period\", \"cumTotalCarbon\"]]\ndf = df.merge(species_composition, on = [\"speciesCode\"])\ndf.head()\n\n  speciesCode  period  cumTotalCarbon  proportion\n0         ROW     0-5             2.7           1\n1         ROW    5-10             9.6           1\n2         ROW   10-15            28.9           1\n3         ROW   15-20            70.6           1\n4         ROW   20-25            91.1           1\n\n\n\n\n\ndf <- baseline_WCCTreeValues_ROW_1p5_Thinned\ndf <- df |>\n    dplyr::select(speciesCode, period, cumTotalCarbon) |>\n    dplyr::left_join(species_composition, on = \"speciesCode\")\n\nJoining, by = \"speciesCode\"\n\ndf |> head()\n\n  speciesCode period cumTotalCarbon proportion\n1         ROW    0-5            2.7          1\n2         ROW   5-10            9.6          1\n3         ROW  10-15           28.9          1\n4         ROW  15-20           70.6          1\n5         ROW  20-25           91.1          1\n6         ROW  25-30          110.5          1\n\n\n\n\n\nMultiply the ’Cumulative total sequestration” data (cumTotalCarbon) by the species proportion and estimated area.\n\nPythonR\n\n\n\ndf[\"cumTotalCarbonSite (A)\"] = df[\"cumTotalCarbon\"] * df[\"proportion\"] * wccEstArea\ndf.head()\n\n  speciesCode  period  cumTotalCarbon  proportion  cumTotalCarbonSite (A)\n0         ROW     0-5             2.7           1                    32.4\n1         ROW    5-10             9.6           1                   115.2\n2         ROW   10-15            28.9           1                   346.8\n3         ROW   15-20            70.6           1                   847.2\n4         ROW   20-25            91.1           1                  1093.2\n\n\n\n\n\ndf <- df |>\n    dplyr::mutate(\"cumTotalCarbonSite (A)\" = cumTotalCarbon * proportion * wccEstArea)\ndf |> head()\n\n  speciesCode period cumTotalCarbon proportion cumTotalCarbonSite (A)\n1         ROW    0-5            2.7          1                   32.4\n2         ROW   5-10            9.6          1                  115.2\n3         ROW  10-15           28.9          1                  346.8\n4         ROW  15-20           70.6          1                  847.2\n5         ROW  20-25           91.1          1                 1093.2\n6         ROW  25-30          110.5          1                 1326.0\n\n\n\n\n\nSum across all species.\n\nPythonR\n\n\n\ndf = df.drop(columns = [\"speciesCode\", \"cumTotalCarbon\", \"proportion\"])\ndf = df.set_index(\"period\")\ndf.sum(axis = 0).to_frame()\n\n                              0\ncumTotalCarbonSite (A)  77065.2\n\ndf = df.reset_index()\ndf.head()\n\n   period  cumTotalCarbonSite (A)\n0     0-5                    32.4\n1    5-10                   115.2\n2   10-15                   346.8\n3   15-20                   847.2\n4   20-25                  1093.2\n\n\n\n\n\ndf <- df |>\n    dplyr::select(-speciesCode, -cumTotalCarbon, -proportion) |>\n    dplyr::group_by(period) |>\n    dplyr::summarise(`cumTotalCarbonSite (A)` = sum(`cumTotalCarbonSite (A)`))\ndf |> head()\n\n# A tibble: 6 × 2\n  period   `cumTotalCarbonSite (A)`\n  <chr>                       <dbl>\n1 \"  0-5\"                      32.4\n2 \"  5-10\"                    115. \n3 \" 10-15\"                    347. \n4 \" 15-20\"                    847. \n5 \" 20-25\"                   1093. \n6 \" 25-30\"                   1326  \n\n\n\n\n\nAdd a 20% buffer by multiplying the Cumulative total sequestration for the site by 0.8\n\nPythonR\n\n\n\ndf[\"cumTotalCarbonSiteReduced (B)\"] = df[\"cumTotalCarbonSite (A)\"] * 0.8\ndf.head()\n\n   period  cumTotalCarbonSite (A)  cumTotalCarbonSiteReduced (B)\n0     0-5                    32.4                          25.92\n1    5-10                   115.2                          92.16\n2   10-15                   346.8                         277.44\n3   15-20                   847.2                         677.76\n4   20-25                  1093.2                         874.56\n\n\n\n\n\ndf <- df |>\n    dplyr::mutate(\"cumTotalCarbonSiteReduced (B)\" = `cumTotalCarbonSite (A)` * 0.8)\ndf |> head()\n\n# A tibble: 6 × 3\n  period   `cumTotalCarbonSite (A)` `cumTotalCarbonSiteReduced (B)`\n  <chr>                       <dbl>                           <dbl>\n1 \"  0-5\"                      32.4                            25.9\n2 \"  5-10\"                    115.                             92.2\n3 \" 10-15\"                    347.                            277. \n4 \" 15-20\"                    847.                            678. \n5 \" 20-25\"                   1093.                            875. \n6 \" 25-30\"                   1326                            1061. \n\n\n\n\n\nRetrieve the total establishment emissions for the selected spacing and add to the dataframe.\n\nPythonR\n\n\n\ntotalEstablishmentC = baseline_WCCEstablishment[(baseline_WCCEstablishment.seedlingSpacing == 1.5) & (baseline_WCCEstablishment.variable == \"total\")]\ntotalEstablishmentC = totalEstablishmentC.drop(columns = [\"seedlingSpacing\", \"variable\"]).reset_index(drop = True)\ntotalEstablishmentC = totalEstablishmentC.rename(columns = {\"totalEmissions\": \"establishmentCarbonLoss (C)\"})\ndf[\"establishmentCarbonLoss (C)\"] = totalEstablishmentC._get_value(0, 0, takeable = True)\ndf.head()\n\n   period  ...  establishmentCarbonLoss (C)\n0     0-5  ...                      -81.412\n1    5-10  ...                      -81.412\n2   10-15  ...                      -81.412\n3   15-20  ...                      -81.412\n4   20-25  ...                      -81.412\n\n[5 rows x 4 columns]\n\n\n\n\n\ntotalEstablishmentC = baseline_WCCEstablishment |>\n    dplyr::filter(seedlingSpacing == 1.5) |>\n    dplyr::filter(variable == \"total\") |>\n    dplyr::select(-seedlingSpacing, -variable) |>\n    dplyr::rename(\"establishmentCarbonLoss (C)\" = \"totalEmissions\") |>\n    dplyr::pull(\"establishmentCarbonLoss (C)\")\n\ndf <- df |>\n    dplyr::mutate(\"establishmentCarbonLoss (C)\" = totalEstablishmentC)\n\ndf |> head()\n\n# A tibble: 6 × 4\n  period   `cumTotalCarbonSite (A)` `cumTotalCarbonSiteReduced (B)` establishm…¹\n  <chr>                       <dbl>                           <dbl>        <dbl>\n1 \"  0-5\"                      32.4                            25.9        -81.4\n2 \"  5-10\"                    115.                             92.2        -81.4\n3 \" 10-15\"                    347.                            277.         -81.4\n4 \" 15-20\"                    847.                            678.         -81.4\n5 \" 20-25\"                   1093.                            875.         -81.4\n6 \" 25-30\"                   1326                            1061.         -81.4\n# … with abbreviated variable name ¹​`establishmentCarbonLoss (C)`\n\n\n\n\n\nCalculate soil carbon flux by summing soil loss and soil sequestration data . To do this first identify the % topsoil carbon (0-30cm) loss associated with the method of site preparation and soil type.\n\nPythonR\n\n\n\nestablishmentMethods = pandas.DataFrame.from_dict(data = {\"MethodSitePrep\": [\"Negligible Disturbance\", \"Low Disturbance\", \"Medium Disturbance\", \"High Disturbance\", \"Very High Disturbance\"],\n                                                          \"Organomineral\": [0, 5, 10, 20, 40],\n                                                          \"Mineral\": [0, 0, 2, 5, 10]})\n\nestablishmentMethods = establishmentMethods.set_index(\"MethodSitePrep\")\npercSoilLoss = establishmentMethods._get_value(\"Medium Disturbance\", \"Mineral\")\n\npercSoilLoss\n\n2\n\n\n\n\n\nestablishmentMethods <- data.frame(\"MethodSitePrep\" = c(\"Negligible Disturbance\", \"Low Disturbance\", \"Medium Disturbance\", \"High Disturbance\", \"Very High Disturbance\"),\n                                   \"Organomineral\" = c(0, 5, 10, 20, 40),\n                                   \"Mineral\" = c(0, 0, 2, 5, 10))\n\npercSoilLoss <- establishmentMethods |>\n    dplyr::filter(MethodSitePrep == \"Medium Disturbance\") |>\n    dplyr::pull(Mineral)\n\npercSoilLoss\n\n[1] 2\n\n\n\n\n\nRetrieve the soil carbon lost for the selected country, previous land use, and % topsoil carbon (0-30cm) loss identified above.\n\nPythonR\n\n\n\nsoilCLoss = baseline_WCCSoilLoss[baseline_WCCSoilLoss[\"topsoilCarbonSubtract\"] == percSoilLoss]\nsoilCLoss = soilCLoss.set_index(\"Country\")\nsoilCLoss = soilCLoss._get_value(\"England\", \"Arable\")\n\nsoilCLoss\n\n-5.133333333\n\n\n\n\n\nsoilCLoss <- baseline_WCCSoilLoss |>\n    dplyr::filter(topsoilCarbonSubtract == percSoilLoss,\n                  Country == \"England\") |>\n    dplyr::pull(Arable)\n\nsoilCLoss\n\n[1] -5.133333\n\n\n\n\n\nCalculate the total net soil carbon flux.\n\nPythonR\n\n\n\nsoilCFlux = baseline_WCCSoilSeq\nsoilCFlux[\"cumSoilLoss\"] = soilCLoss\nsoilCFlux[\"cumSoilCarbonFlux (D)\"] = soilCFlux[\"cumSoilLoss\"] + soilCFlux[\"cumSoilSeq\"]\nsoilCFlux = soilCFlux.drop(columns = [\"cumSoilSeq\", \"cumSoilLoss\"])\n\nsoilCFlux.head()\n\n   period  cumSoilCarbonFlux (D)\n0     0-5               0.366667\n1    5-10               5.866667\n2   10-15              11.366667\n3   15-20              16.866667\n4   20-25              22.366667\n\n\n\n\n\nsoilCFlux <- baseline_WCCSoilSeq |>\n    dplyr::mutate(\"cumSoilLoss\" = soilCLoss,\n                  \"cumSoilCarbonFlux (D)\" = cumSoilLoss + cumSoilSeq) |>\n    dplyr::select(-cumSoilSeq, -cumSoilLoss)\n\nsoilCFlux |> head()\n\n  period cumSoilCarbonFlux (D)\n1    0-5             0.3666667\n2   5-10             5.8666667\n3  10-15            11.3666667\n4  15-20            16.8666667\n5  20-25            22.3666667\n6  25-30            27.8666667\n\n\n\n\n\nMerge soil carbon flux.\n\nPythonR\n\n\n\ndf = df.merge(soilCFlux, on = [\"period\"])\n\ndf.head()\n\n   period  ...  cumSoilCarbonFlux (D)\n0     0-5  ...               0.366667\n1    5-10  ...               5.866667\n2   10-15  ...              11.366667\n3   15-20  ...              16.866667\n4   20-25  ...              22.366667\n\n[5 rows x 5 columns]\n\n\n\n\n\ndf <- df |>\n    dplyr::left_join(soilCFlux, on = \"period\")\n\nJoining, by = \"period\"\n\ndf |> head()\n\n# A tibble: 6 × 5\n  period   `cumTotalCarbonSite (A)` cumTotalCarbonSiteReduced …¹ estab…² cumSo…³\n  <chr>                       <dbl>                        <dbl>   <dbl>   <dbl>\n1 \"  0-5\"                      32.4                         25.9   -81.4   0.367\n2 \"  5-10\"                    115.                          92.2   -81.4   5.87 \n3 \" 10-15\"                    347.                         277.    -81.4  11.4  \n4 \" 15-20\"                    847.                         678.    -81.4  16.9  \n5 \" 20-25\"                   1093.                         875.    -81.4  22.4  \n6 \" 25-30\"                   1326                         1061.    -81.4  27.9  \n# … with abbreviated variable names ¹​`cumTotalCarbonSiteReduced (B)`,\n#   ²​`establishmentCarbonLoss (C)`, ³​`cumSoilCarbonFlux (D)`\n\n\n\n\n\nCalculate the total cumulative carbon sequestration.\n\nPythonR\n\n\n\ndf[\"totalProjectCarbonSeq (E)\"] = df[\"cumTotalCarbonSiteReduced (B)\"] + df[\"establishmentCarbonLoss (C)\"] + df[\"cumSoilCarbonFlux (D)\"]\n\ndf.head()\n\n   period  ...  totalProjectCarbonSeq (E)\n0     0-5  ...                 -55.125333\n1    5-10  ...                  16.614667\n2   10-15  ...                 207.394667\n3   15-20  ...                 613.214667\n4   20-25  ...                 815.514667\n\n[5 rows x 6 columns]\n\n\n\n\n\ndf <- df |>\n    dplyr::mutate(\"totalProjectCarbonSeq (E)\" = `cumTotalCarbonSiteReduced (B)` + `establishmentCarbonLoss (C)` + `cumSoilCarbonFlux (D)`)\n\ndf |> head()\n\n# A tibble: 6 × 6\n  period   `cumTotalCarbonSite (A)` cumTotalCarbonSite…¹ estab…² cumSo…³ total…⁴\n  <chr>                       <dbl>                <dbl>   <dbl>   <dbl>   <dbl>\n1 \"  0-5\"                      32.4                 25.9   -81.4   0.367   -55.1\n2 \"  5-10\"                    115.                  92.2   -81.4   5.87     16.6\n3 \" 10-15\"                    347.                 277.    -81.4  11.4     207. \n4 \" 15-20\"                    847.                 678.    -81.4  16.9     613. \n5 \" 20-25\"                   1093.                 875.    -81.4  22.4     816. \n6 \" 25-30\"                   1326                 1061.    -81.4  27.9    1007. \n# … with abbreviated variable names ¹​`cumTotalCarbonSiteReduced (B)`,\n#   ²​`establishmentCarbonLoss (C)`, ³​`cumSoilCarbonFlux (D)`,\n#   ⁴​`totalProjectCarbonSeq (E)`\n\n\n\n\n\nOptionally, add Baseline and Leakage data then calculate the adjusted, net total project carbon sequestration.\n\nPythonR\n\n\n\ndf[\"Baseline (F)\"] = 0\ndf[\"Leakage (G)\"] = 0\ndf[\"netTotalProjectCarbonSeq (H)\"] = df[\"totalProjectCarbonSeq (E)\"]+ df[\"Baseline (F)\"] + df[\"Leakage (G)\"]\n\ndf.head()\n\n   period  cumTotalCarbonSite (A)  ...  Leakage (G)  netTotalProjectCarbonSeq (H)\n0     0-5                    32.4  ...            0                    -55.125333\n1    5-10                   115.2  ...            0                     16.614667\n2   10-15                   346.8  ...            0                    207.394667\n3   15-20                   847.2  ...            0                    613.214667\n4   20-25                  1093.2  ...            0                    815.514667\n\n[5 rows x 9 columns]\n\n\n\n\n\ndf <- df |>\n    dplyr::mutate(\"Baseline (F)\" = 0, \"Leakage (G)\" = 0) |>\n    dplyr::mutate(\"netTotalProjectCarbonSeq (H)\" = `totalProjectCarbonSeq (E)` + `Baseline (F)` + `Leakage (G)`)\n\ndf |> head()\n\n# A tibble: 6 × 9\n  period   cumTotalCar…¹ cumTo…² estab…³ cumSo…⁴ total…⁵ Basel…⁶ Leaka…⁷ netTo…⁸\n  <chr>            <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>\n1 \"  0-5\"           32.4    25.9   -81.4   0.367   -55.1       0       0   -55.1\n2 \"  5-10\"         115.     92.2   -81.4   5.87     16.6       0       0    16.6\n3 \" 10-15\"         347.    277.    -81.4  11.4     207.        0       0   207. \n4 \" 15-20\"         847.    678.    -81.4  16.9     613.        0       0   613. \n5 \" 20-25\"        1093.    875.    -81.4  22.4     816.        0       0   816. \n6 \" 25-30\"        1326    1061.    -81.4  27.9    1007.        0       0  1007. \n# … with abbreviated variable names ¹​`cumTotalCarbonSite (A)`,\n#   ²​`cumTotalCarbonSiteReduced (B)`, ³​`establishmentCarbonLoss (C)`,\n#   ⁴​`cumSoilCarbonFlux (D)`, ⁵​`totalProjectCarbonSeq (E)`, ⁶​`Baseline (F)`,\n#   ⁷​`Leakage (G)`, ⁸​`netTotalProjectCarbonSeq (H)`\n\n\n\n\n\nCalculate the claimable carbon sequestration by adding a final 20% buffer.\n\nPythonR\n\n\n\ndf[\"claimableCarbonSeq (J)\"] = df[\"netTotalProjectCarbonSeq (H)\"] * 0.8\ndf.head()\n\n   period  ...  claimableCarbonSeq (J)\n0     0-5  ...              -44.100267\n1    5-10  ...               13.291733\n2   10-15  ...              165.915733\n3   15-20  ...              490.571733\n4   20-25  ...              652.411733\n\n[5 rows x 10 columns]\n\n\n\n\n\ndf <- df |>\n    dplyr::mutate(\"claimableCarbonSeq (J)\" = `netTotalProjectCarbonSeq (H)` * 0.8)\n\ndf |> head()\n\n# A tibble: 6 × 10\n  period cumTo…¹ cumTo…² estab…³ cumSo…⁴ total…⁵ Basel…⁶ Leaka…⁷ netTo…⁸ claim…⁹\n  <chr>    <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>\n1 \"  0-…    32.4    25.9   -81.4   0.367   -55.1       0       0   -55.1   -44.1\n2 \"  5-…   115.     92.2   -81.4   5.87     16.6       0       0    16.6    13.3\n3 \" 10-…   347.    277.    -81.4  11.4     207.        0       0   207.    166. \n4 \" 15-…   847.    678.    -81.4  16.9     613.        0       0   613.    491. \n5 \" 20-…  1093.    875.    -81.4  22.4     816.        0       0   816.    652. \n6 \" 25-…  1326    1061.    -81.4  27.9    1007.        0       0  1007.    806. \n# … with abbreviated variable names ¹​`cumTotalCarbonSite (A)`,\n#   ²​`cumTotalCarbonSiteReduced (B)`, ³​`establishmentCarbonLoss (C)`,\n#   ⁴​`cumSoilCarbonFlux (D)`, ⁵​`totalProjectCarbonSeq (E)`, ⁶​`Baseline (F)`,\n#   ⁷​`Leakage (G)`, ⁸​`netTotalProjectCarbonSeq (H)`, ⁹​`claimableCarbonSeq (J)`\n\n\n\n\n\nCalculate the mean claimable carbon sequestration per hectare, in tCO2e per ha per year\n\nPythonR\n\n\n\ndf[\"meanClaimableCarbonSeqPerHa (K)\"] = df[\"claimableCarbonSeq (J)\"] / wccEstArea\ndf.head()\n\n   period  ...  meanClaimableCarbonSeqPerHa (K)\n0     0-5  ...                        -3.675022\n1    5-10  ...                         1.107644\n2   10-15  ...                        13.826311\n3   15-20  ...                        40.880978\n4   20-25  ...                        54.367644\n\n[5 rows x 11 columns]\n\n\n\n\n\ndf <- df |>\n    dplyr::mutate(\"meanClaimableCarbonSeqPerHa (K)\" = `claimableCarbonSeq (J)` / wccEstArea)\n\ndf |> head()\n\n# A tibble: 6 × 11\n  period cumTo…¹ cumTo…² estab…³ cumSo…⁴ total…⁵ Basel…⁶ Leaka…⁷ netTo…⁸ claim…⁹\n  <chr>    <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>\n1 \"  0-…    32.4    25.9   -81.4   0.367   -55.1       0       0   -55.1   -44.1\n2 \"  5-…   115.     92.2   -81.4   5.87     16.6       0       0    16.6    13.3\n3 \" 10-…   347.    277.    -81.4  11.4     207.        0       0   207.    166. \n4 \" 15-…   847.    678.    -81.4  16.9     613.        0       0   613.    491. \n5 \" 20-…  1093.    875.    -81.4  22.4     816.        0       0   816.    652. \n6 \" 25-…  1326    1061.    -81.4  27.9    1007.        0       0  1007.    806. \n# … with 1 more variable: `meanClaimableCarbonSeqPerHa (K)` <dbl>, and\n#   abbreviated variable names ¹​`cumTotalCarbonSite (A)`,\n#   ²​`cumTotalCarbonSiteReduced (B)`, ³​`establishmentCarbonLoss (C)`,\n#   ⁴​`cumSoilCarbonFlux (D)`, ⁵​`totalProjectCarbonSeq (E)`, ⁶​`Baseline (F)`,\n#   ⁷​`Leakage (G)`, ⁸​`netTotalProjectCarbonSeq (H)`, ⁹​`claimableCarbonSeq (J)`"
  },
  {
    "objectID": "index.html#ecological-site-classification-esc-api-endpoints",
    "href": "index.html#ecological-site-classification-esc-api-endpoints",
    "title": "Outline",
    "section": "Ecological Site Classification (ESC) API endpoints",
    "text": "Ecological Site Classification (ESC) API endpoints\nThe ESC API end points are built in FastAPI, the OpenAPI documentation can be found here."
  },
  {
    "objectID": "index.html#esc",
    "href": "index.html#esc",
    "title": "FR DSS API Documentation",
    "section": "ESC",
    "text": "ESC\n   \nThe Ecological Site Classification (ESC) API endpoints are constructed using FastAPI, the OpenAPI documentation can be found here.\nCurrent endpoints include:\n\nESCSiteData\nESCTreeResults\nESCTreeModel\nESCWCC\n\nThe current version is v0.805, the API is licenced under the Open Government Licence (OGL) version 3."
  },
  {
    "objectID": "UsingESCSiteData.html",
    "href": "UsingESCSiteData.html",
    "title": "Using the ESCSiteData API",
    "section": "",
    "text": "This notebook details how to call the ESCSiteData API endpoint to retrieve modelled environmental dose values for a given location and climate scenario."
  },
  {
    "objectID": "UsingESCSiteData.html#import-required-packages",
    "href": "UsingESCSiteData.html#import-required-packages",
    "title": "Using the ESCSiteData API",
    "section": "Import required packages",
    "text": "Import required packages\n\nPythonR\n\n\n\nimport requests\nimport json\nimport pandas\npandas.options.mode.chained_assignment = None\n\n\n\n\nlibrary(httr)\nlibrary(jsonlite)\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union"
  },
  {
    "objectID": "UsingESCSiteData.html#compose-api-request",
    "href": "UsingESCSiteData.html#compose-api-request",
    "title": "Using the ESCSiteData API",
    "section": "Compose API request",
    "text": "Compose API request\nEstablish API POST request URL\n\nPythonR\n\n\n\nbase_url = \"http://209.97.132.245:8000/ESCSiteData/\"\n\n\n\n\nbase_url <- \"http://209.97.132.245:8000/ESCSiteData/\"\n\n\n\n\nSet the longitude (lon) and latitude (lat) in EPSG:3857.\n\nPythonR\n\n\n\nlon = -141102.7542\nlat = 6830259.9735\n\n\n\n\nlon <- -141102.7542\nlat <- 6830259.9735\n\n\n\n\nEstablish the climate model (climateModel), climate scenario/s (climateScenList) and climate years (climateYearList).\n\nclimateModel:str\n\nA string, either “UKCP09” or “UKCP18-1km”\n\nclimateScenList:List\n\nFor “UKCP09” a list containing any of: [“A1b3q0”]\nFor “UKCP18-1km” a list containing any of: [“RCP2.6”, “RCP4.5”, “RCP6.0”, “RCP8.5”]\n\nclimateYearList:List\n\nFor “UKCP09” a list containing any of the following timeslices: [“1961_1990”, “2000_2020”, “2010_2030”, “2020_2040”, “2030_2050”, “2040_2060”, “2050_2070”, “2060_2080”, “2070_2090”]\nFor “UKCP18-1km” a list containing any of the following timeslices: [“1980_2000”, “1990_2010”, “2000_2020”, “2010_2030”, “2020_2040”, “2030_2050”, “2040_2060”, “2050_2070”, “2060_2080”]\n\n\n\nPythonR\n\n\n\nclimateModel = \"UKCP18-1km\"\nclimateScenList = [\"RCP2.6\", \"RCP8.5\"]\nclimateYearList = [\"1980_2000\", \"2060_2080\"]\n\n\n\n\nclimateModel <- \"UKCP18-1km\"\nclimateScenList <- list(\"RCP2.6\", \"RCP8.5\")\nclimateYearList <- list(\"1980_2000\", \"2060_2080\")\n\n\n\n\nCompose the request body.\n\nPythonR\n\n\n\nreq_body = {\"lon\": lon, \"lat\": lat, \n            \"climateModel\": climateModel,\n            \"climateScenList\": climateScenList, \n            \"climateYearList\": climateYearList}\n\n\n\n\nreq_list <- list(\"lon\" = lon, \"lat\" = lat, \n                 \"climateModel\" = climateModel,\n                 \"climateScenList\" = climateScenList, \n                 \"climateYearList\" = climateYearList)\n\nreq_body <- jsonlite::toJSON(req_list, auto_unbox = TRUE)"
  },
  {
    "objectID": "UsingESCSiteData.html#make-the-api-call",
    "href": "UsingESCSiteData.html#make-the-api-call",
    "title": "Using the ESCSiteData API",
    "section": "Make the API call",
    "text": "Make the API call\nCall the ESCSiteData API.\n\nPythonR\n\n\n\nESCSiteDataresponse = requests.post(url = base_url, json = req_body)\nESCSiteDataresponse.status_code == 200\n\nTrue\n\n\n\n\n\nESCSiteDataresponse <- httr::POST(url = base_url, body = req_body)\nESCSiteDataresponse$status_code == 200\n\n[1] TRUE\n\n\n\n\n\nEstablish a function to deserialize the json response into a nested dictionary or nested list.\n\nPythonR\n\n\n\ndef deserialize(responseJson:str) -> dict:\n\n    responseDataFrame = pandas.DataFrame.from_dict(data = json.loads(responseJson))\n            \n    return responseDataFrame\n\n\n\n\ndeserialize <- function(responseJson){\n\n    responseContent <- httr::content(responseJson)\n    responsedf <- jsonlite::fromJSON(responseContent)\n\n    return(responsedf)\n}\n\n\n\n\nCall the deserializeResults function on the ESC API output.\n\nPythonR\n\n\n\nESCSiteDataresponse_df = deserialize(responseJson = ESCSiteDataresponse.json())\n\n\n\n\nESCSiteDataresponse_df <- deserialize(responseJson = ESCSiteDataresponse)"
  },
  {
    "objectID": "UsingESCSiteData.html#explore-results",
    "href": "UsingESCSiteData.html#explore-results",
    "title": "Using the ESCSiteData API",
    "section": "Explore results",
    "text": "Explore results\nThe object produced (ESCSiteDataresponse_df) contains the environmental dose variables obtained from the modelled data for a given set of climate parameters. For more information on the underlying method see the Forest Research Bulletin 124 and the Forest Research Technical Paper 20. Column definitions:\n\nclimateScen - climate scenario.\nclimateYear - climate year.\nSMR - soil moisture regime.\nSNR - soil nutrient regime.\nAT - accumulated temperature.\nCT - continentality.\nDAMS - detailed aspect method of scoring.\nMD - moisture deficit.\n\n\nPythonR\n\n\n\nESCSiteDataresponse_df\n\n  climateScen climateYear  SMR  ...         CT       DAMS          MD\n0      RCP2.6   1980_2000    3  ...  10.868632  12.258021  178.133179\n1      RCP2.6   2060_2080    3  ...  10.868632  12.258021  261.113190\n2      RCP8.5   1980_2000    3  ...  10.868632  12.258021  178.133179\n3      RCP8.5   2060_2080    3  ...  10.868632  12.258021  361.762329\n\n[4 rows x 8 columns]\n\n\n\n\n\nESCSiteDataresponse_df\n\n  climateScen climateYear SMR SNR       AT       CT     DAMS       MD\n1      RCP2.6   1980_2000   3   5 1694.749 10.86863 12.25802 178.1332\n2      RCP2.6   2060_2080   3   5 2292.860 10.86863 12.25802 261.1132\n3      RCP8.5   1980_2000   3   5 1694.749 10.86863 12.25802 178.1332\n4      RCP8.5   2060_2080   3   5 2941.911 10.86863 12.25802 361.7623"
  },
  {
    "objectID": "UsingESCTreeModel.html",
    "href": "UsingESCTreeModel.html",
    "title": "Using the ESCTreeModel API",
    "section": "",
    "text": "This notebook details how to call the ESCTreeModel API endpoint to retrieve tree species suitability metrics for a given location."
  },
  {
    "objectID": "UsingESCTreeModel.html#import-required-packages",
    "href": "UsingESCTreeModel.html#import-required-packages",
    "title": "Using the ESCTreeModel API",
    "section": "Import required packages",
    "text": "Import required packages\n\nPythonR\n\n\n\nimport requests\nimport json\nimport pandas\nimport pprint\npandas.options.mode.chained_assignment = None\n\n\n\n\nlibrary(httr)\n\nWarning: package 'httr' was built under R version 4.2.3\n\nlibrary(jsonlite)\nlibrary(dplyr)\n\nWarning: package 'dplyr' was built under R version 4.2.3\n\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union"
  },
  {
    "objectID": "UsingESCTreeModel.html#compose-api-request",
    "href": "UsingESCTreeModel.html#compose-api-request",
    "title": "Using the ESCTreeModel API",
    "section": "Compose API request",
    "text": "Compose API request\nEstablish API POST request URL\n\nPythonR\n\n\n\nbase_url = \"http://209.97.132.245:8000/ESCTreeModel/\"\n\n\n\n\nbase_url <- \"http://209.97.132.245:8000/ESCTreeModel/\"\n\n\n\n\nSet the longitude (lon) and latitude (lat) in EPSG:3857.\n\nPythonR\n\n\n\nlon = -141102.7542\nlat = 6830259.9735\n\n\n\n\nlon <- -141102.7542\nlat <- 6830259.9735\n\n\n\n\nEstablish the site modifier options.\n\nawcAdj:bool\n\nTrue\nFalse\n\ndrainage:int\n\n0 = None.\n1 = Drainage installed.\n\nbrash:int\n\n0 = None (new planting).\n1 = Fresh brash (<18 months).\n2 = Brash (>18 months).\n\nfertiliser:int\n\n0 = None.\n1 = Fertiliser applied.\n\nexposure:int\n\n0 = None.\n1 = Exposed ridge/Coastal zone.\n2 = Local shelter/Less exposed/Underplanting.\n\n\n\nPythonR\n\n\n\nawcAdj = True\ndrainage = 0\nbrash = 0\nfertiliser = 0\nexposure = 0\n\n\n\n\nawcAdj <- TRUE\ndrainage <- 0\nbrash <- 0\nfertiliser <- 0\nexposure <- 0\n\n\n\n\nEstablish the climate model (climateModel), climate scenario/s (climateScenList), climate years (climateYearList), species group filter (filter), and ESC version (escVersion).\n\nclimateModel:str\n\nA string, either “UKCP09” or “UKCP18-1km”\n\nclimateScenList:List\n\nFor “UKCP09” a list containing any of: [“A1b3q0”]\nFor “UKCP18-1km” a list containing any of: [“RCP2.6”, “RCP4.5”, “RCP6.0”, “RCP8.5”]\n\nclimateYearList:List\n\nFor “UKCP09” a list containing any of the following timeslices: [“1961_1990”, “2000_2020”, “2010_2030”, “2020_2040”, “2030_2050”, “2040_2060”, “2050_2070”, “2060_2080”, “2070_2090”]\nFor “UKCP18-1km” a list containing any of the following timeslices: [“1980_2000”, “1990_2010”, “2000_2020”, “2010_2030”, “2020_2040”, “2030_2050”, “2040_2060”, “2050_2070”, “2060_2080”]\n\nfilter:int\n\n0 = No filter\n1 = Conifers only\n2 = Broadleaves only\n3 = Natives only\n4 = Non-natives only\n\nescVersion:str\n\n“4.33” = “4.33”\n\n\n\nPythonR\n\n\n\nclimateModel = \"UKCP18-1km\"\nclimateScenList = [\"RCP2.6\", \"RCP8.5\"]\nclimateYearList = [\"1980_2000\", \"2060_2080\"]\nfilter = 0\nescVersion = \"4.33\"\n\n\n\n\nclimateModel <- \"UKCP18-1km\"\nclimateScenList <- list(\"RCP2.6\", \"RCP8.5\")\nclimateYearList <- list(\"1980_2000\", \"2060_2080\")\nfilter <- 0\nescVersion <- \"4.33\"\n\n\n\n\nEstablish the manual Soil Moisture Regime (SMR) and Soil Nutrient Regime (SNR) modifier values. Enter None, or omit from the request body (req_body) below if you do not wish to manually alter the values.\n\nsmr:float, any number between 0 and 8. Indicative categorical values are as follows:\n\n1 = Very Wet\n2 = Wet\n3 = Moist\n4 = Moist\n5 = Fresh\n6 = Slightly Dry\n7 = Moderately Dry\n8 = Very Dry\n\nsnr:float, any number between 0 and 6. Indicative categorical values are as follows:\n\n0 = Very Poor (VP1)\n0.5 = Very Poor (VP2)\n1 = Very Poor (VP3)\n1.5 = Very Poor - Poor\n2 = Poor\n3 = Medium\n4 = Rich\n5 = Very Rich\n6 = Carbonate\n\n\n\nPythonR\n\n\n\nsmr = None\nsnr = None\n\n\n\n\nsmr <- NA\nsnr <- NA\n\n\n\n\nCompose the request body. Optionally, you can accept the default values for all parameters apart from lon and lat by emitting the parameters from the request body (as shown in the commented out code below).\n\nPythonR\n\n\n\n# req_body = {\"lon\": lon, \"lat\": lat}\n\nreq_body = {\"lon\": lon, \"lat\": lat,\n            \"awcAdj\": awcAdj,\n            \"drainage\": drainage, \"brash\": brash, \"fertiliser\": fertiliser, \"exposure\": exposure, \n            \"climateModel\": climateModel,\n            \"climateScenList\": climateScenList, \"climateYearList\": climateYearList,\n            \"filter\": filter, \"escVersion\": escVersion,\n            \"smr\": smr, \"snr\": snr}\n\n\n\n\n# req_list = list(\"smr\" = smr, \"snr\" = snr)\n\nreq_list <- list(\"lon\" = lon, \"lat\" = lat,\n                 \"awcAdj\" = awcAdj,\n                 \"drainage\" = drainage, \"brash\" = brash, \"fertiliser\" =  fertiliser, \"exposure\" = exposure, \n                 \"climateModel\" = climateModel,\n                 \"climateScenList\" = climateScenList, \"climateYearList\" = climateYearList,\n                 \"filter\" = filter, \"escVersion\" = escVersion,\n                 \"smr\" = smr, \"snr\" = snr)\n\nreq_body <- jsonlite::toJSON(req_list, auto_unbox = TRUE)"
  },
  {
    "objectID": "UsingESCTreeModel.html#make-the-api-call",
    "href": "UsingESCTreeModel.html#make-the-api-call",
    "title": "Using the ESCTreeModel API",
    "section": "Make the API call",
    "text": "Make the API call\nCall the ESCTreeModel API\n\nPythonR\n\n\n\nESCTreeModelresponse = requests.post(url = base_url, json = req_body)\nESCTreeModelresponse.status_code == 200\n\nTrue\n\n\n\n\n\nESCTreeModelresponse <- httr::POST(url = base_url, body = req_body)\nESCTreeModelresponse$status_code == 200\n\n[1] TRUE\n\n\n\n\n\nEstablish a function to deserialize the json response into a nested dictionary or nested list.\n\nPythonR\n\n\n\ndef deserialize(responseJson:str) -> dict:\n    \n    loadedJson = json.loads(responseJson)\n\n    for k,v in loadedJson.items():\n        for w,s in loadedJson[k].items():\n            for t,c in loadedJson[k][w].items():\n                loadedJson[k][w][t] = pandas.DataFrame.from_dict(data = json.loads(c))\n            \n    return loadedJson\n\n\n\n\ndeserialize <- function(responseJson){\n\n    responseContent <- httr::content(responseJson)\n    responseContent <- jsonlite::fromJSON(responseContent)\n\n    for(i in names(responseContent)){\n        for(j in names(responseContent[[i]])){\n            for(k in names(responseContent[[i]][[j]])){\n                responseContent[[i]][[j]][[k]] = jsonlite::fromJSON(responseContent[[i]][[j]][[k]])\n            }\n        }\n    }\n    return(responseContent)\n}\n\n\n\n\nCall the deserializeResults function on the ESC API output.\n\nPythonR\n\n\n\nESCTreeModelresponse_dict = deserialize(responseJson = ESCTreeModelresponse.json())\n\n\n\n\nESCTreeModelresponse_list <- deserialize(responseJson = ESCTreeModelresponse)"
  },
  {
    "objectID": "UsingESCTreeModel.html#explore-results",
    "href": "UsingESCTreeModel.html#explore-results",
    "title": "Using the ESCTreeModel API",
    "section": "Explore results",
    "text": "Explore results\nThe object produced (ESCTreeModelresponse_dict) is a nested dictionary with the following structure:\nESCresponse_dict (dict)\n├── Metadata (dict)\n│   ├── ESCMetadata (dict)\n│   │   ├── ESCTreeMetadata (DataFrame)\n│   ├── APIMetadata (dict)\n│   │   ├── DateTime (DataFrame)\n└───RCP2.6 (dict)\n│   ├── 1980_2000 (dict)\n│   │   ├── ESCDoseVals (DataFrame)\n│   │   ├── ESCResponseVals (DataFrame)\n│   │   ├── ESCSuitMetrics (DataFrame)\n│   ├── 2060_2080 (dict)\n│   │   ├── ESCDoseVals (DataFrame)\n│   │   ├── ESCResponseVals (DataFrame)\n│   │   ├── ESCSuitMetrics (DataFrame)\n└───RCP8.5 (dict)\n    ├── 1980_2000 (dict)\n    │   ├── ESCDoseVals (DataFrame)\n    │   ├── ESCResponseVals (DataFrame)\n    │   ├── ESCSuitMetrics (DataFrame)\n    ├── 2060_2080 (dict)\n    │   ├── ESCDoseVals (DataFrame)\n    │   ├── ESCResponseVals (DataFrame)\n    │   ├── ESCSuitMetrics (DataFrame)\n\n\nPythonR\n\n\n\npprint.pprint(ESCTreeModelresponse_dict, depth = 2)\n\n{'Metadata': {'APIMetadata': {...}, 'ESCMetadata': {...}},\n 'RCP2.6': {'1980_2000': {...}, '2060_2080': {...}},\n 'RCP8.5': {'1980_2000': {...}, '2060_2080': {...}}}\n\n\n\n\n\nstr(ESCTreeModelresponse_list, max.level = 3)\n\nList of 3\n $ Metadata:List of 2\n  ..$ ESCMetadata:List of 1\n  .. ..$ ESCTreeMetadata:'data.frame':  1 obs. of  1 variable:\n  ..$ APIMetadata:List of 1\n  .. ..$ DateTime:'data.frame': 1 obs. of  1 variable:\n $ RCP2.6  :List of 2\n  ..$ 1980_2000:List of 3\n  .. ..$ ESCDoseVals    :'data.frame':  10 obs. of  7 variables:\n  .. ..$ ESCResponseVals:'data.frame':  372 obs. of  3 variables:\n  .. ..$ ESCSuitMetrics :'data.frame':  62 obs. of  12 variables:\n  ..$ 2060_2080:List of 3\n  .. ..$ ESCDoseVals    :'data.frame':  10 obs. of  7 variables:\n  .. ..$ ESCResponseVals:'data.frame':  372 obs. of  3 variables:\n  .. ..$ ESCSuitMetrics :'data.frame':  62 obs. of  12 variables:\n $ RCP8.5  :List of 2\n  ..$ 1980_2000:List of 3\n  .. ..$ ESCDoseVals    :'data.frame':  10 obs. of  7 variables:\n  .. ..$ ESCResponseVals:'data.frame':  372 obs. of  3 variables:\n  .. ..$ ESCSuitMetrics :'data.frame':  62 obs. of  12 variables:\n  ..$ 2060_2080:List of 3\n  .. ..$ ESCDoseVals    :'data.frame':  10 obs. of  7 variables:\n  .. ..$ ESCResponseVals:'data.frame':  372 obs. of  3 variables:\n  .. ..$ ESCSuitMetrics :'data.frame':  62 obs. of  12 variables:\n\n\n\n\n\nAccess the ESC data frames from the API response for a given climate scenario using the following code.\nThe ESCDoseVals data frame contains the environmental dose variables obtained from the modelled data and/or manually entered, which are then modified by the aforementioned API query parameters drainage, brash, fertiliser, and exposure. For more information on the underlying method see the Forest Research Bulletin 124 and the Forest Research Technical Paper 20. Column definitions:\n\nSMR - soil moisture regime\nSNR - soil nutrient regime\nAT - accumulated temperature\nCT - continentality\nDAMS - direct aspect method of scoring\nMD - moisture deficit\nItem - The stage of modification of the environmental dose variable values.\n\n\nPythonR\n\n\n\nESCDoseVals = ESCTreeModelresponse_dict.get(\"RCP2.6\").get(\"1980_2000\").get(\"ESCDoseVals\")\nESCDoseVals\n\n   SMR  SNR           AT  ...       DAMS          MD                   Item\n0  3.0  5.0  1694.748779  ...  12.258021  178.133179          Values - Base\n1  NaN  NaN          NaN  ...        NaN         NaN        Values - Manual\n2  3.0  5.0  1694.748779  ...  12.258021  178.133179        Values - PreMod\n3  0.0  0.0     0.000000  ...   0.000000    0.000000    Modifier - Drainage\n4  0.0  0.0     0.000000  ...   0.000000    0.000000       Modifier - Brash\n5  0.0  0.0     0.000000  ...   0.000000    0.000000  Modifier - Fertiliser\n6  0.0  0.0     0.000000  ...   0.000000    0.000000    Modifier - Exposure\n7  3.0  5.0  1694.748779  ...  12.258021  178.133179        Values - preAWC\n8  0.0  0.0     0.000000  ...   0.000000  -46.000000         Modifier - AWC\n9  3.0  5.0  1694.748779  ...  12.258021  132.133179         Values - Final\n\n[10 rows x 7 columns]\n\n\n\n\n\nESCDoseVals = ESCTreeModelresponse_list$`RCP2.6`$`1980_2000`$ESCDoseVals\nESCDoseVals\n\n   SMR SNR       AT       CT     DAMS       MD                  Item\n1    3   5 1694.749 10.86863 12.25802 178.1332         Values - Base\n2   NA  NA       NA       NA       NA       NA       Values - Manual\n3    3   5 1694.749 10.86863 12.25802 178.1332       Values - PreMod\n4    0   0    0.000  0.00000  0.00000   0.0000   Modifier - Drainage\n5    0   0    0.000  0.00000  0.00000   0.0000      Modifier - Brash\n6    0   0    0.000  0.00000  0.00000   0.0000 Modifier - Fertiliser\n7    0   0    0.000  0.00000  0.00000   0.0000   Modifier - Exposure\n8    3   5 1694.749 10.86863 12.25802 178.1332       Values - preAWC\n9    0   0    0.000  0.00000  0.00000 -46.0000        Modifier - AWC\n10   3   5 1694.749 10.86863 12.25802 132.1332        Values - Final\n\n\n\n\n\nThe ESCResponseVals data frame contains data on the response of each tree species to each environmental dose metric. Column definitions:\n\nspeciesCode - The Forest Research species code for the species.\nmetric - The environmental dose variable (see above).\nresponse - The response of the tree species to the environmental dose variable. A unitless value between 0 and 1.\n\n\nPythonR\n\n\n\nESCResponseVals = ESCTreeModelresponse_dict.get(\"RCP2.6\").get(\"1980_2000\").get(\"ESCResponseVals\")\nESCResponseVals.head()\n\n  speciesCode metric  response\n0          AH     AT  1.000000\n1          AH     CT  1.000000\n2          AH   DAMS  0.964892\n3          AH     MD  1.000000\n4          AH    SMR  0.755714\n\n\n\n\n\nESCResponseVals = ESCTreeModelresponse_list$`RCP2.6`$`1980_2000`$ESCResponseVals\nESCResponseVals |> head()\n\n  speciesCode metric  response\n1          AH     AT 1.0000000\n2          AH     CT 1.0000000\n3          AH   DAMS 0.9648923\n4          AH     MD 1.0000000\n5          AH    SMR 0.7557143\n6          AH    SNR 1.0000000\n\n\n\n\n\nThe ESCSuitMetrics data frame contains a range of summary data relating to the suitability of each tree species based on the ESCResponseVals data. Column definitions:\n\nspeciesCode - The Forest Research species code for the species.\nspeciesScientific - The scientific name of the species.\nspeciesName - The common name of the species.\nmaxYC - The maximum yield class of that species\nthreat - Any major threats to that tree species which should be taken into account when considering planting that species.\nlimFactorInclAT - The limiting factor (metric with the lowest response) including AT.\nlimFactorInclATResponse - The response value for limiting factor (metric with the lowest response) including AT.\nlimFactorExclAT - The limiting factor (metric with the lowest response) excluding AT.\nlimFactorExclATResponse - The response value for limiting factor (metric with the lowest response) excluding AT.\nTimberSuitability - The suitability of that tree species for planting as a timber crop.\nEcologicalSuitability - The suitability of that tree species for planting.\nestimatedYC - The estimated yield class.\n\n\nPythonR\n\n\n\nESCSuitMetrics = ESCTreeModelresponse_dict.get(\"RCP2.6\").get(\"1980_2000\").get(\"ESCSuitMetrics\")\nESCSuitMetrics.head()\n\n  speciesCode   speciesScientific  ... EcologicalSuitability  estimatedYC\n0          AH  Fraxinus excelsior  ...              0.755714     9.068572\n1         AMA    Acer macrophylum  ...              0.000000     0.000000\n2         ASP     Populus tremula  ...              0.962698    11.552382\n3          BE     Fagus sylvatica  ...              0.305714     3.057143\n4         BPO       Populus nigra  ...              0.978258    15.652131\n\n[5 rows x 12 columns]\n\n\n\n\n\nESCSuitMetrics = ESCTreeModelresponse_list$`RCP2.6`$`1980_2000`$ESCSuitMetrics\nESCSuitMetrics |> head()\n\n  speciesCode  speciesScientific    speciesName maxYC  threat limFactorInclAT\n1          AH Fraxinus excelsior            Ash    12 Chalara             SMR\n2         AMA   Acer macrophylum Big leaf maple    12    None              CT\n3         ASP    Populus tremula          Aspen    12    None             SNR\n4          BE    Fagus sylvatica          Beech    10    None             SMR\n5         BPO      Populus nigra   Black poplar    16    None            DAMS\n6         CAR    Alnus glutinosa   Common alder    12    None            DAMS\n  limFactorInclATResponse limFactorExclAT limFactorExclATResponse\n1               0.7557143             SMR               0.7557143\n2               0.0000000              CT               0.0000000\n3               0.9626985             SNR               0.9626985\n4               0.3057143             SMR               0.3057143\n5               0.9782582            DAMS               0.9782582\n6               0.8542166            DAMS               0.8542166\n  TimberSuitability EcologicalSuitability estimatedYC\n1         0.7557143             0.7557143    9.068572\n2         0.0000000             0.0000000    0.000000\n3         0.9626985             0.9626985   11.552382\n4         0.3057143             0.3057143    3.057143\n5         0.9782582             0.9782582   15.652131\n6         0.8542166             0.8542166   10.250599"
  },
  {
    "objectID": "UsingESCTreeModel.html#calculate-claimable-carbon-sequestration",
    "href": "UsingESCTreeModel.html#calculate-claimable-carbon-sequestration",
    "title": "Using the ESCWCC API v0.5",
    "section": "Calculate Claimable Carbon Sequestration",
    "text": "Calculate Claimable Carbon Sequestration\nTo calculate the average total claimable sequestration by year in tCO2e/ha perform the following calculations using the API outputs.\nColumns suffixed with (<[A-Z]>) correspond to the columns CB to CM of Version 2.4 (March 2021) of the WCC excel tool.\nFirst, retrieve the WCC Biomass Carbon Lookup Table (BCLT) and Clearfell Max Seq Values (CMSV) values for selected species, e.g. Rowan (ROW).\n\nPythonR\n\n\n\nbaseline_WCCTreeValues_ROW = baseline_WCCTreeValues[baseline_WCCTreeValues[\"speciesCode\"] == \"ROW\"]\nbaseline_WCCTreeValues_ROW.head()\n\n     speciesCode wccCode  ... periodEnd clearfellCapCarbon\n1200         ROW     SAB  ...       NaN                NaN\n1201         ROW     SAB  ...       NaN                NaN\n1202         ROW     SAB  ...       NaN                NaN\n1203         ROW     SAB  ...       NaN                NaN\n1204         ROW     SAB  ...       NaN                NaN\n\n[5 rows x 22 columns]\n\n\n\n\n\nbaseline_WCCTreeValues_ROW <- baseline_WCCTreeValues |>\n    dplyr::filter(speciesCode == \"ROW\")\nbaseline_WCCTreeValues_ROW |> head()\n\n  speciesCode wccCode speciesScientific speciesName estimatedYC roundedYC\n1         ROW     SAB  Sorbus aucuparia       Rowan         2.4         2\n2         ROW     SAB  Sorbus aucuparia       Rowan         2.4         2\n3         ROW     SAB  Sorbus aucuparia       Rowan         2.4         2\n4         ROW     SAB  Sorbus aucuparia       Rowan         2.4         2\n5         ROW     SAB  Sorbus aucuparia       Rowan         2.4         2\n6         ROW     SAB  Sorbus aucuparia       Rowan         2.4         2\n  minWCCYC maxWCCYC finalYC spacing management period standingCarbonYr\n1        2       12       2     1.5    NO_thin    0-5               NA\n2        2       12       2     1.5    NO_thin   5-10               NA\n3        2       12       2     1.5    NO_thin  10-15               NA\n4        2       12       2     1.5    NO_thin  15-20               NA\n5        2       12       2     1.5    NO_thin  20-25               NA\n6        2       12       2     1.5    NO_thin  25-30               NA\n  debrisCarbonYr totalCarbonYr cumCarbon5Yr cumBiomassCarbon cumEmissionsMgmt\n1             NA            NA           NA               NA               NA\n2             NA            NA           NA               NA               NA\n3             NA            NA           NA               NA               NA\n4             NA            NA           NA               NA               NA\n5             NA            NA           NA               NA               NA\n6             NA            NA           NA               NA               NA\n  cumTotalCarbon remCarbonYr periodEnd clearfellCapCarbon\n1            2.7          NA        NA                 NA\n2            9.6          NA        NA                 NA\n3           28.9          NA        NA                 NA\n4           76.4          NA        NA                 NA\n5          120.6          NA        NA                 NA\n6          159.7          NA        NA                 NA\n\n\n\n\n\nSelect the BCLT and CMSV values for a particular spacing and management regime, e.g. 1.5m and Thinned.\n\nPythonR\n\n\n\nbaseline_WCCTreeValues_ROW_1p5_Thinned = baseline_WCCTreeValues_ROW[(baseline_WCCTreeValues_ROW.spacing == 1.5) & (baseline_WCCTreeValues_ROW.management == \"Thinned\")]\nbaseline_WCCTreeValues_ROW_1p5_Thinned.head()\n\n     speciesCode wccCode  ... periodEnd clearfellCapCarbon\n1240         ROW     SAB  ...       NaN                NaN\n1241         ROW     SAB  ...       NaN                NaN\n1242         ROW     SAB  ...       NaN                NaN\n1243         ROW     SAB  ...       NaN                NaN\n1244         ROW     SAB  ...       NaN                NaN\n\n[5 rows x 22 columns]\n\n\n\n\n\nbaseline_WCCTreeValues_ROW_1p5_Thinned <- baseline_WCCTreeValues_ROW |>\n    dplyr::filter(spacing == 1.5,\n                  management == \"Thinned\")\nbaseline_WCCTreeValues_ROW_1p5_Thinned |> head()\n\n  speciesCode wccCode speciesScientific speciesName estimatedYC roundedYC\n1         ROW     SAB  Sorbus aucuparia       Rowan         2.4         2\n2         ROW     SAB  Sorbus aucuparia       Rowan         2.4         2\n3         ROW     SAB  Sorbus aucuparia       Rowan         2.4         2\n4         ROW     SAB  Sorbus aucuparia       Rowan         2.4         2\n5         ROW     SAB  Sorbus aucuparia       Rowan         2.4         2\n6         ROW     SAB  Sorbus aucuparia       Rowan         2.4         2\n  minWCCYC maxWCCYC finalYC spacing management period standingCarbonYr\n1        2       12       2     1.5    Thinned    0-5               NA\n2        2       12       2     1.5    Thinned   5-10               NA\n3        2       12       2     1.5    Thinned  10-15               NA\n4        2       12       2     1.5    Thinned  15-20               NA\n5        2       12       2     1.5    Thinned  20-25               NA\n6        2       12       2     1.5    Thinned  25-30               NA\n  debrisCarbonYr totalCarbonYr cumCarbon5Yr cumBiomassCarbon cumEmissionsMgmt\n1             NA            NA           NA               NA               NA\n2             NA            NA           NA               NA               NA\n3             NA            NA           NA               NA               NA\n4             NA            NA           NA               NA               NA\n5             NA            NA           NA               NA               NA\n6             NA            NA           NA               NA               NA\n  cumTotalCarbon remCarbonYr periodEnd clearfellCapCarbon\n1            2.7          NA        NA                 NA\n2            9.6          NA        NA                 NA\n3           28.9          NA        NA                 NA\n4           70.6          NA        NA                 NA\n5           91.1          NA        NA                 NA\n6          110.5          NA        NA                 NA\n\n\n\n\n\nDefine a species composition for the site and join to a trimmed WCCTreeValues dataframe.\n\nPythonR\n\n\n\nspecies_composition = pandas.DataFrame.from_dict(data = {\"speciesCode\": \"ROW\", \"proportion\": [1]})\nspecies_composition\n\n  speciesCode  proportion\n0         ROW           1\n\n\n\n\n\nspecies_composition <- data.frame(\"speciesCode\" = \"ROW\", \"proportion\" = 1)\nspecies_composition\n\n  speciesCode proportion\n1         ROW          1\n\n\n\n\n\nForm a new data frame, select the relevant columns, and merge the species composition data frame.\n\nPythonR\n\n\n\ndf = baseline_WCCTreeValues_ROW_1p5_Thinned\ndf = df[[\"speciesCode\", \"period\", \"cumTotalCarbon\"]]\ndf = df.merge(species_composition, on = [\"speciesCode\"])\ndf.head()\n\n  speciesCode  period  cumTotalCarbon  proportion\n0         ROW     0-5             2.7           1\n1         ROW    5-10             9.6           1\n2         ROW   10-15            28.9           1\n3         ROW   15-20            70.6           1\n4         ROW   20-25            91.1           1\n\n\n\n\n\ndf <- baseline_WCCTreeValues_ROW_1p5_Thinned\ndf <- df |>\n    dplyr::select(speciesCode, period, cumTotalCarbon) |>\n    dplyr::left_join(species_composition, on = \"speciesCode\")\n\nJoining, by = \"speciesCode\"\n\ndf |> head()\n\n  speciesCode period cumTotalCarbon proportion\n1         ROW    0-5            2.7          1\n2         ROW   5-10            9.6          1\n3         ROW  10-15           28.9          1\n4         ROW  15-20           70.6          1\n5         ROW  20-25           91.1          1\n6         ROW  25-30          110.5          1\n\n\n\n\n\nMultiply the ’Cumulative total sequestration” data (cumTotalCarbon) by the species proportion and estimated area.\n\nPythonR\n\n\n\ndf[\"cumTotalCarbonSite (A)\"] = df[\"cumTotalCarbon\"] * df[\"proportion\"] * wccEstArea\ndf.head()\n\n  speciesCode  period  cumTotalCarbon  proportion  cumTotalCarbonSite (A)\n0         ROW     0-5             2.7           1                    32.4\n1         ROW    5-10             9.6           1                   115.2\n2         ROW   10-15            28.9           1                   346.8\n3         ROW   15-20            70.6           1                   847.2\n4         ROW   20-25            91.1           1                  1093.2\n\n\n\n\n\ndf <- df |>\n    dplyr::mutate(\"cumTotalCarbonSite (A)\" = cumTotalCarbon * proportion * wccEstArea)\ndf |> head()\n\n  speciesCode period cumTotalCarbon proportion cumTotalCarbonSite (A)\n1         ROW    0-5            2.7          1                   32.4\n2         ROW   5-10            9.6          1                  115.2\n3         ROW  10-15           28.9          1                  346.8\n4         ROW  15-20           70.6          1                  847.2\n5         ROW  20-25           91.1          1                 1093.2\n6         ROW  25-30          110.5          1                 1326.0\n\n\n\n\n\nSum across all species.\n\nPythonR\n\n\n\ndf = df.drop(columns = [\"speciesCode\", \"cumTotalCarbon\", \"proportion\"])\ndf = df.set_index(\"period\")\ndf.sum(axis = 0).to_frame()\n\n                              0\ncumTotalCarbonSite (A)  77065.2\n\ndf = df.reset_index()\ndf.head()\n\n   period  cumTotalCarbonSite (A)\n0     0-5                    32.4\n1    5-10                   115.2\n2   10-15                   346.8\n3   15-20                   847.2\n4   20-25                  1093.2\n\n\n\n\n\ndf <- df |>\n    dplyr::select(-speciesCode, -cumTotalCarbon, -proportion) |>\n    dplyr::group_by(period) |>\n    dplyr::summarise(`cumTotalCarbonSite (A)` = sum(`cumTotalCarbonSite (A)`))\ndf |> head()\n\n# A tibble: 6 × 2\n  period   `cumTotalCarbonSite (A)`\n  <chr>                       <dbl>\n1 \"  0-5\"                      32.4\n2 \"  5-10\"                    115. \n3 \" 10-15\"                    347. \n4 \" 15-20\"                    847. \n5 \" 20-25\"                   1093. \n6 \" 25-30\"                   1326  \n\n\n\n\n\nAdd a 20% buffer by multiplying the Cumulative total sequestration for the site by 0.8\n\nPythonR\n\n\n\ndf[\"cumTotalCarbonSiteReduced (B)\"] = df[\"cumTotalCarbonSite (A)\"] * 0.8\ndf.head()\n\n   period  cumTotalCarbonSite (A)  cumTotalCarbonSiteReduced (B)\n0     0-5                    32.4                          25.92\n1    5-10                   115.2                          92.16\n2   10-15                   346.8                         277.44\n3   15-20                   847.2                         677.76\n4   20-25                  1093.2                         874.56\n\n\n\n\n\ndf <- df |>\n    dplyr::mutate(\"cumTotalCarbonSiteReduced (B)\" = `cumTotalCarbonSite (A)` * 0.8)\ndf |> head()\n\n# A tibble: 6 × 3\n  period   `cumTotalCarbonSite (A)` `cumTotalCarbonSiteReduced (B)`\n  <chr>                       <dbl>                           <dbl>\n1 \"  0-5\"                      32.4                            25.9\n2 \"  5-10\"                    115.                             92.2\n3 \" 10-15\"                    347.                            277. \n4 \" 15-20\"                    847.                            678. \n5 \" 20-25\"                   1093.                            875. \n6 \" 25-30\"                   1326                            1061. \n\n\n\n\n\nRetrieve the total establishment emissions for the selected spacing and add to the dataframe.\n\nPythonR\n\n\n\ntotalEstablishmentC = baseline_WCCEstablishment[(baseline_WCCEstablishment.seedlingSpacing == 1.5) & (baseline_WCCEstablishment.variable == \"total\")]\ntotalEstablishmentC = totalEstablishmentC.drop(columns = [\"seedlingSpacing\", \"variable\"]).reset_index(drop = True)\ntotalEstablishmentC = totalEstablishmentC.rename(columns = {\"totalEmissions\": \"establishmentCarbonLoss (C)\"})\ndf[\"establishmentCarbonLoss (C)\"] = totalEstablishmentC._get_value(0, 0, takeable = True)\ndf.head()\n\n   period  ...  establishmentCarbonLoss (C)\n0     0-5  ...                      -81.412\n1    5-10  ...                      -81.412\n2   10-15  ...                      -81.412\n3   15-20  ...                      -81.412\n4   20-25  ...                      -81.412\n\n[5 rows x 4 columns]\n\n\n\n\n\ntotalEstablishmentC = baseline_WCCEstablishment |>\n    dplyr::filter(seedlingSpacing == 1.5) |>\n    dplyr::filter(variable == \"total\") |>\n    dplyr::select(-seedlingSpacing, -variable) |>\n    dplyr::rename(\"establishmentCarbonLoss (C)\" = \"totalEmissions\") |>\n    dplyr::pull(\"establishmentCarbonLoss (C)\")\n\ndf <- df |>\n    dplyr::mutate(\"establishmentCarbonLoss (C)\" = totalEstablishmentC)\n\ndf |> head()\n\n# A tibble: 6 × 4\n  period   `cumTotalCarbonSite (A)` `cumTotalCarbonSiteReduced (B)` establishm…¹\n  <chr>                       <dbl>                           <dbl>        <dbl>\n1 \"  0-5\"                      32.4                            25.9        -81.4\n2 \"  5-10\"                    115.                             92.2        -81.4\n3 \" 10-15\"                    347.                            277.         -81.4\n4 \" 15-20\"                    847.                            678.         -81.4\n5 \" 20-25\"                   1093.                            875.         -81.4\n6 \" 25-30\"                   1326                            1061.         -81.4\n# … with abbreviated variable name ¹​`establishmentCarbonLoss (C)`\n\n\n\n\n\nCalculate soil carbon flux by summing soil loss and soil sequestration data . To do this first identify the % topsoil carbon (0-30cm) loss associated with the method of site preparation and soil type.\n\nPythonR\n\n\n\nestablishmentMethods = pandas.DataFrame.from_dict(data = {\"MethodSitePrep\": [\"Negligible Disturbance\", \"Low Disturbance\", \"Medium Disturbance\", \"High Disturbance\", \"Very High Disturbance\"],\n                                                          \"Organomineral\": [0, 5, 10, 20, 40],\n                                                          \"Mineral\": [0, 0, 2, 5, 10]})\n\nestablishmentMethods = establishmentMethods.set_index(\"MethodSitePrep\")\npercSoilLoss = establishmentMethods._get_value(\"Medium Disturbance\", \"Mineral\")\n\npercSoilLoss\n\n2\n\n\n\n\n\nestablishmentMethods <- data.frame(\"MethodSitePrep\" = c(\"Negligible Disturbance\", \"Low Disturbance\", \"Medium Disturbance\", \"High Disturbance\", \"Very High Disturbance\"),\n                                   \"Organomineral\" = c(0, 5, 10, 20, 40),\n                                   \"Mineral\" = c(0, 0, 2, 5, 10))\n\npercSoilLoss <- establishmentMethods |>\n    dplyr::filter(MethodSitePrep == \"Medium Disturbance\") |>\n    dplyr::pull(Mineral)\n\npercSoilLoss\n\n[1] 2\n\n\n\n\n\nRetrieve the soil carbon lost for the selected country, previous land use, and % topsoil carbon (0-30cm) loss identified above.\n\nPythonR\n\n\n\nsoilCLoss = baseline_WCCSoilLoss[baseline_WCCSoilLoss[\"topsoilCarbonSubtract\"] == percSoilLoss]\nsoilCLoss = soilCLoss.set_index(\"Country\")\nsoilCLoss = soilCLoss._get_value(\"England\", \"Arable\")\n\nsoilCLoss\n\n-5.133333333\n\n\n\n\n\nsoilCLoss <- baseline_WCCSoilLoss |>\n    dplyr::filter(topsoilCarbonSubtract == percSoilLoss,\n                  Country == \"England\") |>\n    dplyr::pull(Arable)\n\nsoilCLoss\n\n[1] -5.133333\n\n\n\n\n\nCalculate the total net soil carbon flux.\n\nPythonR\n\n\n\nsoilCFlux = baseline_WCCSoilSeq\nsoilCFlux[\"cumSoilLoss\"] = soilCLoss\nsoilCFlux[\"cumSoilCarbonFlux (D)\"] = soilCFlux[\"cumSoilLoss\"] + soilCFlux[\"cumSoilSeq\"]\nsoilCFlux = soilCFlux.drop(columns = [\"cumSoilSeq\", \"cumSoilLoss\"])\n\nsoilCFlux.head()\n\n   period  cumSoilCarbonFlux (D)\n0     0-5               0.366667\n1    5-10               5.866667\n2   10-15              11.366667\n3   15-20              16.866667\n4   20-25              22.366667\n\n\n\n\n\nsoilCFlux <- baseline_WCCSoilSeq |>\n    dplyr::mutate(\"cumSoilLoss\" = soilCLoss,\n                  \"cumSoilCarbonFlux (D)\" = cumSoilLoss + cumSoilSeq) |>\n    dplyr::select(-cumSoilSeq, -cumSoilLoss)\n\nsoilCFlux |> head()\n\n  period cumSoilCarbonFlux (D)\n1    0-5             0.3666667\n2   5-10             5.8666667\n3  10-15            11.3666667\n4  15-20            16.8666667\n5  20-25            22.3666667\n6  25-30            27.8666667\n\n\n\n\n\nMerge soil carbon flux.\n\nPythonR\n\n\n\ndf = df.merge(soilCFlux, on = [\"period\"])\n\ndf.head()\n\n   period  ...  cumSoilCarbonFlux (D)\n0     0-5  ...               0.366667\n1    5-10  ...               5.866667\n2   10-15  ...              11.366667\n3   15-20  ...              16.866667\n4   20-25  ...              22.366667\n\n[5 rows x 5 columns]\n\n\n\n\n\ndf <- df |>\n    dplyr::left_join(soilCFlux, on = \"period\")\n\nJoining, by = \"period\"\n\ndf |> head()\n\n# A tibble: 6 × 5\n  period   `cumTotalCarbonSite (A)` cumTotalCarbonSiteReduced …¹ estab…² cumSo…³\n  <chr>                       <dbl>                        <dbl>   <dbl>   <dbl>\n1 \"  0-5\"                      32.4                         25.9   -81.4   0.367\n2 \"  5-10\"                    115.                          92.2   -81.4   5.87 \n3 \" 10-15\"                    347.                         277.    -81.4  11.4  \n4 \" 15-20\"                    847.                         678.    -81.4  16.9  \n5 \" 20-25\"                   1093.                         875.    -81.4  22.4  \n6 \" 25-30\"                   1326                         1061.    -81.4  27.9  \n# … with abbreviated variable names ¹​`cumTotalCarbonSiteReduced (B)`,\n#   ²​`establishmentCarbonLoss (C)`, ³​`cumSoilCarbonFlux (D)`\n\n\n\n\n\nCalculate the total cumulative carbon sequestration.\n\nPythonR\n\n\n\ndf[\"totalProjectCarbonSeq (E)\"] = df[\"cumTotalCarbonSiteReduced (B)\"] + df[\"establishmentCarbonLoss (C)\"] + df[\"cumSoilCarbonFlux (D)\"]\n\ndf.head()\n\n   period  ...  totalProjectCarbonSeq (E)\n0     0-5  ...                 -55.125333\n1    5-10  ...                  16.614667\n2   10-15  ...                 207.394667\n3   15-20  ...                 613.214667\n4   20-25  ...                 815.514667\n\n[5 rows x 6 columns]\n\n\n\n\n\ndf <- df |>\n    dplyr::mutate(\"totalProjectCarbonSeq (E)\" = `cumTotalCarbonSiteReduced (B)` + `establishmentCarbonLoss (C)` + `cumSoilCarbonFlux (D)`)\n\ndf |> head()\n\n# A tibble: 6 × 6\n  period   `cumTotalCarbonSite (A)` cumTotalCarbonSite…¹ estab…² cumSo…³ total…⁴\n  <chr>                       <dbl>                <dbl>   <dbl>   <dbl>   <dbl>\n1 \"  0-5\"                      32.4                 25.9   -81.4   0.367   -55.1\n2 \"  5-10\"                    115.                  92.2   -81.4   5.87     16.6\n3 \" 10-15\"                    347.                 277.    -81.4  11.4     207. \n4 \" 15-20\"                    847.                 678.    -81.4  16.9     613. \n5 \" 20-25\"                   1093.                 875.    -81.4  22.4     816. \n6 \" 25-30\"                   1326                 1061.    -81.4  27.9    1007. \n# … with abbreviated variable names ¹​`cumTotalCarbonSiteReduced (B)`,\n#   ²​`establishmentCarbonLoss (C)`, ³​`cumSoilCarbonFlux (D)`,\n#   ⁴​`totalProjectCarbonSeq (E)`\n\n\n\n\n\nOptionally, add Baseline and Leakage data then calculate the adjusted, net total project carbon sequestration.\n\nPythonR\n\n\n\ndf[\"Baseline (F)\"] = 0\ndf[\"Leakage (G)\"] = 0\ndf[\"netTotalProjectCarbonSeq (H)\"] = df[\"totalProjectCarbonSeq (E)\"]+ df[\"Baseline (F)\"] + df[\"Leakage (G)\"]\n\ndf.head()\n\n   period  cumTotalCarbonSite (A)  ...  Leakage (G)  netTotalProjectCarbonSeq (H)\n0     0-5                    32.4  ...            0                    -55.125333\n1    5-10                   115.2  ...            0                     16.614667\n2   10-15                   346.8  ...            0                    207.394667\n3   15-20                   847.2  ...            0                    613.214667\n4   20-25                  1093.2  ...            0                    815.514667\n\n[5 rows x 9 columns]\n\n\n\n\n\ndf <- df |>\n    dplyr::mutate(\"Baseline (F)\" = 0, \"Leakage (G)\" = 0) |>\n    dplyr::mutate(\"netTotalProjectCarbonSeq (H)\" = `totalProjectCarbonSeq (E)` + `Baseline (F)` + `Leakage (G)`)\n\ndf |> head()\n\n# A tibble: 6 × 9\n  period   cumTotalCar…¹ cumTo…² estab…³ cumSo…⁴ total…⁵ Basel…⁶ Leaka…⁷ netTo…⁸\n  <chr>            <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>\n1 \"  0-5\"           32.4    25.9   -81.4   0.367   -55.1       0       0   -55.1\n2 \"  5-10\"         115.     92.2   -81.4   5.87     16.6       0       0    16.6\n3 \" 10-15\"         347.    277.    -81.4  11.4     207.        0       0   207. \n4 \" 15-20\"         847.    678.    -81.4  16.9     613.        0       0   613. \n5 \" 20-25\"        1093.    875.    -81.4  22.4     816.        0       0   816. \n6 \" 25-30\"        1326    1061.    -81.4  27.9    1007.        0       0  1007. \n# … with abbreviated variable names ¹​`cumTotalCarbonSite (A)`,\n#   ²​`cumTotalCarbonSiteReduced (B)`, ³​`establishmentCarbonLoss (C)`,\n#   ⁴​`cumSoilCarbonFlux (D)`, ⁵​`totalProjectCarbonSeq (E)`, ⁶​`Baseline (F)`,\n#   ⁷​`Leakage (G)`, ⁸​`netTotalProjectCarbonSeq (H)`\n\n\n\n\n\nCalculate the claimable carbon sequestration by adding a final 20% buffer.\n\nPythonR\n\n\n\ndf[\"claimableCarbonSeq (J)\"] = df[\"netTotalProjectCarbonSeq (H)\"] * 0.8\ndf.head()\n\n   period  ...  claimableCarbonSeq (J)\n0     0-5  ...              -44.100267\n1    5-10  ...               13.291733\n2   10-15  ...              165.915733\n3   15-20  ...              490.571733\n4   20-25  ...              652.411733\n\n[5 rows x 10 columns]\n\n\n\n\n\ndf <- df |>\n    dplyr::mutate(\"claimableCarbonSeq (J)\" = `netTotalProjectCarbonSeq (H)` * 0.8)\n\ndf |> head()\n\n# A tibble: 6 × 10\n  period cumTo…¹ cumTo…² estab…³ cumSo…⁴ total…⁵ Basel…⁶ Leaka…⁷ netTo…⁸ claim…⁹\n  <chr>    <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>\n1 \"  0-…    32.4    25.9   -81.4   0.367   -55.1       0       0   -55.1   -44.1\n2 \"  5-…   115.     92.2   -81.4   5.87     16.6       0       0    16.6    13.3\n3 \" 10-…   347.    277.    -81.4  11.4     207.        0       0   207.    166. \n4 \" 15-…   847.    678.    -81.4  16.9     613.        0       0   613.    491. \n5 \" 20-…  1093.    875.    -81.4  22.4     816.        0       0   816.    652. \n6 \" 25-…  1326    1061.    -81.4  27.9    1007.        0       0  1007.    806. \n# … with abbreviated variable names ¹​`cumTotalCarbonSite (A)`,\n#   ²​`cumTotalCarbonSiteReduced (B)`, ³​`establishmentCarbonLoss (C)`,\n#   ⁴​`cumSoilCarbonFlux (D)`, ⁵​`totalProjectCarbonSeq (E)`, ⁶​`Baseline (F)`,\n#   ⁷​`Leakage (G)`, ⁸​`netTotalProjectCarbonSeq (H)`, ⁹​`claimableCarbonSeq (J)`\n\n\n\n\n\nCalculate the mean claimable carbon sequestration per hectare, in tCO2e per ha per year\n\nPythonR\n\n\n\ndf[\"meanClaimableCarbonSeqPerHa (K)\"] = df[\"claimableCarbonSeq (J)\"] / wccEstArea\ndf.head()\n\n   period  ...  meanClaimableCarbonSeqPerHa (K)\n0     0-5  ...                        -3.675022\n1    5-10  ...                         1.107644\n2   10-15  ...                        13.826311\n3   15-20  ...                        40.880978\n4   20-25  ...                        54.367644\n\n[5 rows x 11 columns]\n\n\n\n\n\ndf <- df |>\n    dplyr::mutate(\"meanClaimableCarbonSeqPerHa (K)\" = `claimableCarbonSeq (J)` / wccEstArea)\n\ndf |> head()\n\n# A tibble: 6 × 11\n  period cumTo…¹ cumTo…² estab…³ cumSo…⁴ total…⁵ Basel…⁶ Leaka…⁷ netTo…⁸ claim…⁹\n  <chr>    <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>\n1 \"  0-…    32.4    25.9   -81.4   0.367   -55.1       0       0   -55.1   -44.1\n2 \"  5-…   115.     92.2   -81.4   5.87     16.6       0       0    16.6    13.3\n3 \" 10-…   347.    277.    -81.4  11.4     207.        0       0   207.    166. \n4 \" 15-…   847.    678.    -81.4  16.9     613.        0       0   613.    491. \n5 \" 20-…  1093.    875.    -81.4  22.4     816.        0       0   816.    652. \n6 \" 25-…  1326    1061.    -81.4  27.9    1007.        0       0  1007.    806. \n# … with 1 more variable: `meanClaimableCarbonSeqPerHa (K)` <dbl>, and\n#   abbreviated variable names ¹​`cumTotalCarbonSite (A)`,\n#   ²​`cumTotalCarbonSiteReduced (B)`, ³​`establishmentCarbonLoss (C)`,\n#   ⁴​`cumSoilCarbonFlux (D)`, ⁵​`totalProjectCarbonSeq (E)`, ⁶​`Baseline (F)`,\n#   ⁷​`Leakage (G)`, ⁸​`netTotalProjectCarbonSeq (H)`, ⁹​`claimableCarbonSeq (J)`"
  },
  {
    "objectID": "UsingESCTreeResults.html",
    "href": "UsingESCTreeResults.html",
    "title": "Using the ESCTreeResults API",
    "section": "",
    "text": "This notebook details how to call the ESCTreeResults API endpoint to retrieve tree species suitability metrics for a given set of environmental dose variables."
  },
  {
    "objectID": "UsingESCTreeResults.html#import-required-packages",
    "href": "UsingESCTreeResults.html#import-required-packages",
    "title": "Using the ESCTreeResults API",
    "section": "Import required packages",
    "text": "Import required packages\n\nPythonR\n\n\n\nimport requests\nimport json\nimport pandas\nimport pprint\npandas.options.mode.chained_assignment = None\n\n\n\n\nlibrary(httr)\n\nWarning: package 'httr' was built under R version 4.2.3\n\nlibrary(jsonlite)\nlibrary(dplyr)\n\nWarning: package 'dplyr' was built under R version 4.2.3\n\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union"
  },
  {
    "objectID": "UsingESCTreeResults.html#compose-api-request",
    "href": "UsingESCTreeResults.html#compose-api-request",
    "title": "Using the ESCTreeResults API",
    "section": "Compose API request",
    "text": "Compose API request\nEstablish API POST request URL\n\nPythonR\n\n\n\nbase_url = \"http://209.97.132.245:8000/ESCTreeResults/\"\n\n\n\n\nbase_url <- \"http://209.97.132.245:8000/ESCTreeResults/\"\n\n\n\n\nEstablish the Soil Moisture Regime (SMR) and Soil Nutrient Regime (SNR) manual modifier values, if required. Otherwise set to NA (R) or None (Python).\n\nsmr:float, any number between 0 and 8. Indicative categorical values are as follows:\n\n1 = Very Wet\n2 = Wet\n3 = Moist\n4 = Moist\n5 = Fresh\n6 = Slightly Dry\n7 = Moderately Dry\n8 = Very Dry\n\nsnr:float, any number between 0 and 6. Indicative categorical values are as follows:\n\n0 = Very Poor (VP1)\n0.5 = Very Poor (VP2)\n1 = Very Poor (VP3)\n1.5 = Very Poor - Poor\n2 = Poor\n3 = Medium\n4 = Rich\n5 = Very Rich\n6 = Carbonate\n\n\n\nPythonR\n\n\n\nsmr_modVal = None\nsnr_modVal = None\n\n\n\n\nsmr_modVal <- NA\nsnr_modVal <- NA\n\n\n\n\nEstablish the escSiteData dictionary. To do this, a dictionary containing the values can be composed manually be first establishing lists of values.\n\nPythonR\n\n\n\nclimateScen_vals = [\"RCP2.6\", \"RCP2.6\", \"RCP8.5\", \"RCP8.5\"]\nclimateYear_vals = [\"1980_2000\", \"2040_2060\", \"1980_2000\", \"2040_2060\"]\nsmr_vals = [5, 5, 5, 5]\nsnr_vals = [1, 1, 1, 1]\nat_vals = [1102.599, 1614.481, 1102.599, 1846.440]\nct_vals = [8.454323, 8.454323, 8.454323, 8.454323]\ndams_vals = [18.60297, 18.60297, 18.60297, 18.60297]\nmd_vals = [63.12716, 115.40047, 63.12716, 123.29279]\n\n\n\n\nclimateScen_vals <- list(\"RCP2.6\", \"RCP2.6\", \"RCP8.5\", \"RCP8.5\")\nclimateYear_vals <- list(\"1980_2000\", \"2040_2060\", \"1980_2000\", \"2040_2060\")\nsmr_vals <- list(5, 5, 5, 5)\nsnr_vals <- list(1, 1, 1, 1)\nat_vals <- list(1102.599, 1614.481, 1102.599, 1846.440)\nct_vals <- list(8.454323, 8.454323, 8.454323, 8.454323)\ndams_vals <- list(18.60297, 18.60297, 18.60297, 18.60297)\nmd_vals <- list(63.12716, 115.40047, 63.12716, 123.29279)\n\n\n\n\nThen form the escSiteData dictionary:\n\nPythonR\n\n\n\nescSiteData = {'climateScen': climateScen_vals, 'climateYear': climateYear_vals, \n               'SMR': smr_vals, 'SNR': snr_vals, 'AT': at_vals, \n               'CT': ct_vals, 'DAMS': dams_vals, 'MD': md_vals}\n\n\n\n\nescSiteData = list('climateScen' = climateScen_vals, 'climateYear' = climateYear_vals, \n                   'SMR' = smr_vals, 'SNR' = snr_vals, 'AT' = at_vals, \n                   'CT' = ct_vals, 'DAMS' = dams_vals, 'MD' = md_vals)\n\n\n\n\nAlternatively, the response from the ESCSiteData API can be passed to escSiteData.\nEstablish the site modifier options and species group filter.\n\nawcAdj:bool\n\nTrue\nFalse\n\ndrainage:int\n\n0 = None.\n1 = Drainage installed.\n\nbrash:int\n\n0 = None (new planting).\n1 = Fresh brash (<18 months).\n2 = Brash (>18 months).\n\nfertiliser:int\n\n0 = None.\n1 = Fertiliser applied.\n\nexposure:int\n\n0 = None.\n1 = Exposed ridge/Coastal zone.\n2 = Local shelter/Less exposed/Underplanting.\n\nfilter:int\n\n0 = No filter\n1 = Conifers only\n2 = Broadleaves only\n3 = Natives only\n4 = Non-natives only\n\n\n\nPythonR\n\n\n\nawcAdj = True\ndrainage = 0\nbrash = 0\nfertiliser = 0\nexposure = 0\nfilter = 0\n\n\n\n\nawcAdj <- TRUE\ndrainage <- 0\nbrash <- 0\nfertiliser <- 0\nexposure <- 0\nfilter <- 0\n\n\n\n\nEstablish the ESC version.\n\nescVersion:str\n\n“4.33” = “4.33”\n\n\n\nPythonR\n\n\n\nescVersion = \"4.33\"\n\n\n\n\nescVersion <- \"4.33\"\n\n\n\n\nCompose the request body.\n\nPythonR\n\n\n\nreq_body = {\"smr\": smr_modVal, \"snr\": snr_modVal,\n            \"escSiteData\": escSiteData,\n            \"awcAdj\": awcAdj,\n            \"drainage\": drainage, \"brash\": brash, \n            \"fertiliser\": fertiliser, \"exposure\": exposure,\n            \"filter\": filter,\n            \"escVersion\": escVersion}\n\n\n\n\nreq_list <- list(\"smr\" = smr_modVal, \"snr\" = snr_modVal,\n                 \"escSiteData\" = escSiteData,\n                 \"awcAdj\" = awcAdj,\n                 \"drainage\" = drainage, \"brash\" = brash, \n                 \"fertiliser\" =  fertiliser, \"exposure\" = exposure, \n                 \"filter\" = filter,\n                 \"escVersion\" = escVersion)\n\nreq_body <- jsonlite::toJSON(req_list, auto_unbox = TRUE)"
  },
  {
    "objectID": "UsingESCTreeResults.html#make-the-api-call",
    "href": "UsingESCTreeResults.html#make-the-api-call",
    "title": "Using the ESCTreeResults API",
    "section": "Make the API call",
    "text": "Make the API call\nCall the ESCTreeResults API\n\nPythonR\n\n\n\nESCTreeResultsresponse = requests.post(url = base_url, json = req_body)\nESCTreeResultsresponse.status_code == 200\n\nTrue\n\n\n\n\n\nESCTreeResultsresponse <- httr::POST(url = base_url, body = req_body)\nESCTreeResultsresponse$status_code == 200\n\n[1] TRUE\n\n\n\n\n\nEstablish a function to deserialize the json response into a nested dictionary or nested list.\n\nPythonR\n\n\n\ndef deserialize(responseJson:str) -> dict:\n    \n    loadedJson = json.loads(responseJson)\n\n    for k,v in loadedJson.items():\n        for w,s in loadedJson[k].items():\n            for t,c in loadedJson[k][w].items():\n                loadedJson[k][w][t] = pandas.DataFrame.from_dict(data = json.loads(c))\n            \n    return loadedJson\n\n\n\n\ndeserialize <- function(responseJson){\n\n    responseContent <- httr::content(responseJson)\n    responseContent <- jsonlite::fromJSON(responseContent)\n\n    for(i in names(responseContent)){\n        for(j in names(responseContent[[i]])){\n            for(k in names(responseContent[[i]][[j]])){\n                responseContent[[i]][[j]][[k]] = jsonlite::fromJSON(responseContent[[i]][[j]][[k]])\n            }\n        }\n    }\n    return(responseContent)\n}\n\n\n\n\nCall the deserializeResults function on the ESC API output.\n\nPythonR\n\n\n\nESCTreeResultsresponse_dict = deserialize(responseJson = ESCTreeResultsresponse.json())\n\n\n\n\nESCTreeResultsresponse_list <- deserialize(responseJson = ESCTreeResultsresponse)"
  },
  {
    "objectID": "UsingESCTreeResults.html#explore-results",
    "href": "UsingESCTreeResults.html#explore-results",
    "title": "Using the ESCTreeResults API",
    "section": "Explore results",
    "text": "Explore results\nThe object produced (ESCTreeResultsresponse_dict or ESCTreeResultsresponse_list) is a nested dictionary with the following structure:\nESCresponse_dict (dict)\n├── Metadata (dict)\n│   ├── ESCMetadata (dict)\n│   │   ├── ESCTreeMetadata (DataFrame)\n│   ├── APIMetadata (dict)\n│   │   ├── DateTime (DataFrame)\n└───RCP2.6 (dict)\n│   ├── 1980_2000 (dict)\n│   │   ├── ESCDoseVals (DataFrame)\n│   │   ├── ESCResponseVals (DataFrame)\n│   │   ├── ESCSuitMetrics (DataFrame)\n│   ├── 2060_2080 (dict)\n│   │   ├── ESCDoseVals (DataFrame)\n│   │   ├── ESCResponseVals (DataFrame)\n│   │   ├── ESCSuitMetrics (DataFrame)\n└───RCP8.5 (dict)\n    ├── 1980_2000 (dict)\n    │   ├── ESCDoseVals (DataFrame)\n    │   ├── ESCResponseVals (DataFrame)\n    │   ├── ESCSuitMetrics (DataFrame)\n    ├── 2060_2080 (dict)\n    │   ├── ESCDoseVals (DataFrame)\n    │   ├── ESCResponseVals (DataFrame)\n    │   ├── ESCSuitMetrics (DataFrame)\n\nPythonR\n\n\n\npprint.pprint(ESCTreeResultsresponse_dict, depth = 2)\n\n{'Metadata': {'APIMetadata': {...}, 'ESCMetadata': {...}},\n 'RCP2.6': {'1980_2000': {...}, '2040_2060': {...}},\n 'RCP8.5': {'1980_2000': {...}, '2040_2060': {...}}}\n\n\n\n\n\nstr(ESCTreeResultsresponse_list, max.level = 3)\n\nList of 3\n $ Metadata:List of 2\n  ..$ ESCMetadata:List of 1\n  .. ..$ ESCTreeMetadata:'data.frame':  1 obs. of  1 variable:\n  ..$ APIMetadata:List of 1\n  .. ..$ DateTime:'data.frame': 1 obs. of  1 variable:\n $ RCP2.6  :List of 2\n  ..$ 1980_2000:List of 3\n  .. ..$ ESCDoseVals    :'data.frame':  10 obs. of  7 variables:\n  .. ..$ ESCResponseVals:'data.frame':  372 obs. of  3 variables:\n  .. ..$ ESCSuitMetrics :'data.frame':  62 obs. of  12 variables:\n  ..$ 2040_2060:List of 3\n  .. ..$ ESCDoseVals    :'data.frame':  10 obs. of  7 variables:\n  .. ..$ ESCResponseVals:'data.frame':  372 obs. of  3 variables:\n  .. ..$ ESCSuitMetrics :'data.frame':  62 obs. of  12 variables:\n $ RCP8.5  :List of 2\n  ..$ 1980_2000:List of 3\n  .. ..$ ESCDoseVals    :'data.frame':  10 obs. of  7 variables:\n  .. ..$ ESCResponseVals:'data.frame':  372 obs. of  3 variables:\n  .. ..$ ESCSuitMetrics :'data.frame':  62 obs. of  12 variables:\n  ..$ 2040_2060:List of 3\n  .. ..$ ESCDoseVals    :'data.frame':  10 obs. of  7 variables:\n  .. ..$ ESCResponseVals:'data.frame':  372 obs. of  3 variables:\n  .. ..$ ESCSuitMetrics :'data.frame':  62 obs. of  12 variables:\n\n\n\n\n\nAccess the ESC data frames from the API response using the following code.\nThe ESCDoseVals data frame contains the environmental dose variables obtained from the modelled data and/or manually entered, which are then modified by the aforementioned API query parameters drainage, brash, fertiliser, and exposure. For more information on the underlying method see the Forest Research Bulletin 124 and the Forest Research Technical Paper 20. Column definitions:\n\nSMR - soil moisture regime\nSNR - soil nutrient regime\nAT - accumulated temperature\nCT - continentality\nDAMS - direct aspect method of scoring\nMD - moisture deficit\nItem - The stage of modification of the environmental dose variable values.\n\n\nPythonR\n\n\n\nESCDoseVals = ESCTreeResultsresponse_dict.get(\"RCP2.6\").get(\"1980_2000\").get(\"ESCDoseVals\")\nESCDoseVals\n\n   SMR  SNR        AT        CT      DAMS        MD                   Item\n0  5.0  1.0  1102.599  8.454323  18.60297  63.12716          Values - Base\n1  NaN  NaN       NaN       NaN       NaN       NaN        Values - Manual\n2  5.0  1.0  1102.599  8.454323  18.60297  63.12716        Values - PreMod\n3  0.0  0.0     0.000  0.000000   0.00000   0.00000    Modifier - Drainage\n4  0.0  0.0     0.000  0.000000   0.00000   0.00000       Modifier - Brash\n5  0.0  0.0     0.000  0.000000   0.00000   0.00000  Modifier - Fertiliser\n6  0.0  0.0     0.000  0.000000   0.00000   0.00000    Modifier - Exposure\n7  5.0  1.0  1102.599  8.454323  18.60297  63.12716        Values - preAWC\n8  0.0  0.0     0.000  0.000000   0.00000 -38.00000         Modifier - AWC\n9  5.0  1.0  1102.599  8.454323  18.60297  25.12716         Values - Final\n\n\n\n\n\nESCDoseVals = ESCTreeResultsresponse_list$`RCP2.6`$`1980_2000`$ESCDoseVals\nESCDoseVals\n\n   SMR SNR       AT     CT   DAMS       MD                  Item\n1    5   1 1102.599 8.4543 18.603  63.1272         Values - Base\n2   NA  NA       NA     NA     NA       NA       Values - Manual\n3    5   1 1102.599 8.4543 18.603  63.1272       Values - PreMod\n4    0   0    0.000 0.0000  0.000   0.0000   Modifier - Drainage\n5    0   0    0.000 0.0000  0.000   0.0000      Modifier - Brash\n6    0   0    0.000 0.0000  0.000   0.0000 Modifier - Fertiliser\n7    0   0    0.000 0.0000  0.000   0.0000   Modifier - Exposure\n8    5   1 1102.599 8.4543 18.603  63.1272       Values - preAWC\n9    0   0    0.000 0.0000  0.000 -38.0000        Modifier - AWC\n10   5   1 1102.599 8.4543 18.603  25.1272        Values - Final\n\n\n\n\n\nThe ESCResponseVals data frame contains data on the response of each tree species to each environmental dose metric. Column definitions:\n\nspeciesCode - The Forest Research species code for the species.\nmetric - The environmental dose variable (see above).\nresponse - The response of the tree species to the environmental dose variable. A unitless value between 0 and 1.\n\n\nPythonR\n\n\n\nESCResponseVals = ESCTreeResultsresponse_dict.get(\"RCP2.6\").get(\"1980_2000\").get(\"ESCResponseVals\")\nESCResponseVals.head()\n\n  speciesCode metric  response\n0          AH     AT  0.849505\n1          AH     CT  1.000000\n2          AH   DAMS  0.000000\n3          AH     MD  0.774161\n4          AH    SMR  1.000000\n\n\n\n\n\nESCResponseVals = ESCTreeResultsresponse_list$`RCP2.6`$`1980_2000`$ESCResponseVals\nESCResponseVals |> head()\n\n  speciesCode metric  response\n1          AH     AT 0.8495046\n2          AH     CT 1.0000000\n3          AH   DAMS 0.0000000\n4          AH     MD 0.7741611\n5          AH    SMR 1.0000000\n6          AH    SNR 0.0000000\n\n\n\n\n\nThe ESCSuitMetrics data frame contains a range of summary data relating to the suitability of each tree species based on the ESCResponseVals data. Column definitions:\n\nspeciesCode - The Forest Research species code for the species.\nspeciesScientific - The scientific name of the species.\nspeciesName - The common name of the species.\nmaxYC - The maximum yield class of that species\nthreat - Any major threats to that tree species which should be taken into account when considering planting that species.\nlimFactorInclAT - The limiting factor (metric with the lowest response) including AT.\nlimFactorInclATResponse - The response value for limiting factor (metric with the lowest response) including AT.\nlimFactorExclAT - The limiting factor (metric with the lowest response) excluding AT.\nlimFactorExclATResponse - The response value for limiting factor (metric with the lowest response) excluding AT.\nTimberSuitability - The suitability of that tree species for planting as a timber crop.\nEcologicalSuitability - The suitability of that tree species for planting.\nestimatedYC - The estimated yield class.\n\n\nPythonR\n\n\n\nESCSuitMetrics = ESCTreeResultsresponse_dict.get(\"RCP2.6\").get(\"1980_2000\").get(\"ESCSuitMetrics\")\nESCSuitMetrics.head()\n\n  speciesCode   speciesScientific  ... EcologicalSuitability  estimatedYC\n0          AH  Fraxinus excelsior  ...              0.000000     0.000000\n1         AMA    Acer macrophylum  ...              0.000000     0.000000\n2         ASP     Populus tremula  ...              0.032540     0.381491\n3          BE     Fagus sylvatica  ...              0.180795     1.618949\n4         BPO       Populus nigra  ...              0.000000     0.000000\n\n[5 rows x 12 columns]\n\n\n\n\n\nESCSuitMetrics = ESCTreeResultsresponse_list$`RCP2.6`$`1980_2000`$ESCSuitMetrics\nESCSuitMetrics |> head()\n\n  speciesCode  speciesScientific    speciesName maxYC  threat limFactorInclAT\n1          AH Fraxinus excelsior            Ash    12 Chalara            DAMS\n2         AMA   Acer macrophylum Big leaf maple    12    None            DAMS\n3         ASP    Populus tremula          Aspen    12    None             SNR\n4          BE    Fagus sylvatica          Beech    10    None            DAMS\n5         BPO      Populus nigra   Black poplar    16    None             SNR\n6         CAR    Alnus glutinosa   Common alder    12    None             SNR\n  limFactorInclATResponse limFactorExclAT limFactorExclATResponse\n1              0.00000000            DAMS              0.00000000\n2              0.00000000            DAMS              0.00000000\n3              0.03253968             SNR              0.03253968\n4              0.18078826            DAMS              0.18078826\n5              0.00000000             SNR              0.00000000\n6              0.27619048             SNR              0.27619048\n  TimberSuitability EcologicalSuitability estimatedYC\n1        0.00000000            0.00000000   0.0000000\n2        0.00000000            0.00000000   0.0000000\n3        0.03179089            0.03253968   0.3814906\n4        0.16188879            0.18078826   1.6188879\n5        0.00000000            0.00000000   0.0000000\n6        0.22230391            0.27619048   2.6676469"
  },
  {
    "objectID": "UsingESCTreeResults.html#calculate-claimable-carbon-sequestration",
    "href": "UsingESCTreeResults.html#calculate-claimable-carbon-sequestration",
    "title": "Using the ESCWCC API v0.5",
    "section": "Calculate Claimable Carbon Sequestration",
    "text": "Calculate Claimable Carbon Sequestration\nTo calculate the average total claimable sequestration by year in tCO2e/ha perform the following calculations using the API outputs.\nColumns suffixed with (<[A-Z]>) correspond to the columns CB to CM of Version 2.4 (March 2021) of the WCC excel tool.\nFirst, retrieve the WCC Biomass Carbon Lookup Table (BCLT) and Clearfell Max Seq Values (CMSV) values for selected species, e.g. Rowan (ROW).\n\nPythonR\n\n\n\nbaseline_WCCTreeValues_ROW = baseline_WCCTreeValues[baseline_WCCTreeValues[\"speciesCode\"] == \"ROW\"]\nbaseline_WCCTreeValues_ROW.head()\n\n     speciesCode wccCode  ... periodEnd clearfellCapCarbon\n1200         ROW     SAB  ...       NaN                NaN\n1201         ROW     SAB  ...       NaN                NaN\n1202         ROW     SAB  ...       NaN                NaN\n1203         ROW     SAB  ...       NaN                NaN\n1204         ROW     SAB  ...       NaN                NaN\n\n[5 rows x 22 columns]\n\n\n\n\n\nbaseline_WCCTreeValues_ROW <- baseline_WCCTreeValues |>\n    dplyr::filter(speciesCode == \"ROW\")\nbaseline_WCCTreeValues_ROW |> head()\n\n  speciesCode wccCode speciesScientific speciesName estimatedYC roundedYC\n1         ROW     SAB  Sorbus aucuparia       Rowan         2.4         2\n2         ROW     SAB  Sorbus aucuparia       Rowan         2.4         2\n3         ROW     SAB  Sorbus aucuparia       Rowan         2.4         2\n4         ROW     SAB  Sorbus aucuparia       Rowan         2.4         2\n5         ROW     SAB  Sorbus aucuparia       Rowan         2.4         2\n6         ROW     SAB  Sorbus aucuparia       Rowan         2.4         2\n  minWCCYC maxWCCYC finalYC spacing management period standingCarbonYr\n1        2       12       2     1.5    NO_thin    0-5               NA\n2        2       12       2     1.5    NO_thin   5-10               NA\n3        2       12       2     1.5    NO_thin  10-15               NA\n4        2       12       2     1.5    NO_thin  15-20               NA\n5        2       12       2     1.5    NO_thin  20-25               NA\n6        2       12       2     1.5    NO_thin  25-30               NA\n  debrisCarbonYr totalCarbonYr cumCarbon5Yr cumBiomassCarbon cumEmissionsMgmt\n1             NA            NA           NA               NA               NA\n2             NA            NA           NA               NA               NA\n3             NA            NA           NA               NA               NA\n4             NA            NA           NA               NA               NA\n5             NA            NA           NA               NA               NA\n6             NA            NA           NA               NA               NA\n  cumTotalCarbon remCarbonYr periodEnd clearfellCapCarbon\n1            2.7          NA        NA                 NA\n2            9.6          NA        NA                 NA\n3           28.9          NA        NA                 NA\n4           76.4          NA        NA                 NA\n5          120.6          NA        NA                 NA\n6          159.7          NA        NA                 NA\n\n\n\n\n\nSelect the BCLT and CMSV values for a particular spacing and management regime, e.g. 1.5m and Thinned.\n\nPythonR\n\n\n\nbaseline_WCCTreeValues_ROW_1p5_Thinned = baseline_WCCTreeValues_ROW[(baseline_WCCTreeValues_ROW.spacing == 1.5) & (baseline_WCCTreeValues_ROW.management == \"Thinned\")]\nbaseline_WCCTreeValues_ROW_1p5_Thinned.head()\n\n     speciesCode wccCode  ... periodEnd clearfellCapCarbon\n1240         ROW     SAB  ...       NaN                NaN\n1241         ROW     SAB  ...       NaN                NaN\n1242         ROW     SAB  ...       NaN                NaN\n1243         ROW     SAB  ...       NaN                NaN\n1244         ROW     SAB  ...       NaN                NaN\n\n[5 rows x 22 columns]\n\n\n\n\n\nbaseline_WCCTreeValues_ROW_1p5_Thinned <- baseline_WCCTreeValues_ROW |>\n    dplyr::filter(spacing == 1.5,\n                  management == \"Thinned\")\nbaseline_WCCTreeValues_ROW_1p5_Thinned |> head()\n\n  speciesCode wccCode speciesScientific speciesName estimatedYC roundedYC\n1         ROW     SAB  Sorbus aucuparia       Rowan         2.4         2\n2         ROW     SAB  Sorbus aucuparia       Rowan         2.4         2\n3         ROW     SAB  Sorbus aucuparia       Rowan         2.4         2\n4         ROW     SAB  Sorbus aucuparia       Rowan         2.4         2\n5         ROW     SAB  Sorbus aucuparia       Rowan         2.4         2\n6         ROW     SAB  Sorbus aucuparia       Rowan         2.4         2\n  minWCCYC maxWCCYC finalYC spacing management period standingCarbonYr\n1        2       12       2     1.5    Thinned    0-5               NA\n2        2       12       2     1.5    Thinned   5-10               NA\n3        2       12       2     1.5    Thinned  10-15               NA\n4        2       12       2     1.5    Thinned  15-20               NA\n5        2       12       2     1.5    Thinned  20-25               NA\n6        2       12       2     1.5    Thinned  25-30               NA\n  debrisCarbonYr totalCarbonYr cumCarbon5Yr cumBiomassCarbon cumEmissionsMgmt\n1             NA            NA           NA               NA               NA\n2             NA            NA           NA               NA               NA\n3             NA            NA           NA               NA               NA\n4             NA            NA           NA               NA               NA\n5             NA            NA           NA               NA               NA\n6             NA            NA           NA               NA               NA\n  cumTotalCarbon remCarbonYr periodEnd clearfellCapCarbon\n1            2.7          NA        NA                 NA\n2            9.6          NA        NA                 NA\n3           28.9          NA        NA                 NA\n4           70.6          NA        NA                 NA\n5           91.1          NA        NA                 NA\n6          110.5          NA        NA                 NA\n\n\n\n\n\nDefine a species composition for the site and join to a trimmed WCCTreeValues dataframe.\n\nPythonR\n\n\n\nspecies_composition = pandas.DataFrame.from_dict(data = {\"speciesCode\": \"ROW\", \"proportion\": [1]})\nspecies_composition\n\n  speciesCode  proportion\n0         ROW           1\n\n\n\n\n\nspecies_composition <- data.frame(\"speciesCode\" = \"ROW\", \"proportion\" = 1)\nspecies_composition\n\n  speciesCode proportion\n1         ROW          1\n\n\n\n\n\nForm a new data frame, select the relevant columns, and merge the species composition data frame.\n\nPythonR\n\n\n\ndf = baseline_WCCTreeValues_ROW_1p5_Thinned\ndf = df[[\"speciesCode\", \"period\", \"cumTotalCarbon\"]]\ndf = df.merge(species_composition, on = [\"speciesCode\"])\ndf.head()\n\n  speciesCode  period  cumTotalCarbon  proportion\n0         ROW     0-5             2.7           1\n1         ROW    5-10             9.6           1\n2         ROW   10-15            28.9           1\n3         ROW   15-20            70.6           1\n4         ROW   20-25            91.1           1\n\n\n\n\n\ndf <- baseline_WCCTreeValues_ROW_1p5_Thinned\ndf <- df |>\n    dplyr::select(speciesCode, period, cumTotalCarbon) |>\n    dplyr::left_join(species_composition, on = \"speciesCode\")\n\nJoining, by = \"speciesCode\"\n\ndf |> head()\n\n  speciesCode period cumTotalCarbon proportion\n1         ROW    0-5            2.7          1\n2         ROW   5-10            9.6          1\n3         ROW  10-15           28.9          1\n4         ROW  15-20           70.6          1\n5         ROW  20-25           91.1          1\n6         ROW  25-30          110.5          1\n\n\n\n\n\nMultiply the ’Cumulative total sequestration” data (cumTotalCarbon) by the species proportion and estimated area.\n\nPythonR\n\n\n\ndf[\"cumTotalCarbonSite (A)\"] = df[\"cumTotalCarbon\"] * df[\"proportion\"] * wccEstArea\ndf.head()\n\n  speciesCode  period  cumTotalCarbon  proportion  cumTotalCarbonSite (A)\n0         ROW     0-5             2.7           1                    32.4\n1         ROW    5-10             9.6           1                   115.2\n2         ROW   10-15            28.9           1                   346.8\n3         ROW   15-20            70.6           1                   847.2\n4         ROW   20-25            91.1           1                  1093.2\n\n\n\n\n\ndf <- df |>\n    dplyr::mutate(\"cumTotalCarbonSite (A)\" = cumTotalCarbon * proportion * wccEstArea)\ndf |> head()\n\n  speciesCode period cumTotalCarbon proportion cumTotalCarbonSite (A)\n1         ROW    0-5            2.7          1                   32.4\n2         ROW   5-10            9.6          1                  115.2\n3         ROW  10-15           28.9          1                  346.8\n4         ROW  15-20           70.6          1                  847.2\n5         ROW  20-25           91.1          1                 1093.2\n6         ROW  25-30          110.5          1                 1326.0\n\n\n\n\n\nSum across all species.\n\nPythonR\n\n\n\ndf = df.drop(columns = [\"speciesCode\", \"cumTotalCarbon\", \"proportion\"])\ndf = df.set_index(\"period\")\ndf.sum(axis = 0).to_frame()\n\n                              0\ncumTotalCarbonSite (A)  77065.2\n\ndf = df.reset_index()\ndf.head()\n\n   period  cumTotalCarbonSite (A)\n0     0-5                    32.4\n1    5-10                   115.2\n2   10-15                   346.8\n3   15-20                   847.2\n4   20-25                  1093.2\n\n\n\n\n\ndf <- df |>\n    dplyr::select(-speciesCode, -cumTotalCarbon, -proportion) |>\n    dplyr::group_by(period) |>\n    dplyr::summarise(`cumTotalCarbonSite (A)` = sum(`cumTotalCarbonSite (A)`))\ndf |> head()\n\n# A tibble: 6 × 2\n  period   `cumTotalCarbonSite (A)`\n  <chr>                       <dbl>\n1 \"  0-5\"                      32.4\n2 \"  5-10\"                    115. \n3 \" 10-15\"                    347. \n4 \" 15-20\"                    847. \n5 \" 20-25\"                   1093. \n6 \" 25-30\"                   1326  \n\n\n\n\n\nAdd a 20% buffer by multiplying the Cumulative total sequestration for the site by 0.8\n\nPythonR\n\n\n\ndf[\"cumTotalCarbonSiteReduced (B)\"] = df[\"cumTotalCarbonSite (A)\"] * 0.8\ndf.head()\n\n   period  cumTotalCarbonSite (A)  cumTotalCarbonSiteReduced (B)\n0     0-5                    32.4                          25.92\n1    5-10                   115.2                          92.16\n2   10-15                   346.8                         277.44\n3   15-20                   847.2                         677.76\n4   20-25                  1093.2                         874.56\n\n\n\n\n\ndf <- df |>\n    dplyr::mutate(\"cumTotalCarbonSiteReduced (B)\" = `cumTotalCarbonSite (A)` * 0.8)\ndf |> head()\n\n# A tibble: 6 × 3\n  period   `cumTotalCarbonSite (A)` `cumTotalCarbonSiteReduced (B)`\n  <chr>                       <dbl>                           <dbl>\n1 \"  0-5\"                      32.4                            25.9\n2 \"  5-10\"                    115.                             92.2\n3 \" 10-15\"                    347.                            277. \n4 \" 15-20\"                    847.                            678. \n5 \" 20-25\"                   1093.                            875. \n6 \" 25-30\"                   1326                            1061. \n\n\n\n\n\nRetrieve the total establishment emissions for the selected spacing and add to the dataframe.\n\nPythonR\n\n\n\ntotalEstablishmentC = baseline_WCCEstablishment[(baseline_WCCEstablishment.seedlingSpacing == 1.5) & (baseline_WCCEstablishment.variable == \"total\")]\ntotalEstablishmentC = totalEstablishmentC.drop(columns = [\"seedlingSpacing\", \"variable\"]).reset_index(drop = True)\ntotalEstablishmentC = totalEstablishmentC.rename(columns = {\"totalEmissions\": \"establishmentCarbonLoss (C)\"})\ndf[\"establishmentCarbonLoss (C)\"] = totalEstablishmentC._get_value(0, 0, takeable = True)\ndf.head()\n\n   period  ...  establishmentCarbonLoss (C)\n0     0-5  ...                      -81.412\n1    5-10  ...                      -81.412\n2   10-15  ...                      -81.412\n3   15-20  ...                      -81.412\n4   20-25  ...                      -81.412\n\n[5 rows x 4 columns]\n\n\n\n\n\ntotalEstablishmentC = baseline_WCCEstablishment |>\n    dplyr::filter(seedlingSpacing == 1.5) |>\n    dplyr::filter(variable == \"total\") |>\n    dplyr::select(-seedlingSpacing, -variable) |>\n    dplyr::rename(\"establishmentCarbonLoss (C)\" = \"totalEmissions\") |>\n    dplyr::pull(\"establishmentCarbonLoss (C)\")\n\ndf <- df |>\n    dplyr::mutate(\"establishmentCarbonLoss (C)\" = totalEstablishmentC)\n\ndf |> head()\n\n# A tibble: 6 × 4\n  period   `cumTotalCarbonSite (A)` `cumTotalCarbonSiteReduced (B)` establishm…¹\n  <chr>                       <dbl>                           <dbl>        <dbl>\n1 \"  0-5\"                      32.4                            25.9        -81.4\n2 \"  5-10\"                    115.                             92.2        -81.4\n3 \" 10-15\"                    347.                            277.         -81.4\n4 \" 15-20\"                    847.                            678.         -81.4\n5 \" 20-25\"                   1093.                            875.         -81.4\n6 \" 25-30\"                   1326                            1061.         -81.4\n# … with abbreviated variable name ¹​`establishmentCarbonLoss (C)`\n\n\n\n\n\nCalculate soil carbon flux by summing soil loss and soil sequestration data . To do this first identify the % topsoil carbon (0-30cm) loss associated with the method of site preparation and soil type.\n\nPythonR\n\n\n\nestablishmentMethods = pandas.DataFrame.from_dict(data = {\"MethodSitePrep\": [\"Negligible Disturbance\", \"Low Disturbance\", \"Medium Disturbance\", \"High Disturbance\", \"Very High Disturbance\"],\n                                                          \"Organomineral\": [0, 5, 10, 20, 40],\n                                                          \"Mineral\": [0, 0, 2, 5, 10]})\n\nestablishmentMethods = establishmentMethods.set_index(\"MethodSitePrep\")\npercSoilLoss = establishmentMethods._get_value(\"Medium Disturbance\", \"Mineral\")\n\npercSoilLoss\n\n2\n\n\n\n\n\nestablishmentMethods <- data.frame(\"MethodSitePrep\" = c(\"Negligible Disturbance\", \"Low Disturbance\", \"Medium Disturbance\", \"High Disturbance\", \"Very High Disturbance\"),\n                                   \"Organomineral\" = c(0, 5, 10, 20, 40),\n                                   \"Mineral\" = c(0, 0, 2, 5, 10))\n\npercSoilLoss <- establishmentMethods |>\n    dplyr::filter(MethodSitePrep == \"Medium Disturbance\") |>\n    dplyr::pull(Mineral)\n\npercSoilLoss\n\n[1] 2\n\n\n\n\n\nRetrieve the soil carbon lost for the selected country, previous land use, and % topsoil carbon (0-30cm) loss identified above.\n\nPythonR\n\n\n\nsoilCLoss = baseline_WCCSoilLoss[baseline_WCCSoilLoss[\"topsoilCarbonSubtract\"] == percSoilLoss]\nsoilCLoss = soilCLoss.set_index(\"Country\")\nsoilCLoss = soilCLoss._get_value(\"England\", \"Arable\")\n\nsoilCLoss\n\n-5.133333333\n\n\n\n\n\nsoilCLoss <- baseline_WCCSoilLoss |>\n    dplyr::filter(topsoilCarbonSubtract == percSoilLoss,\n                  Country == \"England\") |>\n    dplyr::pull(Arable)\n\nsoilCLoss\n\n[1] -5.133333\n\n\n\n\n\nCalculate the total net soil carbon flux.\n\nPythonR\n\n\n\nsoilCFlux = baseline_WCCSoilSeq\nsoilCFlux[\"cumSoilLoss\"] = soilCLoss\nsoilCFlux[\"cumSoilCarbonFlux (D)\"] = soilCFlux[\"cumSoilLoss\"] + soilCFlux[\"cumSoilSeq\"]\nsoilCFlux = soilCFlux.drop(columns = [\"cumSoilSeq\", \"cumSoilLoss\"])\n\nsoilCFlux.head()\n\n   period  cumSoilCarbonFlux (D)\n0     0-5               0.366667\n1    5-10               5.866667\n2   10-15              11.366667\n3   15-20              16.866667\n4   20-25              22.366667\n\n\n\n\n\nsoilCFlux <- baseline_WCCSoilSeq |>\n    dplyr::mutate(\"cumSoilLoss\" = soilCLoss,\n                  \"cumSoilCarbonFlux (D)\" = cumSoilLoss + cumSoilSeq) |>\n    dplyr::select(-cumSoilSeq, -cumSoilLoss)\n\nsoilCFlux |> head()\n\n  period cumSoilCarbonFlux (D)\n1    0-5             0.3666667\n2   5-10             5.8666667\n3  10-15            11.3666667\n4  15-20            16.8666667\n5  20-25            22.3666667\n6  25-30            27.8666667\n\n\n\n\n\nMerge soil carbon flux.\n\nPythonR\n\n\n\ndf = df.merge(soilCFlux, on = [\"period\"])\n\ndf.head()\n\n   period  ...  cumSoilCarbonFlux (D)\n0     0-5  ...               0.366667\n1    5-10  ...               5.866667\n2   10-15  ...              11.366667\n3   15-20  ...              16.866667\n4   20-25  ...              22.366667\n\n[5 rows x 5 columns]\n\n\n\n\n\ndf <- df |>\n    dplyr::left_join(soilCFlux, on = \"period\")\n\nJoining, by = \"period\"\n\ndf |> head()\n\n# A tibble: 6 × 5\n  period   `cumTotalCarbonSite (A)` cumTotalCarbonSiteReduced …¹ estab…² cumSo…³\n  <chr>                       <dbl>                        <dbl>   <dbl>   <dbl>\n1 \"  0-5\"                      32.4                         25.9   -81.4   0.367\n2 \"  5-10\"                    115.                          92.2   -81.4   5.87 \n3 \" 10-15\"                    347.                         277.    -81.4  11.4  \n4 \" 15-20\"                    847.                         678.    -81.4  16.9  \n5 \" 20-25\"                   1093.                         875.    -81.4  22.4  \n6 \" 25-30\"                   1326                         1061.    -81.4  27.9  \n# … with abbreviated variable names ¹​`cumTotalCarbonSiteReduced (B)`,\n#   ²​`establishmentCarbonLoss (C)`, ³​`cumSoilCarbonFlux (D)`\n\n\n\n\n\nCalculate the total cumulative carbon sequestration.\n\nPythonR\n\n\n\ndf[\"totalProjectCarbonSeq (E)\"] = df[\"cumTotalCarbonSiteReduced (B)\"] + df[\"establishmentCarbonLoss (C)\"] + df[\"cumSoilCarbonFlux (D)\"]\n\ndf.head()\n\n   period  ...  totalProjectCarbonSeq (E)\n0     0-5  ...                 -55.125333\n1    5-10  ...                  16.614667\n2   10-15  ...                 207.394667\n3   15-20  ...                 613.214667\n4   20-25  ...                 815.514667\n\n[5 rows x 6 columns]\n\n\n\n\n\ndf <- df |>\n    dplyr::mutate(\"totalProjectCarbonSeq (E)\" = `cumTotalCarbonSiteReduced (B)` + `establishmentCarbonLoss (C)` + `cumSoilCarbonFlux (D)`)\n\ndf |> head()\n\n# A tibble: 6 × 6\n  period   `cumTotalCarbonSite (A)` cumTotalCarbonSite…¹ estab…² cumSo…³ total…⁴\n  <chr>                       <dbl>                <dbl>   <dbl>   <dbl>   <dbl>\n1 \"  0-5\"                      32.4                 25.9   -81.4   0.367   -55.1\n2 \"  5-10\"                    115.                  92.2   -81.4   5.87     16.6\n3 \" 10-15\"                    347.                 277.    -81.4  11.4     207. \n4 \" 15-20\"                    847.                 678.    -81.4  16.9     613. \n5 \" 20-25\"                   1093.                 875.    -81.4  22.4     816. \n6 \" 25-30\"                   1326                 1061.    -81.4  27.9    1007. \n# … with abbreviated variable names ¹​`cumTotalCarbonSiteReduced (B)`,\n#   ²​`establishmentCarbonLoss (C)`, ³​`cumSoilCarbonFlux (D)`,\n#   ⁴​`totalProjectCarbonSeq (E)`\n\n\n\n\n\nOptionally, add Baseline and Leakage data then calculate the adjusted, net total project carbon sequestration.\n\nPythonR\n\n\n\ndf[\"Baseline (F)\"] = 0\ndf[\"Leakage (G)\"] = 0\ndf[\"netTotalProjectCarbonSeq (H)\"] = df[\"totalProjectCarbonSeq (E)\"]+ df[\"Baseline (F)\"] + df[\"Leakage (G)\"]\n\ndf.head()\n\n   period  cumTotalCarbonSite (A)  ...  Leakage (G)  netTotalProjectCarbonSeq (H)\n0     0-5                    32.4  ...            0                    -55.125333\n1    5-10                   115.2  ...            0                     16.614667\n2   10-15                   346.8  ...            0                    207.394667\n3   15-20                   847.2  ...            0                    613.214667\n4   20-25                  1093.2  ...            0                    815.514667\n\n[5 rows x 9 columns]\n\n\n\n\n\ndf <- df |>\n    dplyr::mutate(\"Baseline (F)\" = 0, \"Leakage (G)\" = 0) |>\n    dplyr::mutate(\"netTotalProjectCarbonSeq (H)\" = `totalProjectCarbonSeq (E)` + `Baseline (F)` + `Leakage (G)`)\n\ndf |> head()\n\n# A tibble: 6 × 9\n  period   cumTotalCar…¹ cumTo…² estab…³ cumSo…⁴ total…⁵ Basel…⁶ Leaka…⁷ netTo…⁸\n  <chr>            <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>\n1 \"  0-5\"           32.4    25.9   -81.4   0.367   -55.1       0       0   -55.1\n2 \"  5-10\"         115.     92.2   -81.4   5.87     16.6       0       0    16.6\n3 \" 10-15\"         347.    277.    -81.4  11.4     207.        0       0   207. \n4 \" 15-20\"         847.    678.    -81.4  16.9     613.        0       0   613. \n5 \" 20-25\"        1093.    875.    -81.4  22.4     816.        0       0   816. \n6 \" 25-30\"        1326    1061.    -81.4  27.9    1007.        0       0  1007. \n# … with abbreviated variable names ¹​`cumTotalCarbonSite (A)`,\n#   ²​`cumTotalCarbonSiteReduced (B)`, ³​`establishmentCarbonLoss (C)`,\n#   ⁴​`cumSoilCarbonFlux (D)`, ⁵​`totalProjectCarbonSeq (E)`, ⁶​`Baseline (F)`,\n#   ⁷​`Leakage (G)`, ⁸​`netTotalProjectCarbonSeq (H)`\n\n\n\n\n\nCalculate the claimable carbon sequestration by adding a final 20% buffer.\n\nPythonR\n\n\n\ndf[\"claimableCarbonSeq (J)\"] = df[\"netTotalProjectCarbonSeq (H)\"] * 0.8\ndf.head()\n\n   period  ...  claimableCarbonSeq (J)\n0     0-5  ...              -44.100267\n1    5-10  ...               13.291733\n2   10-15  ...              165.915733\n3   15-20  ...              490.571733\n4   20-25  ...              652.411733\n\n[5 rows x 10 columns]\n\n\n\n\n\ndf <- df |>\n    dplyr::mutate(\"claimableCarbonSeq (J)\" = `netTotalProjectCarbonSeq (H)` * 0.8)\n\ndf |> head()\n\n# A tibble: 6 × 10\n  period cumTo…¹ cumTo…² estab…³ cumSo…⁴ total…⁵ Basel…⁶ Leaka…⁷ netTo…⁸ claim…⁹\n  <chr>    <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>\n1 \"  0-…    32.4    25.9   -81.4   0.367   -55.1       0       0   -55.1   -44.1\n2 \"  5-…   115.     92.2   -81.4   5.87     16.6       0       0    16.6    13.3\n3 \" 10-…   347.    277.    -81.4  11.4     207.        0       0   207.    166. \n4 \" 15-…   847.    678.    -81.4  16.9     613.        0       0   613.    491. \n5 \" 20-…  1093.    875.    -81.4  22.4     816.        0       0   816.    652. \n6 \" 25-…  1326    1061.    -81.4  27.9    1007.        0       0  1007.    806. \n# … with abbreviated variable names ¹​`cumTotalCarbonSite (A)`,\n#   ²​`cumTotalCarbonSiteReduced (B)`, ³​`establishmentCarbonLoss (C)`,\n#   ⁴​`cumSoilCarbonFlux (D)`, ⁵​`totalProjectCarbonSeq (E)`, ⁶​`Baseline (F)`,\n#   ⁷​`Leakage (G)`, ⁸​`netTotalProjectCarbonSeq (H)`, ⁹​`claimableCarbonSeq (J)`\n\n\n\n\n\nCalculate the mean claimable carbon sequestration per hectare, in tCO2e per ha per year\n\nPythonR\n\n\n\ndf[\"meanClaimableCarbonSeqPerHa (K)\"] = df[\"claimableCarbonSeq (J)\"] / wccEstArea\ndf.head()\n\n   period  ...  meanClaimableCarbonSeqPerHa (K)\n0     0-5  ...                        -3.675022\n1    5-10  ...                         1.107644\n2   10-15  ...                        13.826311\n3   15-20  ...                        40.880978\n4   20-25  ...                        54.367644\n\n[5 rows x 11 columns]\n\n\n\n\n\ndf <- df |>\n    dplyr::mutate(\"meanClaimableCarbonSeqPerHa (K)\" = `claimableCarbonSeq (J)` / wccEstArea)\n\ndf |> head()\n\n# A tibble: 6 × 11\n  period cumTo…¹ cumTo…² estab…³ cumSo…⁴ total…⁵ Basel…⁶ Leaka…⁷ netTo…⁸ claim…⁹\n  <chr>    <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>\n1 \"  0-…    32.4    25.9   -81.4   0.367   -55.1       0       0   -55.1   -44.1\n2 \"  5-…   115.     92.2   -81.4   5.87     16.6       0       0    16.6    13.3\n3 \" 10-…   347.    277.    -81.4  11.4     207.        0       0   207.    166. \n4 \" 15-…   847.    678.    -81.4  16.9     613.        0       0   613.    491. \n5 \" 20-…  1093.    875.    -81.4  22.4     816.        0       0   816.    652. \n6 \" 25-…  1326    1061.    -81.4  27.9    1007.        0       0  1007.    806. \n# … with 1 more variable: `meanClaimableCarbonSeqPerHa (K)` <dbl>, and\n#   abbreviated variable names ¹​`cumTotalCarbonSite (A)`,\n#   ²​`cumTotalCarbonSiteReduced (B)`, ³​`establishmentCarbonLoss (C)`,\n#   ⁴​`cumSoilCarbonFlux (D)`, ⁵​`totalProjectCarbonSeq (E)`, ⁶​`Baseline (F)`,\n#   ⁷​`Leakage (G)`, ⁸​`netTotalProjectCarbonSeq (H)`, ⁹​`claimableCarbonSeq (J)`"
  },
  {
    "objectID": "UsingESCWCC.html",
    "href": "UsingESCWCC.html",
    "title": "Using the ESCWCC API",
    "section": "",
    "text": "This notebook details how to call the ESCWCC API endpoint and use the response data to obtain woodland carbon code (WCC) metrics such as the claimable carbon sequestration using R and Python."
  },
  {
    "objectID": "UsingESCWCC.html#import-required-packages",
    "href": "UsingESCWCC.html#import-required-packages",
    "title": "Using the ESCWCC API",
    "section": "Import required packages",
    "text": "Import required packages\n\nPythonR\n\n\n\nimport requests\nimport json\nimport pandas\nimport pprint\npandas.options.mode.chained_assignment = None\n\n\n\n\nlibrary(httr)\n\nWarning: package 'httr' was built under R version 4.2.3\n\nlibrary(jsonlite)\nlibrary(dplyr)\n\nWarning: package 'dplyr' was built under R version 4.2.3\n\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union"
  },
  {
    "objectID": "UsingESCWCC.html#compose-api-request",
    "href": "UsingESCWCC.html#compose-api-request",
    "title": "Using the ESCWCC API",
    "section": "Compose API request",
    "text": "Compose API request\nEstablish API POST request URL\n\nPythonR\n\n\n\nbase_url = \"http://209.97.132.245:8000/ESCWCC/\"\n\n\n\n\nbase_url <- \"http://209.97.132.245:8000/ESCWCC/\"\n\n\n\n\nSet the longitude (lon) and latitude (lat) in EPSG:3857.\n\nPythonR\n\n\n\nlon = -141102.7542\nlat = 6830259.9735\n\n\n\n\nlon <- -141102.7542\nlat <- 6830259.9735\n\n\n\n\nEstablish the site modifier options.\n\nawcAdj:bool\n\nTrue\nFalse\n\ndrainage:int\n\n0 = None.\n1 = Drainage installed.\n\nbrash:int\n\n0 = None (new planting).\n1 = Fresh brash (<18 months).\n2 = Brash (>18 months).\n\nfertiliser:int\n\n0 = None.\n1 = Fertiliser applied.\n\nexposure:int\n\n0 = None.\n1 = Exposed ridge/Coastal zone.\n2 = Local shelter/Less exposed/Underplanting.\n\n\n\nPythonR\n\n\n\nawcAdj = True\ndrainage = 0\nbrash = 0\nfertiliser = 0\nexposure = 0\n\n\n\n\nawcAdj <- TRUE\ndrainage <- 0\nbrash <- 0\nfertiliser <- 0\nexposure <- 0\n\n\n\n\nEstablish the climate model (climateModel), climate scenario/s (climateScenList), climate years (climateYearList), species group filter (filter), and ESC version (escVersion).\n\nclimateModel:str\n\nA string, either “UKCP09” or “UKCP18-1km”\n\nclimateScenList:List\n\nFor “UKCP09” a list containing any of: [“A1b3q0”]\nFor “UKCP18-1km” a list containing any of: [“RCP2.6”, “RCP4.5”, “RCP6.0”, “RCP8.5”]\n\nclimateYearList:List\n\nFor “UKCP09” a list containing any of the following timeslices: [“1961_1990”, “2000_2020”, “2010_2030”, “2020_2040”, “2030_2050”, “2040_2060”, “2050_2070”, “2060_2080”, “2070_2090”]\nFor “UKCP18-1km” a list containing any of the following timeslices: [“1980_2000”, “1990_2010”, “2000_2020”, “2010_2030”, “2020_2040”, “2030_2050”, “2040_2060”, “2050_2070”, “2060_2080”]\n\n\n\nPythonR\n\n\n\nclimateModel = \"UKCP18-1km\"\nclimateScenList = [\"RCP2.6\", \"RCP8.5\"]\nclimateYearList = [\"1980_2000\", \"2060_2080\"]\nfilter = 0\nescVersion = \"4.33\"\n\n\n\n\nclimateModel <- \"UKCP18-1km\"\nclimateScenList <- list(\"RCP2.6\", \"RCP8.5\")\nclimateYearList <- list(\"1980_2000\", \"2060_2080\")\nfilter <- 0\nescVersion <- \"4.33\"\n\n\n\n\nEstablish the Woodland Carbon Code (WCC) version (wccVersion), the planting spacing (wccSpacing), management regime (thinning or no thinning) (wccManagement), period (wccPeriod), area of the site to be established (wccEstArea) in hectares (ha), the length of roads to be constructed (wccRoadLength) in km, and the area, if any, of arable land with mineral soil to be planted (wccSoilArea) in ha.\n\nwccVersion:str\n\n“2.4” = “2.4”, (March 2021)\n\nwccSpacing:list\n\n0 = ‘all’, equivalent to {0: [1.2, 2.5, 3.0, 1.4, 1.7, 1.8, 1.5, 2.0]}\n\nwccManagement:list\n\n0 = ‘all’, equivalent to {0: [“NO_thin”, “Thinned”]}\n\nwccPeriod:list\n\n0 = ‘all’, equivalent to {0: [“0”, “0-5”, “5-10”, “10-15”, “15-20”, “20-25”, “25-30”, “30-35”, “35-40”, “40-45”, “45-50”, “50-55”, “55-60”, “60-65”, “65-70”, “70-75”, “75-80”, “80-85”, “85-90”, “90-95”, “95-100”, “100-105”, “105-110”, “110-115”, “115-120”, “120-125”, “125-130”, “130-135”, “135-140”, “140-145”, “145-150”, “150-155”, “155-160”, “160-165”, “165-170”, “170-175”, “175-180”, “180-185”, “185-190”, “190-195”, “195-200”]}\n\nwccEstArea:float\n\n0 by default, any positive number.\n\nwccSeedlingArea:float\n\n0 by default, any positive number.\n\nwccGroundPrepFuelArea:float\n\n0 by default, any positive number.\n\nwccTreeSheltersArea:float\n\n0 by default, any positive number.\n\nwccFencingArea:float\n\n0 by default, any positive number.\n\nwccHerbicideArea:float\n\n0 by default, any positive number.\n\nwccRoadLength:float\n\n0 by default, any positive number.\n\nwccSoilArea:float\n\n0 by default, any positive number.\n\n\n\nPythonR\n\n\n\nwccVersion = \"2.4\"\nwccSpacing = 0\nwccManagement = 0\nwccPeriod = 0\nwccSeedlingArea = 12\nwccGroundPrepFuelArea = 24\nwccTreeSheltersArea = 12\nwccFencingArea = 6\nwccHerbicideArea = 6\nwccRoadLength = 1\nwccSoilArea = 2\n\n\n\n\nwccVersion <- \"2.4\"\nwccSpacing <- 0\nwccManagement <- 0\nwccPeriod <- 0\nwccSeedlingArea <- 12\nwccGroundPrepFuelArea <- 24\nwccTreeSheltersArea <- 12\nwccFencingArea <- 6\nwccHerbicideArea <- 6\nwccRoadLength <- 1\nwccSoilArea <- 2\n\n\n\n\nEstablish the manual Soil Moisture Regime (SMR) and Soil Nutrient Regime (SNR) modifier values. Enter None, or omit from the request body (req_body) below if you do not wish to manually alter the values.\n\nsmr:float, any number between 0 and 8. Indicative categorical values are as follows:\n\n1 = Very Wet\n2 = Wet\n3 = Moist\n4 = Moist\n5 = Fresh\n6 = Slightly Dry\n7 = Moderately Dry\n8 = Very Dry\n\nsnr:float, any number between 0 and 6. Indicative categorical values are as follows:\n\n0 = Very Poor (VP1)\n0.5 = Very Poor (VP2)\n1 = Very Poor (VP3)\n1.5 = Very Poor - Poor\n2 = Poor\n3 = Medium\n4 = Rich\n5 = Very Rich\n6 = Carbonate\n\n\n\nPythonR\n\n\n\nsmr = None\nsnr = None\n\n\n\n\nsmr <- NA\nsnr <- NA\n\n\n\n\nCompose the request body. Optionally, you can accept the default values for all parameters apart from lon and lat by emitting the parameters from the request body (as shown in the commented out code below).\n\nPythonR\n\n\n\n# req_body = {\"lon\": lon, \"lat\": lat}\n\nreq_body = {\"lon\": lon, \"lat\": lat,\n            \"awcAdj\": awcAdj,\n            \"drainage\": drainage, \"brash\": brash, \"fertiliser\": fertiliser, \"exposure\": exposure, \n            \"climateModel\": climateModel,\n            \"climateScenList\": climateScenList, \"climateYearList\": climateYearList,\n            \"filter\": filter, \"escVersion\": escVersion, \"wccVersion\": wccVersion, \n            \"smr\": smr, \"snr\": snr,\n            \"wccSpacing\": wccSpacing, \"wccManagement\": wccManagement, \"wccPeriod\": wccPeriod,\n            \"wccSeedlingArea\": wccSeedlingArea,\n            \"wccGroundPrepFuelArea\": wccGroundPrepFuelArea,\n            \"wccTreeSheltersArea\": wccTreeSheltersArea,\n            \"wccFencingArea\": wccFencingArea,\n            \"wccHerbicideArea\": wccHerbicideArea,\n            \"wccRoadLength\": wccRoadLength, \"wccSoilArea\": wccSoilArea}\n\n\n\n\n# req_list = list(\"smr\" = smr, \"snr\" = snr)\n\nreq_list <- list(\"lon\" = lon, \"lat\" = lat, \n                 \"awcAdj\" = awcAdj,\n                 \"drainage\" = drainage, \"brash\" = brash, \"fertiliser\" =  fertiliser, \"exposure\" = exposure,\n                 \"climateModel\" = climateModel,\n                 \"climateScenList\" = climateScenList, \"climateYearList\" = climateYearList,\n                 \"filter\" = filter, \"escVersion\" = escVersion, \"wccVersion\" = wccVersion, \n                 \"smr\" = smr, \"snr\" = snr,\n                 \"wccSpacing\" = wccSpacing, \"wccManagement\" = wccManagement, \"wccPeriod\" = wccPeriod,\n                 \"wccSeedlingArea\" = wccSeedlingArea,\n                 \"wccGroundPrepFuelArea\" = wccGroundPrepFuelArea,\n                 \"wccTreeSheltersArea\" = wccTreeSheltersArea,\n                 \"wccFencingArea\" = wccFencingArea,\n                 \"wccHerbicideArea\" = wccHerbicideArea,\n                 \"wccRoadLength\" = wccRoadLength, \"wccSoilArea\" = wccSoilArea)\n\nreq_body <- jsonlite::toJSON(req_list, auto_unbox = TRUE)"
  },
  {
    "objectID": "UsingESCWCC.html#make-the-api-call",
    "href": "UsingESCWCC.html#make-the-api-call",
    "title": "Using the ESCWCC API",
    "section": "Make the API call",
    "text": "Make the API call\nCall the ESCWCC API.\n\nPythonR\n\n\n\nESCWCCresponse = requests.post(url = base_url, json = req_body)\nESCWCCresponse.status_code == 200\n\nTrue\n\n\n\n\n\nESCWCCresponse <- httr::POST(url = base_url, body = req_body)\nESCWCCresponse$status_code == 200\n\n[1] TRUE\n\n\n\n\n\nEstablish a function to deserialize the json response into a nested dictionary or nested list.\n\nPythonR\n\n\n\ndef deserialize(responseJson:str) -> dict:\n    \n    loadedJson = json.loads(responseJson)\n\n    for k,v in loadedJson.items():\n        for w,s in loadedJson[k].items():\n            for t,c in loadedJson[k][w].items():\n                loadedJson[k][w][t] = pandas.DataFrame.from_dict(data = json.loads(c))\n            \n    return loadedJson\n\n\n\n\ndeserialize <- function(responseJson){\n\n    responseContent <- httr::content(responseJson)\n    responseContent <- jsonlite::fromJSON(responseContent)\n\n    for(i in names(responseContent)){\n        for(j in names(responseContent[[i]])){\n            for(k in names(responseContent[[i]][[j]])){\n                responseContent[[i]][[j]][[k]] = jsonlite::fromJSON(responseContent[[i]][[j]][[k]])\n            }\n        }\n    }\n    return(responseContent)\n}\n\n\n\n\nCall the deserializeResults function on the ESC API output.\n\nPythonR\n\n\n\nESCWCCresponse_dict = deserialize(responseJson = ESCWCCresponse.json())\n\n\n\n\nESCWCCresponse_list <- deserialize(responseJson = ESCWCCresponse)"
  },
  {
    "objectID": "UsingESCWCC.html#explore-results",
    "href": "UsingESCWCC.html#explore-results",
    "title": "Using the ESCWCC API",
    "section": "Explore results",
    "text": "Explore results\nThe object produced (ESCWCCresponse_dict or ESCWCCResponse_list) is a nested dictionary with the following structure:\nESCresponse_dict (dict or list)\n├── Metadata (dict or list)\n│   ├── ESCMetadata (dict or list)\n│   │   ├── ESCTreeMetadata (DataFrame)\n│   ├── WCCMetadata (dict or list)\n│   │   ├── WCCMetadata (DataFrame)\n│   ├── APIMetadata (dict or list)\n│   │   ├── DateTime (DataFrame)\n└───RCP2.6 (dict)\n│   ├── 1980_2000 (dict)\n│   │   ├── ESCDoseVals (DataFrame)\n│   │   ├── ESCResponseVals (DataFrame)\n│   │   ├── ESCSuitMetrics (DataFrame)\n│   │   ├── WCCTreeValues (DataFrame)\n│   │   ├── WCCSoilLoss (DataFrame)\n│   │   ├── WCCSoilSeq (DataFrame)\n│   │   ├── WCCEstablishment (DataFrame)\n│   ├── 2060_2080 (dict)\n│   │   ├── ESCDoseVals (DataFrame)\n│   │   ├── ESCResponseVals (DataFrame)\n│   │   ├── ESCSuitMetrics (DataFrame)\n│   │   ├── WCCTreeValues (DataFrame)\n│   │   ├── WCCSoilLoss (DataFrame)\n│   │   ├── WCCSoilSeq (DataFrame)\n│   │   ├── WCCEstablishment (DataFrame)\n└───RCP8.5 (dict)\n    ├── 1980_2000 (dict)\n    │   ├── ESCDoseVals (DataFrame)\n    │   ├── ESCResponseVals (DataFrame)\n    │   ├── ESCSuitMetrics (DataFrame)\n    │   ├── WCCTreeValues (DataFrame)\n    │   ├── WCCSoilLoss (DataFrame)\n    │   ├── WCCSoilSeq (DataFrame)\n    │   ├── WCCEstablishment (DataFrame)\n    ├── 2060_2080 (dict)\n    │   ├── ESCDoseVals (DataFrame)\n    │   ├── ESCResponseVals (DataFrame)\n    │   ├── ESCSuitMetrics (DataFrame)\n    │   ├── WCCTreeValues (DataFrame)\n    │   ├── WCCSoilLoss (DataFrame)\n    │   ├── WCCSoilSeq (DataFrame)\n    │   ├── WCCEstablishment (DataFrame)\n\nPythonR\n\n\n\npprint.pprint(ESCWCCresponse_dict, depth = 2)\n\n{'Metadata': {'APIMetadata': {...}, 'ESCMetadata': {...}, 'WCCMetadata': {...}},\n 'RCP2.6': {'1980_2000': {...}, '2060_2080': {...}},\n 'RCP8.5': {'1980_2000': {...}, '2060_2080': {...}}}\n\n\n\n\n\nstr(ESCWCCresponse_list, max.level = 3)\n\nList of 3\n $ Metadata:List of 3\n  ..$ ESCMetadata:List of 1\n  .. ..$ ESCTreeMetadata:'data.frame':  1 obs. of  1 variable:\n  ..$ WCCMetadata:List of 1\n  .. ..$ WCCMetadata:'data.frame':  1 obs. of  3 variables:\n  ..$ APIMetadata:List of 1\n  .. ..$ DateTime:'data.frame': 1 obs. of  1 variable:\n $ RCP2.6  :List of 2\n  ..$ 1980_2000:List of 7\n  .. ..$ ESCDoseVals     :'data.frame': 10 obs. of  7 variables:\n  .. ..$ ESCResponseVals :'data.frame': 372 obs. of  3 variables:\n  .. ..$ ESCSuitMetrics  :'data.frame': 62 obs. of  12 variables:\n  .. ..$ WCCTreeValues   :'data.frame': 10880 obs. of  22 variables:\n  .. ..$ WCCEstablishment:'data.frame': 42 obs. of  6 variables:\n  .. ..$ WCCSoilLoss     :'data.frame': 24 obs. of  5 variables:\n  .. ..$ WCCSoilSeq      :'data.frame': 20 obs. of  2 variables:\n  ..$ 2060_2080:List of 7\n  .. ..$ ESCDoseVals     :'data.frame': 10 obs. of  7 variables:\n  .. ..$ ESCResponseVals :'data.frame': 372 obs. of  3 variables:\n  .. ..$ ESCSuitMetrics  :'data.frame': 62 obs. of  12 variables:\n  .. ..$ WCCTreeValues   :'data.frame': 10880 obs. of  22 variables:\n  .. ..$ WCCEstablishment:'data.frame': 42 obs. of  6 variables:\n  .. ..$ WCCSoilLoss     :'data.frame': 24 obs. of  5 variables:\n  .. ..$ WCCSoilSeq      :'data.frame': 20 obs. of  2 variables:\n $ RCP8.5  :List of 2\n  ..$ 1980_2000:List of 7\n  .. ..$ ESCDoseVals     :'data.frame': 10 obs. of  7 variables:\n  .. ..$ ESCResponseVals :'data.frame': 372 obs. of  3 variables:\n  .. ..$ ESCSuitMetrics  :'data.frame': 62 obs. of  12 variables:\n  .. ..$ WCCTreeValues   :'data.frame': 10880 obs. of  22 variables:\n  .. ..$ WCCEstablishment:'data.frame': 42 obs. of  6 variables:\n  .. ..$ WCCSoilLoss     :'data.frame': 24 obs. of  5 variables:\n  .. ..$ WCCSoilSeq      :'data.frame': 20 obs. of  2 variables:\n  ..$ 2060_2080:List of 7\n  .. ..$ ESCDoseVals     :'data.frame': 10 obs. of  7 variables:\n  .. ..$ ESCResponseVals :'data.frame': 372 obs. of  3 variables:\n  .. ..$ ESCSuitMetrics  :'data.frame': 62 obs. of  12 variables:\n  .. ..$ WCCTreeValues   :'data.frame': 10880 obs. of  22 variables:\n  .. ..$ WCCEstablishment:'data.frame': 42 obs. of  6 variables:\n  .. ..$ WCCSoilLoss     :'data.frame': 24 obs. of  5 variables:\n  .. ..$ WCCSoilSeq      :'data.frame': 20 obs. of  2 variables:\n\n\n\n\n\nAccess the ESC & WCC data frames from the API response for a given climate scenario using the following code.\nThe ESCDoseVals data frame contains the environmental dose variables obtained from the modelled data and/or manually entered, which are then modified by the aforementioned API query parameters drainage, brash, fertiliser, and exposure. For more information on the underlying method see the Forest Research Bulletin 124 and the Forest Research Technical Paper 20. Column definitions:\n\nSMR - soil moisture regime\nSNR - soil nutrient regime\nAT - accumulated temperature\nCT - continentality\nDAMS - direct aspect method of scoring\nMD - moisture deficit\nItem - The stage of modification of the environmental dose variable values.\n\n\nPythonR\n\n\n\nESCDoseVals = ESCWCCresponse_dict.get(\"RCP2.6\").get(\"1980_2000\").get(\"ESCDoseVals\")\nESCDoseVals\n\n   SMR  SNR           AT  ...       DAMS          MD                   Item\n0  3.0  5.0  1694.748779  ...  12.258021  178.133179          Values - Base\n1  NaN  NaN          NaN  ...        NaN         NaN        Values - Manual\n2  3.0  5.0  1694.748779  ...  12.258021  178.133179        Values - PreMod\n3  0.0  0.0     0.000000  ...   0.000000    0.000000    Modifier - Drainage\n4  0.0  0.0     0.000000  ...   0.000000    0.000000       Modifier - Brash\n5  0.0  0.0     0.000000  ...   0.000000    0.000000  Modifier - Fertiliser\n6  0.0  0.0     0.000000  ...   0.000000    0.000000    Modifier - Exposure\n7  3.0  5.0  1694.748779  ...  12.258021  178.133179        Values - preAWC\n8  0.0  0.0     0.000000  ...   0.000000  -46.000000         Modifier - AWC\n9  3.0  5.0  1694.748779  ...  12.258021  132.133179         Values - Final\n\n[10 rows x 7 columns]\n\n\n\n\n\nESCDoseVals = ESCWCCresponse_list$`RCP2.6`$`1980_2000`$ESCDoseVals\nESCDoseVals\n\n   SMR SNR       AT       CT     DAMS       MD                  Item\n1    3   5 1694.749 10.86863 12.25802 178.1332         Values - Base\n2   NA  NA       NA       NA       NA       NA       Values - Manual\n3    3   5 1694.749 10.86863 12.25802 178.1332       Values - PreMod\n4    0   0    0.000  0.00000  0.00000   0.0000   Modifier - Drainage\n5    0   0    0.000  0.00000  0.00000   0.0000      Modifier - Brash\n6    0   0    0.000  0.00000  0.00000   0.0000 Modifier - Fertiliser\n7    0   0    0.000  0.00000  0.00000   0.0000   Modifier - Exposure\n8    3   5 1694.749 10.86863 12.25802 178.1332       Values - preAWC\n9    0   0    0.000  0.00000  0.00000 -46.0000        Modifier - AWC\n10   3   5 1694.749 10.86863 12.25802 132.1332        Values - Final\n\n\n\n\n\nThe ESCResponseVals data frame contains data on the response of each tree species to each environmental dose metric. Column definitions:\n\nspeciesCode - The Forest Research species code for the species.\nmetric - The environmental dose variable (see above).\nresponse - The response of the tree species to the environmental dose variable. A unitless value between 0 and 1.\n\n\nPythonR\n\n\n\nESCResponseVals = ESCWCCresponse_dict.get(\"RCP2.6\").get(\"1980_2000\").get(\"ESCResponseVals\")\nESCResponseVals.head()\n\n  speciesCode metric  response\n0          AH     AT  1.000000\n1          AH     CT  1.000000\n2          AH   DAMS  0.964892\n3          AH     MD  1.000000\n4          AH    SMR  0.755714\n\n\n\n\n\nESCResponseVals = ESCWCCresponse_list$`RCP2.6`$`1980_2000`$ESCResponseVals\nESCResponseVals |> head()\n\n  speciesCode metric  response\n1          AH     AT 1.0000000\n2          AH     CT 1.0000000\n3          AH   DAMS 0.9648923\n4          AH     MD 1.0000000\n5          AH    SMR 0.7557143\n6          AH    SNR 1.0000000\n\n\n\n\n\nThe ESCSuitMetrics data frame contains a range of summary data relating to the suitability of each tree species based on the ESCResponseVals data. Column definitions:\n\nspeciesCode - The Forest Research species code for the species.\nspeciesScientific - The scientific name of the species.\nspeciesName - The common name of the species.\nmaxYC - The maximum yield class of that species\nthreat - Any major threats to that tree species which should be taken into account when considering planting that species.\nlimFactorInclAT - The limiting factor (metric with the lowest response) including AT.\nlimFactorInclATResponse - The response value for limiting factor (metric with the lowest response) including AT.\nlimFactorExclAT - The limiting factor (metric with the lowest response) excluding AT.\nlimFactorExclATResponse - The response value for limiting factor (metric with the lowest response) excluding AT.\nTimberSuitability - The suitability of that tree species for planting as a timber crop.\nEcologicalSuitability - The suitability of that tree species for planting.\nestimatedYC - The estimated yield class.\n\n\nPythonR\n\n\n\nESCSuitMetrics = ESCWCCresponse_dict.get(\"RCP2.6\").get(\"1980_2000\").get(\"ESCSuitMetrics\")\nESCSuitMetrics.head()\n\n  speciesCode   speciesScientific  ... EcologicalSuitability  estimatedYC\n0          AH  Fraxinus excelsior  ...              0.755714     9.068572\n1         AMA    Acer macrophylum  ...              0.000000     0.000000\n2         ASP     Populus tremula  ...              0.962698    11.552382\n3          BE     Fagus sylvatica  ...              0.305714     3.057143\n4         BPO       Populus nigra  ...              0.978258    15.652131\n\n[5 rows x 12 columns]\n\n\n\n\n\nESCSuitMetrics = ESCWCCresponse_list$`RCP2.6`$`1980_2000`$ESCSuitMetrics\nESCSuitMetrics |> head()\n\n  speciesCode  speciesScientific    speciesName maxYC  threat limFactorInclAT\n1          AH Fraxinus excelsior            Ash    12 Chalara             SMR\n2         AMA   Acer macrophylum Big leaf maple    12    None              CT\n3         ASP    Populus tremula          Aspen    12    None             SNR\n4          BE    Fagus sylvatica          Beech    10    None             SMR\n5         BPO      Populus nigra   Black poplar    16    None            DAMS\n6         CAR    Alnus glutinosa   Common alder    12    None            DAMS\n  limFactorInclATResponse limFactorExclAT limFactorExclATResponse\n1               0.7557143             SMR               0.7557143\n2               0.0000000              CT               0.0000000\n3               0.9626985             SNR               0.9626985\n4               0.3057143             SMR               0.3057143\n5               0.9782582            DAMS               0.9782582\n6               0.8542166            DAMS               0.8542166\n  TimberSuitability EcologicalSuitability estimatedYC\n1         0.7557143             0.7557143    9.068572\n2         0.0000000             0.0000000    0.000000\n3         0.9626985             0.9626985   11.552382\n4         0.3057143             0.3057143    3.057143\n5         0.9782582             0.9782582   15.652131\n6         0.8542166             0.8542166   10.250599\n\n\n\n\n\nThe WCCTreeValues data frame contains data from the woodland carbon code biomass carbon lookup tables (BCLT) and clearfell max sequence values for the yield class nearest to the ESC estimated yield class. Column definitions:\n\nspeciesCode - The Forest Research species code for the species.\nwccCode - The WCC species code mapped to the ESC species, from which the WCC data is retrieved.\nspeciesScientific - The scientific name of the species.\nspeciesName - The common name of the species.\nestimatedYC - The estimated yield class.\nroundedYC - The nearest even yield class\nminWCCYC - The lowest yield class with corresponding values for the wccCode biomass carbon lookup tables (BCLT) data\nmaxWCCYC - The highest yield class with corresponding values for the wccCode biomass carbon lookup tables (BCLT) data\nfinalYC - The yield class used to retrieve the BCLT data. If the roundedYC is less than the minWCCYC this is set to the minWCCYC. If the roundedYC is greater than the maxWCCYC this is set to the maxWCCYC, else the roundedYC value is used.\nspacing - The planting spacing. Retrieved from column C in the BCLT tables.\nmanagement - The management regime for the planted area, thinned or un-thinned. Retrieved from column E in the BCLT tables.\nperiod - The period of years associated with the wcc data. Retrieved from column F in the BCLT tables.\nstandingCarbonYr - The carbon contained within the above-ground biomass of the trees planted on site. Retrieved from column G in the BCLT tables. Units of tCO2e/ha/yr.\ndebrisCarbonYr - The carbon contained within the debris on site. Retrieved from column H in the BCLT tables. Units of tCO2e/ha/yr.\ntotalCarbonYr - The total carbon contained on site, equal to the sum of standingCarbonYr and debrisCarbonYr. Retrieved from column I in the BCLT tables. Units of tCO2e/ha/yr.\ncumCarbon5Yr - The cumulative carbon sequestered on site over the period stipulated in the period column. Retrieved from column J in the BCLT tables. Units of tCO2e/ha/period.\ncumBiomassCarbon - The cumulative carbon sequestered on site over up until the period stipulated in the period column. Retrieved from column K in the BCLT tables. Units of tCO2e/ha.\ncumEmissionsMgmt - The cumulative emissions from ongiong management on site. Retrieved from column L in the BCLT tables. Units of tCO2e/ha.\ncumTotalCarbon - The total cumulative emissions on site. Retrieved from column M in the BCLT tables. Units of tCO2e/ha.\nremCarbonYr - The quantity of carbon removed from the site yearly. Retrieved from column N in the BCLT tables. Units of tCO2e/ha/yr.\nperiodEnd - The rotation length stipulated in columns F to AK of the “Clearfell_Max_Seq_Values” sheet of the excel tool. Mapped to the last year of the period present in the period column.\nclearfellCapCarbon - The Clearfell Cap Value associated with the periodEnd, wccCode, spacing, YC, and management. Units of tCO2e.\n\n\n\n\n\n\n\nWarning\n\n\n\nThe finalYC may differ considerably from the ESC estimatedYC due to the limited number of species - YC combinations for which data is available from the WCC BCLT tables. It is left to the API user to determine whether the use of the BCLT values returned for a given finalYC are appropriate.\n\n\n\nPythonR\n\n\n\nWCCTreeValues = ESCWCCresponse_dict.get(\"RCP2.6\").get(\"1980_2000\").get(\"WCCTreeValues\")\nWCCTreeValues.head()\n\n  speciesCode wccCode  ... periodEnd clearfellCapCarbon\n0          AH     SAB  ...       5.0                6.5\n1          AH     SAB  ...      10.0               13.0\n2          AH     SAB  ...      15.0               64.0\n3          AH     SAB  ...      20.0              115.0\n4          AH     SAB  ...      25.0              175.0\n\n[5 rows x 22 columns]\n\n\n\n\n\nWCCTreeValues = ESCWCCresponse_list$`RCP2.6`$`1980_2000`$WCCTreeValues\nWCCTreeValues |> head()\n\n  speciesCode wccCode  speciesScientific speciesName estimatedYC roundedYC\n1          AH     SAB Fraxinus excelsior         Ash    9.068572        10\n2          AH     SAB Fraxinus excelsior         Ash    9.068572        10\n3          AH     SAB Fraxinus excelsior         Ash    9.068572        10\n4          AH     SAB Fraxinus excelsior         Ash    9.068572        10\n5          AH     SAB Fraxinus excelsior         Ash    9.068572        10\n6          AH     SAB Fraxinus excelsior         Ash    9.068572        10\n  minWCCYC maxWCCYC finalYC spacing management period standingCarbonYr\n1        2       12      10     1.5    NO_thin    0-5             4.07\n2        2       12      10     1.5    NO_thin   5-10            12.42\n3        2       12      10     1.5    NO_thin  10-15            29.50\n4        2       12      10     1.5    NO_thin  15-20            26.84\n5        2       12      10     1.5    NO_thin  20-25            19.91\n6        2       12      10     1.5    NO_thin  25-30            14.58\n  debrisCarbonYr totalCarbonYr cumCarbon5Yr cumBiomassCarbon cumEmissionsMgmt\n1           0.52          4.59         23.0             23.0                0\n2           0.65         13.06         65.3             88.3                0\n3           1.34         30.84        154.2            242.5                0\n4           0.82         27.66        138.3            380.8                0\n5           3.53         23.44        117.2            498.0                0\n6          12.91         27.49        137.5            635.5                0\n  cumTotalCarbon remCarbonYr periodEnd clearfellCapCarbon\n1           23.0           0         5                6.5\n2           88.3           0        10               13.0\n3          242.5           0        15               64.0\n4          380.8           0        20              115.0\n5          498.0           0        25              175.0\n6          635.5           0        30              235.0\n\n\n\n\n\nThe WCCEstablishment data frame contains the establishment emission values calculated using the same methodology as in the “StandardProjectCarbonCalculator” sheet of the excel tool. Column definitions:\n\nseedlingSpacing - The spacing between each sapling in meters.\nsize - The size metric (length or area) associated with the variable\nsizeUnit - The units (km or ha) associated with the size metric.\nemissionsPerSize - The emissions in tCO2e per size unit.\ntotalEmissions - The carbon emissions associated with that seedlingSpacing and variable. Units of tCO2e.\nvariable - The establishment emission source, one of:\n\nseedling\ngroundPrepFuel\ntreeShelters\nfencing\nherbicide\n\n\n\nPythonR\n\n\n\nWCCEstablishment = ESCWCCresponse_dict.get(\"RCP2.6\").get(\"1980_2000\").get(\"WCCEstablishment\")\nWCCEstablishment.head()\n\n   seedlingSpacing  size sizeUnit  emissionsPerSize  totalEmissions variable\n0              1.2   1.0       km            -43.12          -43.12     road\n1              1.4   1.0       km            -43.12          -43.12     road\n2              1.5   1.0       km            -43.12          -43.12     road\n3              1.7   1.0       km            -43.12          -43.12     road\n4              2.0   1.0       km            -43.12          -43.12     road\n\n\n\n\n\nWCCEstablishment = ESCWCCresponse_list$`RCP2.6`$`1980_2000`$WCCEstablishment\nWCCEstablishment |> head()\n\n  seedlingSpacing size sizeUnit emissionsPerSize totalEmissions variable\n1             1.2    1       km           -43.12         -43.12     road\n2             1.4    1       km           -43.12         -43.12     road\n3             1.5    1       km           -43.12         -43.12     road\n4             1.7    1       km           -43.12         -43.12     road\n5             2.0    1       km           -43.12         -43.12     road\n6             2.5    1       km           -43.12         -43.12     road\n\n\n\n\n\nThe WCCSoilLoss data frame contains data on the soil carbon emissions during the year of establishment (Year 1) for each country, percentage topsoil carbon to be subtracted and previous land use. Column definitions:\n\nCountry - The country in which the site is located.\ntopsoilCarbonSubtract - the percentage of topsoil carbon to subtract .\nSeminatural - the soil carbon emissions associated with the previous land-use “Semi-natural”, units in tCO2e/ha.\nPasture - the soil carbon emissions associated with the previous land-use “Pasture, units in tCO2e/ha.\nArable - the soil carbon emissions associated with the previous land-use “Arable”, units in tCO2e/ha.\n\n\nPythonR\n\n\n\nWCCSoilLoss = ESCWCCresponse_dict.get(\"RCP2.6\").get(\"1980_2000\").get(\"WCCSoilLoss\")\nWCCSoilLoss.head()\n\n            Country  topsoilCarbonSubtract  Seminatural   Pasture    Arable\n0           England                      0          0.0  0.000000  0.000000\n1          Scotland                      0          0.0  0.000000  0.000000\n2             Wales                      0          0.0  0.000000  0.000000\n3  Northern Ireland                      0          0.0  0.000000  0.000000\n4           England                      2         -8.8 -5.866667 -5.133333\n\n\n\n\n\nWCCSoilLoss = ESCWCCresponse_list$`RCP2.6`$`1980_2000`$WCCSoilLoss\nWCCSoilLoss |> head()\n\n           Country topsoilCarbonSubtract Seminatural    Pasture    Arable\n1          England                     0     0.00000   0.000000  0.000000\n2         Scotland                     0     0.00000   0.000000  0.000000\n3            Wales                     0     0.00000   0.000000  0.000000\n4 Northern Ireland                     0     0.00000   0.000000  0.000000\n5          England                     2    -8.80000  -5.866667 -5.133333\n6         Scotland                     2   -11.73333 -11.733333 -8.800000\n\n\n\n\n\nThe WCCSoilSeq data frame contains data on the cumulative soil carbon sequestration for mineral soils which where the former land use was arable agriculture. Column definitions:\n\nperiod - The period of years associated with the wcc data. Retrieved from column Y in the “StandardProjectCarbonCalculator” sheet of the excel tool.\ncumSoilSeq - Calculated by multiplying column AY in the “StandardProjectCarbonCalculator” by the site area. Units in tCO2e.\n\n\nPythonR\n\n\n\nWCCSoilSeq = ESCWCCresponse_dict.get(\"RCP2.6\").get(\"1980_2000\").get(\"WCCSoilSeq\")\nWCCSoilSeq.head()\n\n   period  cumSoilSeq\n0     0-5         5.5\n1    5-10        11.0\n2   10-15        16.5\n3   15-20        22.0\n4   20-25        27.5\n\n\n\n\n\nWCCSoilSeq = ESCWCCresponse_list$`RCP2.6`$`1980_2000`$WCCSoilSeq\nWCCSoilSeq |> head()\n\n  period cumSoilSeq\n1    0-5        5.5\n2   5-10       11.0\n3  10-15       16.5\n4  15-20       22.0\n5  20-25       27.5\n6  25-30       33.0"
  },
  {
    "objectID": "UsingESCWCC.html#calculate-claimable-carbon-sequestration",
    "href": "UsingESCWCC.html#calculate-claimable-carbon-sequestration",
    "title": "Using the ESCWCC API",
    "section": "Calculate Claimable Carbon Sequestration",
    "text": "Calculate Claimable Carbon Sequestration\nTo calculate the average total claimable sequestration by year in tCO2e/ha perform the following calculations using the API outputs.\nColumns suffixed with (<[A-Z]>) correspond to the columns CB to CM of Version 2.4 (March 2021) of the WCC excel tool.\nFirst, retrieve the WCC Biomass Carbon Lookup Table (BCLT) and Clearfell Max Seq Values (CMSV) values for selected species, e.g. the major tree species present in the National Vegetation Classification (NVC) W14 “Beech-oak woodland with bramble”: Beech (BE), Holly (HOL), and Pedunculate oak (POK).\n\nPythonR\n\n\n\nWCCTreeValues_selSpp = WCCTreeValues[WCCTreeValues[\"speciesCode\"].isin([\"BE\", \"HOL\", \"POK\"])]\nWCCTreeValues_selSpp.head()\n\n    speciesCode wccCode  ... periodEnd clearfellCapCarbon\n720         HOL     SAB  ...       NaN                NaN\n721         HOL     SAB  ...       NaN                NaN\n722         HOL     SAB  ...       NaN                NaN\n723         HOL     SAB  ...       NaN                NaN\n724         HOL     SAB  ...       NaN                NaN\n\n[5 rows x 22 columns]\n\n\n\n\n\nWCCTreeValues_selSpp <- WCCTreeValues |>\n    dplyr::filter(speciesCode %in% c(\"BE\", \"HOL\", \"POK\"))\nWCCTreeValues_selSpp |> head()\n\n  speciesCode wccCode speciesScientific speciesName estimatedYC roundedYC\n1         HOL     SAB   Ilex aquifolium       Holly    1.981833         2\n2         HOL     SAB   Ilex aquifolium       Holly    1.981833         2\n3         HOL     SAB   Ilex aquifolium       Holly    1.981833         2\n4         HOL     SAB   Ilex aquifolium       Holly    1.981833         2\n5         HOL     SAB   Ilex aquifolium       Holly    1.981833         2\n6         HOL     SAB   Ilex aquifolium       Holly    1.981833         2\n  minWCCYC maxWCCYC finalYC spacing management period standingCarbonYr\n1        2       12       2     1.5    NO_thin    0-5               NA\n2        2       12       2     1.5    NO_thin   5-10               NA\n3        2       12       2     1.5    NO_thin  10-15               NA\n4        2       12       2     1.5    NO_thin  15-20               NA\n5        2       12       2     1.5    NO_thin  20-25               NA\n6        2       12       2     1.5    NO_thin  25-30               NA\n  debrisCarbonYr totalCarbonYr cumCarbon5Yr cumBiomassCarbon cumEmissionsMgmt\n1             NA            NA           NA               NA               NA\n2             NA            NA           NA               NA               NA\n3             NA            NA           NA               NA               NA\n4             NA            NA           NA               NA               NA\n5             NA            NA           NA               NA               NA\n6             NA            NA           NA               NA               NA\n  cumTotalCarbon remCarbonYr periodEnd clearfellCapCarbon\n1            2.7          NA        NA                 NA\n2            9.6          NA        NA                 NA\n3           28.9          NA        NA                 NA\n4           76.4          NA        NA                 NA\n5          120.6          NA        NA                 NA\n6          159.7          NA        NA                 NA\n\n\n\n\n\n\n\n\n\n\n\nWarning\n\n\n\nData in WCCTreeValues varies by spacing and management for each wccCode and therefore speciesCode. It is advised that the user checks what spacing and management values are available for the selected species.\n\n\n\nPythonR\n\n\n\nWCCTreeValues_selSpp[[\"speciesCode\", \"spacing\", \"management\"]].drop_duplicates().reset_index()\n\n    index speciesCode  spacing management\n0     720         HOL      1.5    NO_thin\n1     760         HOL      1.5    Thinned\n2     800         HOL      2.5    NO_thin\n3     840         HOL      2.5    Thinned\n4     880         HOL      3.0    NO_thin\n5     920         HOL      3.0    Thinned\n6    5760          BE      1.2    NO_thin\n7    5800          BE      1.2    Thinned\n8    5840          BE      2.5    NO_thin\n9    5880          BE      2.5    Thinned\n10   5920          BE      3.0    NO_thin\n11   5960          BE      3.0    Thinned\n12   9440         POK      1.2    NO_thin\n13   9480         POK      1.2    Thinned\n14   9520         POK      2.5    NO_thin\n15   9560         POK      2.5    Thinned\n16   9600         POK      3.0    NO_thin\n17   9640         POK      3.0    Thinned\n\n\n\n\n\nWCCTreeValues_selSpp |>\n    dplyr::select(speciesCode, spacing, management) |>\n    unique()\n\n    speciesCode spacing management\n1           HOL     1.5    NO_thin\n41          HOL     1.5    Thinned\n81          HOL     2.5    NO_thin\n121         HOL     2.5    Thinned\n161         HOL     3.0    NO_thin\n201         HOL     3.0    Thinned\n241          BE     1.2    NO_thin\n281          BE     1.2    Thinned\n321          BE     2.5    NO_thin\n361          BE     2.5    Thinned\n401          BE     3.0    NO_thin\n441          BE     3.0    Thinned\n481         POK     1.2    NO_thin\n521         POK     1.2    Thinned\n561         POK     2.5    NO_thin\n601         POK     2.5    Thinned\n641         POK     3.0    NO_thin\n681         POK     3.0    Thinned\n\n\n\n\n\nSelect the BCLT and CMSV values for a particular spacing and management regime, e.g. 3m and Thinned, checking that data is available for each as above.\n\nPythonR\n\n\n\nWCCTreeValues_selSpp_3_Thinned = WCCTreeValues_selSpp[(WCCTreeValues_selSpp.spacing == 3) & (WCCTreeValues_selSpp.management == \"Thinned\")]\nWCCTreeValues_selSpp_3_Thinned.head()\n\n    speciesCode wccCode  ... periodEnd clearfellCapCarbon\n920         HOL     SAB  ...       NaN                NaN\n921         HOL     SAB  ...       NaN                NaN\n922         HOL     SAB  ...       NaN                NaN\n923         HOL     SAB  ...       NaN                NaN\n924         HOL     SAB  ...       NaN                NaN\n\n[5 rows x 22 columns]\n\n\n\n\n\nWCCTreeValues_selSpp_3_Thinned <- WCCTreeValues_selSpp |>\n    dplyr::filter(spacing == 3,\n                  management == \"Thinned\")\nWCCTreeValues_selSpp_3_Thinned |> head()\n\n  speciesCode wccCode speciesScientific speciesName estimatedYC roundedYC\n1         HOL     SAB   Ilex aquifolium       Holly    1.981833         2\n2         HOL     SAB   Ilex aquifolium       Holly    1.981833         2\n3         HOL     SAB   Ilex aquifolium       Holly    1.981833         2\n4         HOL     SAB   Ilex aquifolium       Holly    1.981833         2\n5         HOL     SAB   Ilex aquifolium       Holly    1.981833         2\n6         HOL     SAB   Ilex aquifolium       Holly    1.981833         2\n  minWCCYC maxWCCYC finalYC spacing management period standingCarbonYr\n1        2       12       2       3    Thinned    0-5               NA\n2        2       12       2       3    Thinned   5-10               NA\n3        2       12       2       3    Thinned  10-15               NA\n4        2       12       2       3    Thinned  15-20               NA\n5        2       12       2       3    Thinned  20-25               NA\n6        2       12       2       3    Thinned  25-30               NA\n  debrisCarbonYr totalCarbonYr cumCarbon5Yr cumBiomassCarbon cumEmissionsMgmt\n1             NA            NA           NA               NA               NA\n2             NA            NA           NA               NA               NA\n3             NA            NA           NA               NA               NA\n4             NA            NA           NA               NA               NA\n5             NA            NA           NA               NA               NA\n6             NA            NA           NA               NA               NA\n  cumTotalCarbon remCarbonYr periodEnd clearfellCapCarbon\n1            1.1          NA        NA                 NA\n2            5.3          NA        NA                 NA\n3           20.2          NA        NA                 NA\n4           60.0          NA        NA                 NA\n5           91.1          NA        NA                 NA\n6          110.5          NA        NA                 NA\n\n\n\n\n\nDefine a species composition for the site and join to a trimmed WCCTreeValues dataframe.\n\nPythonR\n\n\n\nspecies_composition = pandas.DataFrame.from_dict(data = {\"speciesCode\": [\"BE\", \"HOL\", \"POK\"], \"proportion\": [0.4, 0.2, 0.4]})\nspecies_composition\n\n  speciesCode  proportion\n0          BE         0.4\n1         HOL         0.2\n2         POK         0.4\n\n\n\n\n\nspecies_composition <- data.frame(\"speciesCode\" = c(\"BE\", \"HOL\", \"POK\"), \"proportion\" = c(0.4, 0.2, 0.4))\nspecies_composition\n\n  speciesCode proportion\n1          BE        0.4\n2         HOL        0.2\n3         POK        0.4\n\n\n\n\n\nForm a new data frame, select the relevant columns, and merge the species composition data frame.\n\nPythonR\n\n\n\ndf = WCCTreeValues_selSpp_3_Thinned\ndf = df[[\"speciesCode\", \"period\", \"cumTotalCarbon\"]]\ndf = df.merge(species_composition, on = [\"speciesCode\"])\ndf.head()\n\n  speciesCode  period  cumTotalCarbon  proportion\n0         HOL     0-5             1.1         0.2\n1         HOL    5-10             5.3         0.2\n2         HOL   10-15            20.2         0.2\n3         HOL   15-20            60.0         0.2\n4         HOL   20-25            91.1         0.2\n\n\n\n\n\ndf <- WCCTreeValues_selSpp_3_Thinned\ndf <- df |>\n    dplyr::select(speciesCode, period, cumTotalCarbon) |>\n    dplyr::left_join(species_composition, by = \"speciesCode\")\ndf |> head()\n\n  speciesCode period cumTotalCarbon proportion\n1         HOL    0-5            1.1        0.2\n2         HOL   5-10            5.3        0.2\n3         HOL  10-15           20.2        0.2\n4         HOL  15-20           60.0        0.2\n5         HOL  20-25           91.1        0.2\n6         HOL  25-30          110.5        0.2\n\n\n\n\n\nMultiply the ’Cumulative total sequestration” data (cumTotalCarbon) by the species proportion (proportion) and area planting with seedlings/saplings (wccSeedlingArea).\n\nPythonR\n\n\n\ndf[\"cumTotalCarbonSite (A)\"] = df[\"cumTotalCarbon\"] * df[\"proportion\"] * wccSeedlingArea\ndf.head()\n\n  speciesCode  period  cumTotalCarbon  proportion  cumTotalCarbonSite (A)\n0         HOL     0-5             1.1         0.2                    2.64\n1         HOL    5-10             5.3         0.2                   12.72\n2         HOL   10-15            20.2         0.2                   48.48\n3         HOL   15-20            60.0         0.2                  144.00\n4         HOL   20-25            91.1         0.2                  218.64\n\n\n\n\n\ndf <- df |>\n    dplyr::mutate(\"cumTotalCarbonSite (A)\" = cumTotalCarbon * proportion * wccSeedlingArea)\ndf |> head()\n\n  speciesCode period cumTotalCarbon proportion cumTotalCarbonSite (A)\n1         HOL    0-5            1.1        0.2                   2.64\n2         HOL   5-10            5.3        0.2                  12.72\n3         HOL  10-15           20.2        0.2                  48.48\n4         HOL  15-20           60.0        0.2                 144.00\n5         HOL  20-25           91.1        0.2                 218.64\n6         HOL  25-30          110.5        0.2                 265.20\n\n\n\n\n\nSum across all species.\n\nPythonR\n\n\n\ndf = df.drop(columns = [\"speciesCode\", \"cumTotalCarbon\", \"proportion\"])\ndf = df.groupby(\"period\").sum().reset_index()\ndf.head()\n\n   period  cumTotalCarbonSite (A)\n0     0-5                   24.72\n1    5-10                  130.80\n2   10-15                  522.24\n3   15-20                 1452.00\n4   20-25                 2017.68\n\n\n\n\n\ndf <- df |>\n    dplyr::select(-speciesCode, -cumTotalCarbon, -proportion) |>\n    dplyr::group_by(period) |>\n    dplyr::summarise(`cumTotalCarbonSite (A)` = sum(`cumTotalCarbonSite (A)`))\ndf |> head()\n\n# A tibble: 6 × 2\n  period   `cumTotalCarbonSite (A)`\n  <chr>                       <dbl>\n1 \"  0-5\"                      24.7\n2 \"  5-10\"                    131. \n3 \" 10-15\"                    522. \n4 \" 15-20\"                   1452  \n5 \" 20-25\"                   2018. \n6 \" 25-30\"                   2543. \n\n\n\n\n\nAdd a 20% buffer by multiplying the Cumulative total sequestration for the site by 0.8\n\nPythonR\n\n\n\ndf[\"cumTotalCarbonSiteReduced (B)\"] = df[\"cumTotalCarbonSite (A)\"] * 0.8\ndf.head()\n\n   period  cumTotalCarbonSite (A)  cumTotalCarbonSiteReduced (B)\n0     0-5                   24.72                         19.776\n1    5-10                  130.80                        104.640\n2   10-15                  522.24                        417.792\n3   15-20                 1452.00                       1161.600\n4   20-25                 2017.68                       1614.144\n\n\n\n\n\ndf <- df |>\n    dplyr::mutate(\"cumTotalCarbonSiteReduced (B)\" = `cumTotalCarbonSite (A)` * 0.8)\ndf |> head()\n\n# A tibble: 6 × 3\n  period   `cumTotalCarbonSite (A)` `cumTotalCarbonSiteReduced (B)`\n  <chr>                       <dbl>                           <dbl>\n1 \"  0-5\"                      24.7                            19.8\n2 \"  5-10\"                    131.                            105. \n3 \" 10-15\"                    522.                            418. \n4 \" 15-20\"                   1452                            1162. \n5 \" 20-25\"                   2018.                           1614. \n6 \" 25-30\"                   2543.                           2035. \n\n\n\n\n\nRetrieve the total establishment emissions for the selected spacing and add to the dataframe.\n\nPythonR\n\n\n\ntotalEstablishmentC = WCCEstablishment[(WCCEstablishment.seedlingSpacing == 1.5)]\ntotalEstablishmentC = totalEstablishmentC[\"totalEmissions\"].sum()\ndf[\"establishmentCarbonLoss (C)\"] = totalEstablishmentC\ndf.head()\n\n   period  ...  establishmentCarbonLoss (C)\n0     0-5  ...                      -72.286\n1    5-10  ...                      -72.286\n2   10-15  ...                      -72.286\n3   15-20  ...                      -72.286\n4   20-25  ...                      -72.286\n\n[5 rows x 4 columns]\n\n\n\n\n\ntotalEstablishmentC <- WCCEstablishment |>\n    dplyr::filter(seedlingSpacing == 1.5) |>\n    dplyr::summarise(sum(totalEmissions)) |>\n    as.double()\n\ndf <- df |>\n    dplyr::mutate(\"establishmentCarbonLoss (C)\" = totalEstablishmentC)\n\ndf |> head()\n\n# A tibble: 6 × 4\n  period   cumTotalCarbonSite (A…¹ cumTotalCarbonSiteRe…² establishmentCarbonL…³\n  <chr>                      <dbl>                  <dbl>                  <dbl>\n1 \"  0-5\"                     24.7                   19.8                  -72.3\n2 \"  5-10\"                   131.                   105.                   -72.3\n3 \" 10-15\"                   522.                   418.                   -72.3\n4 \" 15-20\"                  1452                   1162.                   -72.3\n5 \" 20-25\"                  2018.                  1614.                   -72.3\n6 \" 25-30\"                  2543.                  2035.                   -72.3\n# ℹ abbreviated names: ¹​`cumTotalCarbonSite (A)`,\n#   ²​`cumTotalCarbonSiteReduced (B)`, ³​`establishmentCarbonLoss (C)`\n\n\n\n\n\nCalculate soil carbon flux by summing soil loss and soil sequestration data . To do this first identify the % topsoil carbon (0-30cm) loss associated with the method of site preparation and soil type.\n\nPythonR\n\n\n\nestablishmentMethods = pandas.DataFrame.from_dict(data = {\"MethodSitePrep\": [\"Negligible Disturbance\", \"Low Disturbance\", \"Medium Disturbance\", \"High Disturbance\", \"Very High Disturbance\"],\n                                                          \"Organomineral\": [0, 5, 10, 20, 40],\n                                                          \"Mineral\": [0, 0, 2, 5, 10]})\n\nestablishmentMethods = establishmentMethods.set_index(\"MethodSitePrep\")\npercSoilLoss = establishmentMethods._get_value(\"Medium Disturbance\", \"Mineral\")\n\npercSoilLoss\n\n2\n\n\n\n\n\nestablishmentMethods <- data.frame(\"MethodSitePrep\" = c(\"Negligible Disturbance\", \"Low Disturbance\", \"Medium Disturbance\", \"High Disturbance\", \"Very High Disturbance\"),\n                                   \"Organomineral\" = c(0, 5, 10, 20, 40),\n                                   \"Mineral\" = c(0, 0, 2, 5, 10))\n\npercSoilLoss <- establishmentMethods |>\n    dplyr::filter(MethodSitePrep == \"Medium Disturbance\") |>\n    dplyr::pull(Mineral)\n\npercSoilLoss\n\n[1] 2\n\n\n\n\n\nRetrieve the soil carbon lost for the selected country, previous land use, and % topsoil carbon (0-30cm) loss identified above.\n\nPythonR\n\n\n\nsoilCLoss = WCCSoilLoss[WCCSoilLoss[\"topsoilCarbonSubtract\"] == percSoilLoss]\nsoilCLoss = soilCLoss.set_index(\"Country\")\nsoilCLoss = soilCLoss._get_value(\"England\", \"Arable\")\n\nsoilCLoss\n\n-5.133333333\n\n\n\n\n\nsoilCLoss <- WCCSoilLoss |>\n    dplyr::filter(topsoilCarbonSubtract == percSoilLoss,\n                  Country == \"England\") |>\n    dplyr::pull(Arable)\n\nsoilCLoss\n\n[1] -5.133333\n\n\n\n\n\nCalculate the total net soil carbon flux.\n\nPythonR\n\n\n\nsoilCFlux = WCCSoilSeq\nsoilCFlux[\"cumSoilLoss\"] = soilCLoss\nsoilCFlux[\"cumSoilCarbonFlux (D)\"] = soilCFlux[\"cumSoilLoss\"] + soilCFlux[\"cumSoilSeq\"]\nsoilCFlux = soilCFlux.drop(columns = [\"cumSoilSeq\", \"cumSoilLoss\"])\n\nsoilCFlux.head()\n\n   period  cumSoilCarbonFlux (D)\n0     0-5               0.366667\n1    5-10               5.866667\n2   10-15              11.366667\n3   15-20              16.866667\n4   20-25              22.366667\n\n\n\n\n\nsoilCFlux <- WCCSoilSeq |>\n    dplyr::mutate(\"cumSoilLoss\" = soilCLoss,\n                  \"cumSoilCarbonFlux (D)\" = cumSoilLoss + cumSoilSeq) |>\n    dplyr::select(-cumSoilSeq, -cumSoilLoss)\n\nsoilCFlux |> head()\n\n  period cumSoilCarbonFlux (D)\n1    0-5             0.3666667\n2   5-10             5.8666667\n3  10-15            11.3666667\n4  15-20            16.8666667\n5  20-25            22.3666667\n6  25-30            27.8666667\n\n\n\n\n\nMerge soil carbon flux.\n\nPythonR\n\n\n\ndf = df.merge(soilCFlux, on = [\"period\"])\n\ndf.head()\n\n   period  ...  cumSoilCarbonFlux (D)\n0     0-5  ...               0.366667\n1    5-10  ...               5.866667\n2   10-15  ...              11.366667\n3   15-20  ...              16.866667\n4   20-25  ...              22.366667\n\n[5 rows x 5 columns]\n\n\n\n\n\ndf <- df |>\n    dplyr::left_join(soilCFlux, by = \"period\")\n\ndf |> head()\n\n# A tibble: 6 × 5\n  period   cumTotalCarbonSite (A…¹ cumTotalCarbonSiteRe…² establishmentCarbonL…³\n  <chr>                      <dbl>                  <dbl>                  <dbl>\n1 \"  0-5\"                     24.7                   19.8                  -72.3\n2 \"  5-10\"                   131.                   105.                   -72.3\n3 \" 10-15\"                   522.                   418.                   -72.3\n4 \" 15-20\"                  1452                   1162.                   -72.3\n5 \" 20-25\"                  2018.                  1614.                   -72.3\n6 \" 25-30\"                  2543.                  2035.                   -72.3\n# ℹ abbreviated names: ¹​`cumTotalCarbonSite (A)`,\n#   ²​`cumTotalCarbonSiteReduced (B)`, ³​`establishmentCarbonLoss (C)`\n# ℹ 1 more variable: `cumSoilCarbonFlux (D)` <dbl>\n\n\n\n\n\nCalculate the total cumulative carbon sequestration.\n\nPythonR\n\n\n\ndf[\"totalProjectCarbonSeq (E)\"] = df[\"cumTotalCarbonSiteReduced (B)\"] + df[\"establishmentCarbonLoss (C)\"] + df[\"cumSoilCarbonFlux (D)\"]\n\ndf.head()\n\n   period  ...  totalProjectCarbonSeq (E)\n0     0-5  ...                 -52.143333\n1    5-10  ...                  38.220667\n2   10-15  ...                 356.872667\n3   15-20  ...                1106.180667\n4   20-25  ...                1564.224667\n\n[5 rows x 6 columns]\n\n\n\n\n\ndf <- df |>\n    dplyr::mutate(\"totalProjectCarbonSeq (E)\" = `cumTotalCarbonSiteReduced (B)` + `establishmentCarbonLoss (C)` + `cumSoilCarbonFlux (D)`)\n\ndf |> head()\n\n# A tibble: 6 × 6\n  period   cumTotalCarbonSite (A…¹ cumTotalCarbonSiteRe…² establishmentCarbonL…³\n  <chr>                      <dbl>                  <dbl>                  <dbl>\n1 \"  0-5\"                     24.7                   19.8                  -72.3\n2 \"  5-10\"                   131.                   105.                   -72.3\n3 \" 10-15\"                   522.                   418.                   -72.3\n4 \" 15-20\"                  1452                   1162.                   -72.3\n5 \" 20-25\"                  2018.                  1614.                   -72.3\n6 \" 25-30\"                  2543.                  2035.                   -72.3\n# ℹ abbreviated names: ¹​`cumTotalCarbonSite (A)`,\n#   ²​`cumTotalCarbonSiteReduced (B)`, ³​`establishmentCarbonLoss (C)`\n# ℹ 2 more variables: `cumSoilCarbonFlux (D)` <dbl>,\n#   `totalProjectCarbonSeq (E)` <dbl>\n\n\n\n\n\nOptionally, add Baseline and Leakage data then calculate the adjusted, net total project carbon sequestration.\n\nPythonR\n\n\n\ndf[\"Baseline (F)\"] = 0\ndf[\"Leakage (G)\"] = 0\ndf[\"netTotalProjectCarbonSeq (H)\"] = df[\"totalProjectCarbonSeq (E)\"]+ df[\"Baseline (F)\"] + df[\"Leakage (G)\"]\n\ndf.head()\n\n   period  cumTotalCarbonSite (A)  ...  Leakage (G)  netTotalProjectCarbonSeq (H)\n0     0-5                   24.72  ...            0                    -52.143333\n1    5-10                  130.80  ...            0                     38.220667\n2   10-15                  522.24  ...            0                    356.872667\n3   15-20                 1452.00  ...            0                   1106.180667\n4   20-25                 2017.68  ...            0                   1564.224667\n\n[5 rows x 9 columns]\n\n\n\n\n\ndf <- df |>\n    dplyr::mutate(\"Baseline (F)\" = 0, \"Leakage (G)\" = 0) |>\n    dplyr::mutate(\"netTotalProjectCarbonSeq (H)\" = `totalProjectCarbonSeq (E)` + `Baseline (F)` + `Leakage (G)`)\n\ndf |> head()\n\n# A tibble: 6 × 9\n  period   cumTotalCarbonSite (A…¹ cumTotalCarbonSiteRe…² establishmentCarbonL…³\n  <chr>                      <dbl>                  <dbl>                  <dbl>\n1 \"  0-5\"                     24.7                   19.8                  -72.3\n2 \"  5-10\"                   131.                   105.                   -72.3\n3 \" 10-15\"                   522.                   418.                   -72.3\n4 \" 15-20\"                  1452                   1162.                   -72.3\n5 \" 20-25\"                  2018.                  1614.                   -72.3\n6 \" 25-30\"                  2543.                  2035.                   -72.3\n# ℹ abbreviated names: ¹​`cumTotalCarbonSite (A)`,\n#   ²​`cumTotalCarbonSiteReduced (B)`, ³​`establishmentCarbonLoss (C)`\n# ℹ 5 more variables: `cumSoilCarbonFlux (D)` <dbl>,\n#   `totalProjectCarbonSeq (E)` <dbl>, `Baseline (F)` <dbl>,\n#   `Leakage (G)` <dbl>, `netTotalProjectCarbonSeq (H)` <dbl>\n\n\n\n\n\nCalculate the claimable carbon sequestration by adding a final 20% buffer.\n\nPythonR\n\n\n\ndf[\"claimableCarbonSeq (J)\"] = df[\"netTotalProjectCarbonSeq (H)\"] * 0.8\ndf.head()\n\n   period  ...  claimableCarbonSeq (J)\n0     0-5  ...              -41.714667\n1    5-10  ...               30.576533\n2   10-15  ...              285.498133\n3   15-20  ...              884.944533\n4   20-25  ...             1251.379733\n\n[5 rows x 10 columns]\n\n\n\n\n\ndf <- df |>\n    dplyr::mutate(\"claimableCarbonSeq (J)\" = `netTotalProjectCarbonSeq (H)` * 0.8)\n\ndf |> head()\n\n# A tibble: 6 × 10\n  period   cumTotalCarbonSite (A…¹ cumTotalCarbonSiteRe…² establishmentCarbonL…³\n  <chr>                      <dbl>                  <dbl>                  <dbl>\n1 \"  0-5\"                     24.7                   19.8                  -72.3\n2 \"  5-10\"                   131.                   105.                   -72.3\n3 \" 10-15\"                   522.                   418.                   -72.3\n4 \" 15-20\"                  1452                   1162.                   -72.3\n5 \" 20-25\"                  2018.                  1614.                   -72.3\n6 \" 25-30\"                  2543.                  2035.                   -72.3\n# ℹ abbreviated names: ¹​`cumTotalCarbonSite (A)`,\n#   ²​`cumTotalCarbonSiteReduced (B)`, ³​`establishmentCarbonLoss (C)`\n# ℹ 6 more variables: `cumSoilCarbonFlux (D)` <dbl>,\n#   `totalProjectCarbonSeq (E)` <dbl>, `Baseline (F)` <dbl>,\n#   `Leakage (G)` <dbl>, `netTotalProjectCarbonSeq (H)` <dbl>,\n#   `claimableCarbonSeq (J)` <dbl>\n\n\n\n\n\nCalculate the mean claimable carbon sequestration per hectare, in tCO2e per ha per year\n\nPythonR\n\n\n\ndf[\"meanClaimableCarbonSeqPerHa (K)\"] = df[\"claimableCarbonSeq (J)\"] / wccSeedlingArea\ndf.head()\n\n   period  ...  meanClaimableCarbonSeqPerHa (K)\n0     0-5  ...                        -3.476222\n1    5-10  ...                         2.548044\n2   10-15  ...                        23.791511\n3   15-20  ...                        73.745378\n4   20-25  ...                       104.281644\n\n[5 rows x 11 columns]\n\n\n\n\n\ndf <- df |>\n    dplyr::mutate(\"meanClaimableCarbonSeqPerHa (K)\" = `claimableCarbonSeq (J)` / wccSeedlingArea)\n\ndf |> head()\n\n# A tibble: 6 × 11\n  period   cumTotalCarbonSite (A…¹ cumTotalCarbonSiteRe…² establishmentCarbonL…³\n  <chr>                      <dbl>                  <dbl>                  <dbl>\n1 \"  0-5\"                     24.7                   19.8                  -72.3\n2 \"  5-10\"                   131.                   105.                   -72.3\n3 \" 10-15\"                   522.                   418.                   -72.3\n4 \" 15-20\"                  1452                   1162.                   -72.3\n5 \" 20-25\"                  2018.                  1614.                   -72.3\n6 \" 25-30\"                  2543.                  2035.                   -72.3\n# ℹ abbreviated names: ¹​`cumTotalCarbonSite (A)`,\n#   ²​`cumTotalCarbonSiteReduced (B)`, ³​`establishmentCarbonLoss (C)`\n# ℹ 7 more variables: `cumSoilCarbonFlux (D)` <dbl>,\n#   `totalProjectCarbonSeq (E)` <dbl>, `Baseline (F)` <dbl>,\n#   `Leakage (G)` <dbl>, `netTotalProjectCarbonSeq (H)` <dbl>,\n#   `claimableCarbonSeq (J)` <dbl>, `meanClaimableCarbonSeqPerHa (K)` <dbl>"
  },
  {
    "objectID": "UsingESCTreeResults.html#python-4",
    "href": "UsingESCTreeResults.html#python-4",
    "title": "Using the ESCTreeResults API",
    "section": "Python",
    "text": "Python\n\nclimateScen_vals = [\"RCP2.6\", \"RCP2.6\"]\nclimateYear_vals = [\"Baseline\", \"2010\"]\nsmr_vals = [1, 1]\nsnr_vals = [2, 2]\nat_vals = [1300.0447, 1538.3716]\nct_vals = [6.13745, 6.13745]\ndams_vals = [15.321886, 15.321886]\nmd_vals = [100.896255, 92.44555]"
  },
  {
    "objectID": "UsingESCTreeResults.html#r-4",
    "href": "UsingESCTreeResults.html#r-4",
    "title": "Using the ESCTreeResults API",
    "section": "R",
    "text": "R\n\nclimateScen_vals <- list(\"RCP2.6\", \"RCP2.6\")\nclimateYear_vals <- list(\"Baseline\", \"2010\")\nsmr_vals <- list(1, 1)\nsnr_vals <- list(2, 2)\nat_vals <- list(1300.0447, 1538.3716)\nct_vals <- list(6.13745, 6.13745)\ndams_vals <- list(15.321886, 15.321886)\nmd_vals <- list(100.896255, 92.44555)\n\nThen forming the dictionary:\n\nPythonR\n\n\n\nescSiteData = {'climateScen': climateScen_vals, 'climateYear': climateYear_vals, \n               'SMR': smr_vals, 'SNR': snr_vals, 'AT': at_vals, \n               'CT': ct_vals, 'DAMS': dams_vals, 'MD': md_vals}\n\n\n\n\nescSiteData = list('climateScen' = climateScen_vals, 'climateYear' = climateYear_vals, \n                   'SMR' = smr_vals, 'SNR' = snr_vals, 'AT' = at_vals, \n                   'CT' = ct_vals, 'DAMS' = dams_vals, 'MD' = md_vals)\n\nAlternatively, the response from the ESCSiteData API can be passed to escSiteData.\n\n\n\nEstablish the site modifier options.\n\ndrainage:int\n\n0 = None.\n1 = Drainage installed.\n\nbrash:int\n\n0 = None (new planting).\n1 = Fresh brash (<18 months).\n2 = Brash (>18 months).\n\nfertiliser:int\n\n0 = None.\n1 = Fertiliser applied.\n\nexposure:int\n\n0 = None.\n1 = Exposed ridge/Coastal zone.\n2 = Local shelter/Less exposed/Underplanting.\n\n\n\nPythonR\n\n\n\ndrainage = 0\nbrash = 0\nfertiliser = 0\nexposure = 0\n\n\n\n\ndrainage <- 0\nbrash <- 0\nfertiliser <- 0\nexposure <- 0\n\n\n\n\nEstablish the ESC version.\n\nescVersion:str\n\n“4.33” = “4.33”\n\n\n\nPythonR\n\n\n\nescVersion = \"4.33\"\n\n\n\n\nescVersion <- \"4.33\"\n\n\n\n\nCompose the request body.\n\nPythonR\n\n\n\nreq_body = {\"lon\": lon, \"lat\": lat, \n            \"smr\": smr_modVal, \"snr\": snr_modVal,\n            \"escSiteData\": escSiteData,\n            \"drainage\": drainage, \"brash\": brash, \"fertiliser\": fertiliser, \"exposure\": exposure,\n            \"escVersion\": escVersion}\n\n\n\n\nreq_list <- list(\"lon\" = lon, \"lat\" = lat, \n                 \"smr\" = smr_modVal, \"snr\" = snr_modVal,\n                 \"escSiteData\" = escSiteData,\n                 \"drainage\" = drainage, \"brash\" = brash, \"fertiliser\" =  fertiliser, \"exposure\" = exposure, \n                 \"escVersion\" = escVersion)\n\nreq_body <- jsonlite::toJSON(req_list, auto_unbox = TRUE)"
  }
]